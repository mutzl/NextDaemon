//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.9.0.0
//   At: 2023-03-07T20:09:01.9064920+01:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update JoySoftware.NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersistentNotificationEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TimerEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<VacuumEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BrowserModServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<DwainsDashboardServices>();
        serviceCollection.AddTransient<ElgatoServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GoechargerServices>();
        serviceCollection.AddTransient<GoechargerMqttServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HueServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PlexServices>();
        serviceCollection.AddTransient<ProfilerServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RestServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<ShoppingListServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SkodaconnectServices>();
        serviceCollection.AddTransient<SonosServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SynologyDsmServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<UtilityMeterServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WasteCollectionScheduleServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    AlarmControlPanelEntities AlarmControlPanel { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    InputButtonEntities InputButton { get; }

    InputDatetimeEntities InputDatetime { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    InputTextEntities InputText { get; }

    LightEntities Light { get; }

    LockEntities Lock { get; }

    MediaPlayerEntities MediaPlayer { get; }

    NumberEntities Number { get; }

    PersistentNotificationEntities PersistentNotification { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TimerEntities Timer { get; }

    UpdateEntities Update { get; }

    VacuumEntities Vacuum { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LightEntities Light => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersistentNotificationEntities PersistentNotification => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TimerEntities Timer => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public VacuumEntities Vacuum => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Xiaomi Gateway Alarm</summary>
    public AlarmControlPanelEntity XiaomiGatewayAlarm => new(_haContext, "alarm_control_panel.xiaomi_gateway_alarm");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bewegung in Küche</summary>
    public AutomationEntity BewegungInKuche => new(_haContext, "automation.bewegung_in_kuche");
    ///<summary>Elias Spots Dunkler</summary>
    public AutomationEntity EliasSpotsDunkler => new(_haContext, "automation.elias_spots_dunkler");
    ///<summary>Elias Spots Heller</summary>
    public AutomationEntity EliasSpotsHeller => new(_haContext, "automation.elias_spots_heller");
    ///<summary>Elias Toggle</summary>
    public AutomationEntity EliasSpotsToggle => new(_haContext, "automation.elias_spots_toggle");
    ///<summary>Jokob Spots Dunkler</summary>
    public AutomationEntity JokobSpotsDunkler => new(_haContext, "automation.jokob_spots_dunkler");
    ///<summary>Jokob Spots Heller</summary>
    public AutomationEntity JokobSpotsHeller => new(_haContext, "automation.jokob_spots_heller");
    ///<summary>Turn off Sideboard when Pendelleuchte turned off</summary>
    public AutomationEntity NeueAutomatisierung => new(_haContext, "automation.neue_automatisierung");
    ///<summary>Jugendzimmer Vorraum Toggle</summary>
    public AutomationEntity NeueAutomatisierung2 => new(_haContext, "automation.neue_automatisierung_2");
    ///<summary>Jokob Toggle</summary>
    public AutomationEntity NeueAutomatisierung3 => new(_haContext, "automation.neue_automatisierung_3");
    ///<summary>Timer Finished</summary>
    public AutomationEntity TimerFinished => new(_haContext, "automation.timer_finished");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>always_false</summary>
    public BinarySensorEntity AlwaysFalse => new(_haContext, "binary_sensor.always_false");
    ///<summary>always_true</summary>
    public BinarySensorEntity AlwaysTrue => new(_haContext, "binary_sensor.always_true");
    ///<summary>Backups Stale</summary>
    public BinarySensorEntity BackupsStale => new(_haContext, "binary_sensor.backups_stale");
    ///<summary>Devionc</summary>
    public BinarySensorEntity Devionc => new(_haContext, "binary_sensor.devionc");
    ///<summary>DiskStation2 (Drive 1) Below Min Remaining Life</summary>
    public BinarySensorEntity DiskstationDrive1BelowMinRemainingLife => new(_haContext, "binary_sensor.diskstation_drive_1_below_min_remaining_life");
    ///<summary>DiskStation (Drive 1) Below Min Remaining Life</summary>
    public BinarySensorEntity DiskstationDrive1BelowMinRemainingLife2 => new(_haContext, "binary_sensor.diskstation_drive_1_below_min_remaining_life_2");
    ///<summary>DiskStation2 (Drive 1) Exceeded Max Bad Sectors</summary>
    public BinarySensorEntity DiskstationDrive1ExceededMaxBadSectors => new(_haContext, "binary_sensor.diskstation_drive_1_exceeded_max_bad_sectors");
    ///<summary>DiskStation (Drive 1) Exceeded Max Bad Sectors</summary>
    public BinarySensorEntity DiskstationDrive1ExceededMaxBadSectors2 => new(_haContext, "binary_sensor.diskstation_drive_1_exceeded_max_bad_sectors_2");
    ///<summary>DiskStation2 (Drive 2) Below Min Remaining Life</summary>
    public BinarySensorEntity DiskstationDrive2BelowMinRemainingLife => new(_haContext, "binary_sensor.diskstation_drive_2_below_min_remaining_life");
    ///<summary>DiskStation (Drive 2) Below Min Remaining Life</summary>
    public BinarySensorEntity DiskstationDrive2BelowMinRemainingLife2 => new(_haContext, "binary_sensor.diskstation_drive_2_below_min_remaining_life_2");
    ///<summary>DiskStation2 (Drive 2) Exceeded Max Bad Sectors</summary>
    public BinarySensorEntity DiskstationDrive2ExceededMaxBadSectors => new(_haContext, "binary_sensor.diskstation_drive_2_exceeded_max_bad_sectors");
    ///<summary>DiskStation (Drive 2) Exceeded Max Bad Sectors</summary>
    public BinarySensorEntity DiskstationDrive2ExceededMaxBadSectors2 => new(_haContext, "binary_sensor.diskstation_drive_2_exceeded_max_bad_sectors_2");
    ///<summary>DiskStation (Drive 3) Below Min Remaining Life</summary>
    public BinarySensorEntity DiskstationDrive3BelowMinRemainingLife => new(_haContext, "binary_sensor.diskstation_drive_3_below_min_remaining_life");
    ///<summary>DiskStation (Drive 3) Exceeded Max Bad Sectors</summary>
    public BinarySensorEntity DiskstationDrive3ExceededMaxBadSectors => new(_haContext, "binary_sensor.diskstation_drive_3_exceeded_max_bad_sectors");
    ///<summary>DiskStation (Drive 4) Below Min Remaining Life</summary>
    public BinarySensorEntity DiskstationDrive4BelowMinRemainingLife => new(_haContext, "binary_sensor.diskstation_drive_4_below_min_remaining_life");
    ///<summary>DiskStation (Drive 4) Exceeded Max Bad Sectors</summary>
    public BinarySensorEntity DiskstationDrive4ExceededMaxBadSectors => new(_haContext, "binary_sensor.diskstation_drive_4_exceeded_max_bad_sectors");
    ///<summary>DiskStation2 Security Status</summary>
    public BinarySensorEntity DiskstationSecurityStatus => new(_haContext, "binary_sensor.diskstation_security_status");
    ///<summary>DiskStation Security Status</summary>
    public BinarySensorEntity DiskstationSecurityStatus2 => new(_haContext, "binary_sensor.diskstation_security_status_2");
    ///<summary>DiskStation Update Available</summary>
    public BinarySensorEntity DiskstationUpdateAvailable => new(_haContext, "binary_sensor.diskstation_update_available");
    ///<summary>Fibaro Door 1: Access Control - Window/door is closed</summary>
    public BinarySensorEntity DoorOpeningSensorAccessControlWindowDoorIsClosed => new(_haContext, "binary_sensor.door_opening_sensor_access_control_window_door_is_closed");
    ///<summary>Fibaro Door 1: Access Control - Window/door is open</summary>
    public BinarySensorEntity DoorOpeningSensorAccessControlWindowDoorIsOpen => new(_haContext, "binary_sensor.door_opening_sensor_access_control_window_door_is_open");
    ///<summary>Fibaro Door 1: Any</summary>
    public BinarySensorEntity DoorOpeningSensorAny => new(_haContext, "binary_sensor.door_opening_sensor_any");
    ///<summary>Battery is disconnected</summary>
    public BinarySensorEntity DoorOpeningSensorBatteryIsDisconnected => new(_haContext, "binary_sensor.door_opening_sensor_battery_is_disconnected");
    ///<summary>Battery is disconnected</summary>
    public BinarySensorEntity DoorOpeningSensorBatteryIsDisconnected2 => new(_haContext, "binary_sensor.door_opening_sensor_battery_is_disconnected_2");
    ///<summary>Battery temperature is low</summary>
    public BinarySensorEntity DoorOpeningSensorBatteryTemperatureIsLow => new(_haContext, "binary_sensor.door_opening_sensor_battery_temperature_is_low");
    ///<summary>Battery temperature is low</summary>
    public BinarySensorEntity DoorOpeningSensorBatteryTemperatureIsLow2 => new(_haContext, "binary_sensor.door_opening_sensor_battery_temperature_is_low_2");
    ///<summary>Fluid is low</summary>
    public BinarySensorEntity DoorOpeningSensorFluidIsLow => new(_haContext, "binary_sensor.door_opening_sensor_fluid_is_low");
    ///<summary>Fluid is low</summary>
    public BinarySensorEntity DoorOpeningSensorFluidIsLow2 => new(_haContext, "binary_sensor.door_opening_sensor_fluid_is_low_2");
    ///<summary>Fibaro Door 1: Home Security - Tampering, product cover removed</summary>
    public BinarySensorEntity DoorOpeningSensorHomeSecurityTamperingProductCoverRemoved => new(_haContext, "binary_sensor.door_opening_sensor_home_security_tampering_product_cover_removed");
    ///<summary>Low battery level</summary>
    public BinarySensorEntity DoorOpeningSensorLowBatteryLevel => new(_haContext, "binary_sensor.door_opening_sensor_low_battery_level");
    ///<summary>Overheating</summary>
    public BinarySensorEntity DoorOpeningSensorOverheating => new(_haContext, "binary_sensor.door_opening_sensor_overheating");
    ///<summary>Overheating</summary>
    public BinarySensorEntity DoorOpeningSensorOverheating2 => new(_haContext, "binary_sensor.door_opening_sensor_overheating_2");
    ///<summary>Rechargeable</summary>
    public BinarySensorEntity DoorOpeningSensorRechargeable => new(_haContext, "binary_sensor.door_opening_sensor_rechargeable");
    ///<summary>Rechargeable</summary>
    public BinarySensorEntity DoorOpeningSensorRechargeable2 => new(_haContext, "binary_sensor.door_opening_sensor_rechargeable_2");
    ///<summary>Used as backup</summary>
    public BinarySensorEntity DoorOpeningSensorUsedAsBackup => new(_haContext, "binary_sensor.door_opening_sensor_used_as_backup");
    ///<summary>Used as backup</summary>
    public BinarySensorEntity DoorOpeningSensorUsedAsBackup2 => new(_haContext, "binary_sensor.door_opening_sensor_used_as_backup_2");
    ///<summary>Enyaq Charging cable connected</summary>
    public BinarySensorEntity EnyaqChargingCableConnected => new(_haContext, "binary_sensor.enyaq_charging_cable_connected");
    ///<summary>Enyaq Charging cable locked</summary>
    public BinarySensorEntity EnyaqChargingCableLocked => new(_haContext, "binary_sensor.enyaq_charging_cable_locked");
    ///<summary>Enyaq Door closed left back</summary>
    public BinarySensorEntity EnyaqDoorClosedLeftBack => new(_haContext, "binary_sensor.enyaq_door_closed_left_back");
    ///<summary>Enyaq Door closed left front</summary>
    public BinarySensorEntity EnyaqDoorClosedLeftFront => new(_haContext, "binary_sensor.enyaq_door_closed_left_front");
    ///<summary>Enyaq Door closed right back</summary>
    public BinarySensorEntity EnyaqDoorClosedRightBack => new(_haContext, "binary_sensor.enyaq_door_closed_right_back");
    ///<summary>Enyaq Door closed right front</summary>
    public BinarySensorEntity EnyaqDoorClosedRightFront => new(_haContext, "binary_sensor.enyaq_door_closed_right_front");
    ///<summary>Enyaq Doors locked</summary>
    public BinarySensorEntity EnyaqDoorsLocked => new(_haContext, "binary_sensor.enyaq_doors_locked");
    ///<summary>Enyaq External power</summary>
    public BinarySensorEntity EnyaqExternalPower => new(_haContext, "binary_sensor.enyaq_external_power");
    ///<summary>Enyaq Hood closed</summary>
    public BinarySensorEntity EnyaqHoodClosed => new(_haContext, "binary_sensor.enyaq_hood_closed");
    ///<summary>Enyaq Parking light</summary>
    public BinarySensorEntity EnyaqParkingLight => new(_haContext, "binary_sensor.enyaq_parking_light");
    ///<summary>Enyaq Seat heating front left</summary>
    public BinarySensorEntity EnyaqSeatHeatingFrontLeft => new(_haContext, "binary_sensor.enyaq_seat_heating_front_left");
    ///<summary>Enyaq Seat heating front right</summary>
    public BinarySensorEntity EnyaqSeatHeatingFrontRight => new(_haContext, "binary_sensor.enyaq_seat_heating_front_right");
    ///<summary>Enyaq Sunroof closed</summary>
    public BinarySensorEntity EnyaqSunroofClosed => new(_haContext, "binary_sensor.enyaq_sunroof_closed");
    ///<summary>Enyaq Trunk closed</summary>
    public BinarySensorEntity EnyaqTrunkClosed => new(_haContext, "binary_sensor.enyaq_trunk_closed");
    ///<summary>Enyaq Vehicle Moving</summary>
    public BinarySensorEntity EnyaqVehicleMoving => new(_haContext, "binary_sensor.enyaq_vehicle_moving");
    ///<summary>Enyaq Window closed left back</summary>
    public BinarySensorEntity EnyaqWindowClosedLeftBack => new(_haContext, "binary_sensor.enyaq_window_closed_left_back");
    ///<summary>Enyaq Window closed left front</summary>
    public BinarySensorEntity EnyaqWindowClosedLeftFront => new(_haContext, "binary_sensor.enyaq_window_closed_left_front");
    ///<summary>Enyaq Window closed right back</summary>
    public BinarySensorEntity EnyaqWindowClosedRightBack => new(_haContext, "binary_sensor.enyaq_window_closed_right_back");
    ///<summary>Enyaq Window closed right front</summary>
    public BinarySensorEntity EnyaqWindowClosedRightFront => new(_haContext, "binary_sensor.enyaq_window_closed_right_front");
    ///<summary>Enyaq Windows closed</summary>
    public BinarySensorEntity EnyaqWindowsClosed => new(_haContext, "binary_sensor.enyaq_windows_closed");
    ///<summary>Fibaro Door 2: Access Control - Window/door is open</summary>
    public BinarySensorEntity FibaroDoor2AccessControlWindowDoorIsOpen => new(_haContext, "binary_sensor.fibaro_door_2_access_control_window_door_is_open");
    ///<summary>Fibaro Door 2: Home Security - Tampering, product cover removed</summary>
    public BinarySensorEntity FibaroDoor2HomeSecurityTamperingProductCoverRemoved => new(_haContext, "binary_sensor.fibaro_door_2_home_security_tampering_product_cover_removed");
    ///<summary>Fibaro Door 2: Low battery level</summary>
    public BinarySensorEntity FibaroDoor2LowBatteryLevel => new(_haContext, "binary_sensor.fibaro_door_2_low_battery_level");
    ///<summary>Galaxy Note8 presence</summary>
    public BinarySensorEntity GalaxyNote8Presence => new(_haContext, "binary_sensor.galaxy_note8_presence");
    ///<summary>Galaxy Watch4 Classic Is Charging</summary>
    public BinarySensorEntity GalaxyWatch4ClassicIsCharging => new(_haContext, "binary_sensor.galaxy_watch4_classic_is_charging");
    ///<summary>Gardena Smart System connection</summary>
    public BinarySensorEntity GardenaSmartSystemConnection => new(_haContext, "binary_sensor.gardena_smart_system_connection");
    ///<summary>Elias OnePlus  App Inactive</summary>
    public BinarySensorEntity Gm1913AppInaktiv => new(_haContext, "binary_sensor.gm1913_app_inaktiv");
    ///<summary>Elias OnePlus  Bluetooth State</summary>
    public BinarySensorEntity Gm1913BluetoothStatus => new(_haContext, "binary_sensor.gm1913_bluetooth_status");
    ///<summary>Elias OnePlus  Keyguard Secure</summary>
    public BinarySensorEntity Gm1913Displaysperre => new(_haContext, "binary_sensor.gm1913_displaysperre");
    ///<summary>Elias OnePlus  Keyguard Locked</summary>
    public BinarySensorEntity Gm1913DisplaysperreGesetzt => new(_haContext, "binary_sensor.gm1913_displaysperre_gesetzt");
    ///<summary>Elias OnePlus  Doze Mode</summary>
    public BinarySensorEntity Gm1913DozeModus => new(_haContext, "binary_sensor.gm1913_doze_modus");
    ///<summary>Elias OnePlus  Power Save</summary>
    public BinarySensorEntity Gm1913Energiesparen => new(_haContext, "binary_sensor.gm1913_energiesparen");
    ///<summary>Elias OnePlus  Speakerphone</summary>
    public BinarySensorEntity Gm1913Freisprechen => new(_haContext, "binary_sensor.gm1913_freisprechen");
    ///<summary>Elias OnePlus  Device Locked</summary>
    public BinarySensorEntity Gm1913GeratIstGesperrt => new(_haContext, "binary_sensor.gm1913_gerat_ist_gesperrt");
    ///<summary>Elias OnePlus  Device Secure</summary>
    public BinarySensorEntity Gm1913GeratIstSicher => new(_haContext, "binary_sensor.gm1913_gerat_ist_sicher");
    ///<summary>Elias OnePlus  Interactive</summary>
    public BinarySensorEntity Gm1913Inaktiv => new(_haContext, "binary_sensor.gm1913_inaktiv");
    ///<summary>GM1913 Is Charging</summary>
    public BinarySensorEntity Gm1913IsCharging => new(_haContext, "binary_sensor.gm1913_is_charging");
    ///<summary>Elias OnePlus  Headphones</summary>
    public BinarySensorEntity Gm1913Kopfhorer => new(_haContext, "binary_sensor.gm1913_kopfhorer");
    ///<summary>Elias OnePlus  Is Charging</summary>
    public BinarySensorEntity Gm1913LadtDerzeit => new(_haContext, "binary_sensor.gm1913_ladt_derzeit");
    ///<summary>Elias OnePlus  Mic Muted</summary>
    public BinarySensorEntity Gm1913MikrofonStummgeschaltet => new(_haContext, "binary_sensor.gm1913_mikrofon_stummgeschaltet");
    ///<summary>Elias OnePlus  Mobile Data</summary>
    public BinarySensorEntity Gm1913MobileDaten => new(_haContext, "binary_sensor.gm1913_mobile_daten");
    ///<summary>Elias OnePlus  Mobile Data Roaming</summary>
    public BinarySensorEntity Gm1913MobilesDatenroaming => new(_haContext, "binary_sensor.gm1913_mobiles_datenroaming");
    ///<summary>Elias OnePlus  Music Active</summary>
    public BinarySensorEntity Gm1913MusikWirdAbgespielt => new(_haContext, "binary_sensor.gm1913_musik_wird_abgespielt");
    ///<summary>Elias OnePlus  WiFi State</summary>
    public BinarySensorEntity Gm1913WlanStatus => new(_haContext, "binary_sensor.gm1913_wlan_status");
    ///<summary>16A adapter used</summary>
    public BinarySensorEntity GoEcharger203597Adi => new(_haContext, "binary_sensor.go_echarger_203597_adi");
    ///<summary>Car connected</summary>
    public BinarySensorEntity GoEcharger203597Car => new(_haContext, "binary_sensor.go_echarger_203597_car");
    ///<summary>Force single phase</summary>
    public BinarySensorEntity GoEcharger203597Fsp => new(_haContext, "binary_sensor.go_echarger_203597_fsp");
    ///<summary>HA</summary>
    public BinarySensorEntity Ha => new(_haContext, "binary_sensor.ha");
    ///<summary>Heizkörper overheating</summary>
    public BinarySensorEntity HeizkorperOverheating => new(_haContext, "binary_sensor.heizkorper_overheating");
    ///<summary>Heizkörper overpowering</summary>
    public BinarySensorEntity HeizkorperOverpowering => new(_haContext, "binary_sensor.heizkorper_overpowering");
    ///<summary>Update available</summary>
    public BinarySensorEntity HomeAssistantOperatingSystemUpdateAvailable => new(_haContext, "binary_sensor.home_assistant_operating_system_update_available");
    ///<summary>Jugend Vorraum Sensor Motion</summary>
    public BinarySensorEntity HueMotionSensor1Motion => new(_haContext, "binary_sensor.hue_motion_sensor_1_motion");
    ///<summary>Stiegen motion sensor Motion</summary>
    public BinarySensorEntity HueMotionSensor1Motion2 => new(_haContext, "binary_sensor.hue_motion_sensor_1_motion_2");
    ///<summary>Galerie motion sensor Motion</summary>
    public BinarySensorEntity HueMotionSensor1Motion3 => new(_haContext, "binary_sensor.hue_motion_sensor_1_motion_3");
    ///<summary>Hue motion sensor WC Motion</summary>
    public BinarySensorEntity HueMotionSensor1Motion4 => new(_haContext, "binary_sensor.hue_motion_sensor_1_motion_4");
    ///<summary>Hue motion sensor Schrankdg Motion</summary>
    public BinarySensorEntity HueMotionSensor1Motion5 => new(_haContext, "binary_sensor.hue_motion_sensor_1_motion_5");
    ///<summary>Bewegungsmelder Terasse Motion</summary>
    public BinarySensorEntity HueOutdoorMotionSensor1Motion => new(_haContext, "binary_sensor.hue_outdoor_motion_sensor_1_motion");
    ///<summary>Motion 1: Home Security - Motion detection</summary>
    public BinarySensorEntity Motion1HomeSecurityMotionDetection => new(_haContext, "binary_sensor.motion_1_home_security_motion_detection");
    ///<summary>Motion 1: Home Security - Tampering, product cover removed</summary>
    public BinarySensorEntity Motion1HomeSecurityTamperingProductCoverRemoved => new(_haContext, "binary_sensor.motion_1_home_security_tampering_product_cover_removed");
    ///<summary>Motion 1: Low battery level</summary>
    public BinarySensorEntity Motion1LowBatteryLevel => new(_haContext, "binary_sensor.motion_1_low_battery_level");
    ///<summary>Motion 2: Home Security - Motion detection</summary>
    public BinarySensorEntity Motion2HomeSecurityMotionDetection => new(_haContext, "binary_sensor.motion_2_home_security_motion_detection");
    ///<summary>Motion 2: Home Security - Tampering, product cover removed</summary>
    public BinarySensorEntity Motion2HomeSecurityTamperingProductCoverRemoved => new(_haContext, "binary_sensor.motion_2_home_security_tampering_product_cover_removed");
    ///<summary>Motion 2: Low battery level</summary>
    public BinarySensorEntity Motion2LowBatteryLevel => new(_haContext, "binary_sensor.motion_2_low_battery_level");
    ///<summary>mytest</summary>
    public BinarySensorEntity Mytest => new(_haContext, "binary_sensor.mytest");
    ///<summary>mytest_boolean</summary>
    public BinarySensorEntity MytestBoolean => new(_haContext, "binary_sensor.mytest_boolean");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>S22 Ultra Is Charging</summary>
    public BinarySensorEntity S22UltraIsCharging => new(_haContext, "binary_sensor.s22_ultra_is_charging");
    ///<summary>Shelly Door 1 Door</summary>
    public BinarySensorEntity ShellyDoor1Door => new(_haContext, "binary_sensor.shelly_door_1_door");
    ///<summary>Shelly Door 1 Vibration</summary>
    public BinarySensorEntity ShellyDoor1Vibration => new(_haContext, "binary_sensor.shelly_door_1_vibration");
    ///<summary>Shelly Flood 1 Flood</summary>
    public BinarySensorEntity ShellyFlood1Flood => new(_haContext, "binary_sensor.shelly_flood_1_flood");
    ///<summary>Shelly Motion 1 Motion</summary>
    public BinarySensorEntity ShellyMotion1Motion => new(_haContext, "binary_sensor.shelly_motion_1_motion");
    ///<summary>Shelly Motion 1 Vibration</summary>
    public BinarySensorEntity ShellyMotion1Vibration => new(_haContext, "binary_sensor.shelly_motion_1_vibration");
    ///<summary>Shelly Plug 1 Overheating</summary>
    public BinarySensorEntity ShellyPlug1Overheating => new(_haContext, "binary_sensor.shelly_plug_1_overheating");
    ///<summary>Shelly Plug 1 Overpowering</summary>
    public BinarySensorEntity ShellyPlug1Overpowering => new(_haContext, "binary_sensor.shelly_plug_1_overpowering");
    ///<summary>show_next_problemstoffe</summary>
    public BinarySensorEntity ShowNextProblemstoffe => new(_haContext, "binary_sensor.show_next_problemstoffe");
    ///<summary>show_next_rauchfangkehrer</summary>
    public BinarySensorEntity ShowNextRauchfangkehrer => new(_haContext, "binary_sensor.show_next_rauchfangkehrer");
    ///<summary>Strip 3: Access Control - Window/door is open</summary>
    public BinarySensorEntity Strip3AccessControlWindowDoorIsOpen => new(_haContext, "binary_sensor.strip_3_access_control_window_door_is_open");
    ///<summary>Strip 3: Low battery level</summary>
    public BinarySensorEntity Strip3LowBatteryLevel => new(_haContext, "binary_sensor.strip_3_low_battery_level");
    ///<summary>Window/door is open</summary>
    public BinarySensorEntity StripsMazwAccessControlWindowDoorIsOpen => new(_haContext, "binary_sensor.strips_mazw_access_control_window_door_is_open");
    ///<summary>Window/door is open</summary>
    public BinarySensorEntity StripsMazwAccessControlWindowDoorIsOpen2 => new(_haContext, "binary_sensor.strips_mazw_access_control_window_door_is_open_2");
    ///<summary>Battery is disconnected</summary>
    public BinarySensorEntity StripsMazwBatteryIsDisconnected => new(_haContext, "binary_sensor.strips_mazw_battery_is_disconnected");
    ///<summary>Battery is disconnected</summary>
    public BinarySensorEntity StripsMazwBatteryIsDisconnected2 => new(_haContext, "binary_sensor.strips_mazw_battery_is_disconnected_2");
    ///<summary>Battery is disconnected</summary>
    public BinarySensorEntity StripsMazwBatteryIsDisconnected3 => new(_haContext, "binary_sensor.strips_mazw_battery_is_disconnected_3");
    ///<summary>Battery temperature is low</summary>
    public BinarySensorEntity StripsMazwBatteryTemperatureIsLow => new(_haContext, "binary_sensor.strips_mazw_battery_temperature_is_low");
    ///<summary>Battery temperature is low</summary>
    public BinarySensorEntity StripsMazwBatteryTemperatureIsLow2 => new(_haContext, "binary_sensor.strips_mazw_battery_temperature_is_low_2");
    ///<summary>Battery temperature is low</summary>
    public BinarySensorEntity StripsMazwBatteryTemperatureIsLow3 => new(_haContext, "binary_sensor.strips_mazw_battery_temperature_is_low_3");
    ///<summary>Fluid is low</summary>
    public BinarySensorEntity StripsMazwFluidIsLow => new(_haContext, "binary_sensor.strips_mazw_fluid_is_low");
    ///<summary>Fluid is low</summary>
    public BinarySensorEntity StripsMazwFluidIsLow2 => new(_haContext, "binary_sensor.strips_mazw_fluid_is_low_2");
    ///<summary>Fluid is low</summary>
    public BinarySensorEntity StripsMazwFluidIsLow3 => new(_haContext, "binary_sensor.strips_mazw_fluid_is_low_3");
    ///<summary>Low battery level</summary>
    public BinarySensorEntity StripsMazwLowBatteryLevel => new(_haContext, "binary_sensor.strips_mazw_low_battery_level");
    ///<summary>Low battery level</summary>
    public BinarySensorEntity StripsMazwLowBatteryLevel2 => new(_haContext, "binary_sensor.strips_mazw_low_battery_level_2");
    ///<summary>Overheating</summary>
    public BinarySensorEntity StripsMazwOverheating => new(_haContext, "binary_sensor.strips_mazw_overheating");
    ///<summary>Overheating</summary>
    public BinarySensorEntity StripsMazwOverheating2 => new(_haContext, "binary_sensor.strips_mazw_overheating_2");
    ///<summary>Overheating</summary>
    public BinarySensorEntity StripsMazwOverheating3 => new(_haContext, "binary_sensor.strips_mazw_overheating_3");
    ///<summary>Rechargeable</summary>
    public BinarySensorEntity StripsMazwRechargeable => new(_haContext, "binary_sensor.strips_mazw_rechargeable");
    ///<summary>Rechargeable</summary>
    public BinarySensorEntity StripsMazwRechargeable2 => new(_haContext, "binary_sensor.strips_mazw_rechargeable_2");
    ///<summary>Rechargeable</summary>
    public BinarySensorEntity StripsMazwRechargeable3 => new(_haContext, "binary_sensor.strips_mazw_rechargeable_3");
    ///<summary>Used as backup</summary>
    public BinarySensorEntity StripsMazwUsedAsBackup => new(_haContext, "binary_sensor.strips_mazw_used_as_backup");
    ///<summary>Used as backup</summary>
    public BinarySensorEntity StripsMazwUsedAsBackup2 => new(_haContext, "binary_sensor.strips_mazw_used_as_backup_2");
    ///<summary>Used as backup</summary>
    public BinarySensorEntity StripsMazwUsedAsBackup3 => new(_haContext, "binary_sensor.strips_mazw_used_as_backup_3");
    ///<summary>Thomas Handy App Inactive</summary>
    public BinarySensorEntity ThomasHandyAppInaktiv => new(_haContext, "binary_sensor.thomas_handy_app_inaktiv");
    ///<summary>Thomas Handy Bluetooth State</summary>
    public BinarySensorEntity ThomasHandyBluetoothStatus => new(_haContext, "binary_sensor.thomas_handy_bluetooth_status");
    ///<summary>Thomas Handy Keyguard Secure</summary>
    public BinarySensorEntity ThomasHandyDisplaysperre => new(_haContext, "binary_sensor.thomas_handy_displaysperre");
    ///<summary>Thomas Handy Keyguard Locked</summary>
    public BinarySensorEntity ThomasHandyDisplaysperreGesetzt => new(_haContext, "binary_sensor.thomas_handy_displaysperre_gesetzt");
    ///<summary>Thomas Handy Doze Mode</summary>
    public BinarySensorEntity ThomasHandyDozeModus => new(_haContext, "binary_sensor.thomas_handy_doze_modus");
    ///<summary>Thomas Handy Power Save</summary>
    public BinarySensorEntity ThomasHandyEnergiesparen => new(_haContext, "binary_sensor.thomas_handy_energiesparen");
    ///<summary>Thomas Handy Speakerphone</summary>
    public BinarySensorEntity ThomasHandyFreisprechen => new(_haContext, "binary_sensor.thomas_handy_freisprechen");
    ///<summary>Thomas Handy Device Locked</summary>
    public BinarySensorEntity ThomasHandyGeratIstGesperrt => new(_haContext, "binary_sensor.thomas_handy_gerat_ist_gesperrt");
    ///<summary>Thomas Handy Device Secure</summary>
    public BinarySensorEntity ThomasHandyGeratIstSicher => new(_haContext, "binary_sensor.thomas_handy_gerat_ist_sicher");
    ///<summary>Thomas Handy Interactive</summary>
    public BinarySensorEntity ThomasHandyInaktiv => new(_haContext, "binary_sensor.thomas_handy_inaktiv");
    ///<summary>Thomas Handy Headphones</summary>
    public BinarySensorEntity ThomasHandyKopfhorer => new(_haContext, "binary_sensor.thomas_handy_kopfhorer");
    ///<summary>Thomas Handy Is Charging</summary>
    public BinarySensorEntity ThomasHandyLadtDerzeit => new(_haContext, "binary_sensor.thomas_handy_ladt_derzeit");
    ///<summary>Thomas Handy Mic Muted</summary>
    public BinarySensorEntity ThomasHandyMikrofonStummgeschaltet => new(_haContext, "binary_sensor.thomas_handy_mikrofon_stummgeschaltet");
    ///<summary>Thomas Handy Mobile Data</summary>
    public BinarySensorEntity ThomasHandyMobileDaten => new(_haContext, "binary_sensor.thomas_handy_mobile_daten");
    ///<summary>Thomas Handy Mobile Data Roaming</summary>
    public BinarySensorEntity ThomasHandyMobilesDatenroaming => new(_haContext, "binary_sensor.thomas_handy_mobiles_datenroaming");
    ///<summary>Thomas Handy Music Active</summary>
    public BinarySensorEntity ThomasHandyMusikWirdAbgespielt => new(_haContext, "binary_sensor.thomas_handy_musik_wird_abgespielt");
    ///<summary>Thomas Handy WiFi State</summary>
    public BinarySensorEntity ThomasHandyWlanStatus => new(_haContext, "binary_sensor.thomas_handy_wlan_status");
    ///<summary>Updater</summary>
    public BinarySensorEntity Updater => new(_haContext, "binary_sensor.updater");
    ///<summary>vistapool_aux</summary>
    public BinarySensorEntity VistapoolAux => new(_haContext, "binary_sensor.vistapool_aux");
    ///<summary>vistapool_connected</summary>
    public BinarySensorEntity VistapoolConnected => new(_haContext, "binary_sensor.vistapool_connected");
    ///<summary>vistapool_filter</summary>
    public BinarySensorEntity VistapoolFilter => new(_haContext, "binary_sensor.vistapool_filter");
    ///<summary>vistapool_heating</summary>
    public BinarySensorEntity VistapoolHeating => new(_haContext, "binary_sensor.vistapool_heating");
    ///<summary>vistapool_light</summary>
    public BinarySensorEntity VistapoolLight => new(_haContext, "binary_sensor.vistapool_light");
    ///<summary>vistapool_test</summary>
    public BinarySensorEntity VistapoolTest => new(_haContext, "binary_sensor.vistapool_test");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bulb Color 1 OTA Update</summary>
    public ButtonEntity BulbColor1OtaUpdate => new(_haContext, "button.bulb_color_1_ota_update");
    ///<summary>Bulb Color 1 Reboot</summary>
    public ButtonEntity BulbColor1Reboot => new(_haContext, "button.bulb_color_1_reboot");
    ///<summary>Bulb Vintage 1 OTA Update</summary>
    public ButtonEntity BulbVintage1OtaUpdate => new(_haContext, "button.bulb_vintage_1_ota_update");
    ///<summary>Bulb Vintage 1 Reboot</summary>
    public ButtonEntity BulbVintage1Reboot => new(_haContext, "button.bulb_vintage_1_reboot");
    ///<summary>DiskStation2 Reboot</summary>
    public ButtonEntity DiskstationReboot => new(_haContext, "button.diskstation_reboot");
    ///<summary>DiskStation Reboot</summary>
    public ButtonEntity DiskstationReboot2 => new(_haContext, "button.diskstation_reboot_2");
    ///<summary>DiskStation2 Shutdown</summary>
    public ButtonEntity DiskstationShutdown => new(_haContext, "button.diskstation_shutdown");
    ///<summary>DiskStation Shutdown</summary>
    public ButtonEntity DiskstationShutdown2 => new(_haContext, "button.diskstation_shutdown_2");
    ///<summary>Ping</summary>
    public ButtonEntity DoorOpeningSensorPing => new(_haContext, "button.door_opening_sensor_ping");
    ///<summary>Ping</summary>
    public ButtonEntity DoorOpeningSensorPing2 => new(_haContext, "button.door_opening_sensor_ping_2");
    ///<summary>Elgato Key Light Restart</summary>
    public ButtonEntity ElgatoKeyLightRestart => new(_haContext, "button.elgato_key_light_restart");
    ///<summary>Esstisch Reboot</summary>
    public ButtonEntity EsstischReboot => new(_haContext, "button.esstisch_reboot");
    ///<summary>EV Smart Charging Manually start charging</summary>
    public ButtonEntity EvSmartChargingManuallyStartCharging => new(_haContext, "button.ev_smart_charging_manually_start_charging");
    ///<summary>EV Smart Charging Manually stop charging</summary>
    public ButtonEntity EvSmartChargingManuallyStopCharging => new(_haContext, "button.ev_smart_charging_manually_stop_charging");
    ///<summary>Force state neutral</summary>
    public ButtonEntity GoEcharger203597Frc => new(_haContext, "button.go_echarger_203597_frc");
    ///<summary>Force state dont charge</summary>
    public ButtonEntity GoEcharger203597Frc2 => new(_haContext, "button.go_echarger_203597_frc_2");
    ///<summary>Force state charge</summary>
    public ButtonEntity GoEcharger203597Frc3 => new(_haContext, "button.go_echarger_203597_frc_3");
    ///<summary>Restart device</summary>
    public ButtonEntity GoEcharger203597Rst => new(_haContext, "button.go_echarger_203597_rst");
    ///<summary>Heizkörper Reboot</summary>
    public ButtonEntity HeizkorperReboot => new(_haContext, "button.heizkorper_reboot");
    ///<summary>Elgato Key Light Identify</summary>
    public ButtonEntity Identify => new(_haContext, "button.identify");
    ///<summary>Jugendzimmer_Schalter Reboot</summary>
    public ButtonEntity JugendzimmerSchalterReboot => new(_haContext, "button.jugendzimmer_schalter_reboot");
    ///<summary>Ping</summary>
    public ButtonEntity Node7Ping => new(_haContext, "button.node_7_ping");
    ///<summary>Ping</summary>
    public ButtonEntity Node8Ping => new(_haContext, "button.node_8_ping");
    ///<summary>Plug 1 Reboot</summary>
    public ButtonEntity Plug1Reboot => new(_haContext, "button.plug_1_reboot");
    ///<summary>Scan Clients (DiskStation)</summary>
    public ButtonEntity ScanClientsDiskstation => new(_haContext, "button.scan_clients_diskstation");
    ///<summary>shellycolorbulb-3C6105E5A5DE Reboot</summary>
    public ButtonEntity Shellycolorbulb3c6105e5a5deReboot => new(_haContext, "button.shellycolorbulb_3c6105e5a5de_reboot");
    ///<summary>Ping</summary>
    public ButtonEntity SmartSwitch6Ping => new(_haContext, "button.smart_switch_6_ping");
    ///<summary>Ping</summary>
    public ButtonEntity StripsMazwPing => new(_haContext, "button.strips_mazw_ping");
    ///<summary>Ping</summary>
    public ButtonEntity StripsMazwPing2 => new(_haContext, "button.strips_mazw_ping_2");
    ///<summary>Ping</summary>
    public ButtonEntity StripsMazwPing3 => new(_haContext, "button.strips_mazw_ping_3");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Abfuhrkalender</summary>
    public CalendarEntity Abfuhrkalender => new(_haContext, "calendar.abfuhrkalender");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>DiskStation2 Wallpanel Cam 2</summary>
    public CameraEntity DiskstationWallpanelCam2 => new(_haContext, "camera.diskstation_wallpanel_cam_2");
    ///<summary>DiskStation Wallpanel Cam 2</summary>
    public CameraEntity DiskstationWallpanelCam22 => new(_haContext, "camera.diskstation_wallpanel_cam_2_2");
    ///<summary>indoor1</summary>
    public CameraEntity Indoor1 => new(_haContext, "camera.indoor1");
    ///<summary>indoor2</summary>
    public CameraEntity Indoor2 => new(_haContext, "camera.indoor2");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Enyaq Position</summary>
    public DeviceTrackerEntity EnyaqPosition => new(_haContext, "device_tracker.enyaq_position");
    ///<summary>Galaxy Watch4 Classic</summary>
    public DeviceTrackerEntity GalaxyWatch4Classic => new(_haContext, "device_tracker.galaxy_watch4_classic");
    ///<summary>Elias OnePlus </summary>
    public DeviceTrackerEntity Gm1913 => new(_haContext, "device_tracker.gm1913");
    ///<summary>GM1913</summary>
    public DeviceTrackerEntity Gm19132 => new(_haContext, "device_tracker.gm1913_2");
    ///<summary>Thomas Handy</summary>
    public DeviceTrackerEntity HomeAssistantBlue => new(_haContext, "device_tracker.home_assistant_blue");
    ///<summary>S22 Ultra</summary>
    public DeviceTrackerEntity S22Ultra => new(_haContext, "device_tracker.s22_ultra");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cable Connected (Simulation)</summary>
    public InputBooleanEntity ChargingMockCableconnected => new(_haContext, "input_boolean.charging_mock_cableconnected");
    ///<summary>charging_target_battery</summary>
    public InputBooleanEntity ChargingTargetBattery => new(_haContext, "input_boolean.charging_target_battery");
    ///<summary>charging_target_climate</summary>
    public InputBooleanEntity ChargingTargetClimate => new(_haContext, "input_boolean.charging_target_climate");
    ///<summary>charging_target_today</summary>
    public InputBooleanEntity ChargingTargetToday => new(_haContext, "input_boolean.charging_target_today");
    ///<summary>charging_target_tomorrow</summary>
    public InputBooleanEntity ChargingTargetTomorrow => new(_haContext, "input_boolean.charging_target_tomorrow");
    ///<summary>charging_target_tomorrow2</summary>
    public InputBooleanEntity ChargingTargetTomorrow2 => new(_haContext, "input_boolean.charging_target_tomorrow2");
    ///<summary>netdaemon_mutzl_net_daemon_apps_electricity_rate_electricity_rate_app</summary>
    public InputBooleanEntity NetdaemonMutzlNetDaemonAppsElectricityRateElectricityRateApp => new(_haContext, "input_boolean.netdaemon_mutzl_net_daemon_apps_electricity_rate_electricity_rate_app");
    ///<summary>netdaemon_mutzl_net_daemon_apps_garage_garage_app</summary>
    public InputBooleanEntity NetdaemonMutzlNetDaemonAppsGarageGarageApp => new(_haContext, "input_boolean.netdaemon_mutzl_net_daemon_apps_garage_garage_app");
    ///<summary>netdaemon_mutzl_net_daemon_apps_optimized_charging_optimized_charging_app</summary>
    public InputBooleanEntity NetdaemonMutzlNetDaemonAppsOptimizedChargingOptimizedChargingApp => new(_haContext, "input_boolean.netdaemon_mutzl_net_daemon_apps_optimized_charging_optimized_charging_app");
    ///<summary>netdaemon_mutzl_net_daemon_apps_train_monitor_train_monitor_app</summary>
    public InputBooleanEntity NetdaemonMutzlNetDaemonAppsTrainMonitorTrainMonitorApp => new(_haContext, "input_boolean.netdaemon_mutzl_net_daemon_apps_train_monitor_train_monitor_app");
    ///<summary>Test</summary>
    public InputBooleanEntity Test => new(_haContext, "input_boolean.test");
    ///<summary>Test_Create</summary>
    public InputBooleanEntity TestCreate => new(_haContext, "input_boolean.test_create");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>charging_minlevel_minus</summary>
    public InputButtonEntity ChargingMinlevelMinus => new(_haContext, "input_button.charging_minlevel_minus");
    ///<summary>charging_minlevel_plus</summary>
    public InputButtonEntity ChargingMinlevelPlus => new(_haContext, "input_button.charging_minlevel_plus");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Charging Target DateTime</summary>
    public InputDatetimeEntity ChargingTargetTime => new(_haContext, "input_datetime.charging_target_time");
    ///<summary>wallbox_next_start</summary>
    public InputDatetimeEntity WallboxNextStart => new(_haContext, "input_datetime.wallbox_next_start");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Wallbox Ladestrom (Simulation)</summary>
    public InputNumberEntity ChargingMockAmpere => new(_haContext, "input_number.charging_mock_ampere");
    ///<summary>Battery Level (Simulation)</summary>
    public InputNumberEntity ChargingMockBatterylevel => new(_haContext, "input_number.charging_mock_batterylevel");
    ///<summary>Mimimum Ladelevel (Simulation)</summary>
    public InputNumberEntity ChargingMockTargetlevel => new(_haContext, "input_number.charging_mock_targetlevel");
    ///<summary>charging_target_level</summary>
    public InputNumberEntity ChargingTargetLevel => new(_haContext, "input_number.charging_target_level");
    ///<summary>Frist für Abholtermin</summary>
    public InputNumberEntity ReminderAbholtermin => new(_haContext, "input_number.reminder_abholtermin");
    ///<summary>Frist für Reminder</summary>
    public InputNumberEntity ReminderWithinDays => new(_haContext, "input_number.reminder_within_days");
    ///<summary>Timer in Minuten</summary>
    public InputNumberEntity TimerInMinuten => new(_haContext, "input_number.timer_in_minuten");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Büro Szene</summary>
    public InputSelectEntity OfficeScenes => new(_haContext, "input_select.office_scenes");
    ///<summary>Signal für Timer</summary>
    public InputSelectEntity TimerSignalSources => new(_haContext, "input_select.timer_signal_sources");
    ///<summary>Bahnhof</summary>
    public InputSelectEntity TrainStations => new(_haContext, "input_select.train_stations");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Test_Attribute</summary>
    public InputTextEntity TestAttribute => new(_haContext, "input_text.test_attribute");
    ///<summary>test_state</summary>
    public InputTextEntity TestState => new(_haContext, "input_text.test_state");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Abwaschlicht</summary>
    public LightEntity Abwaschlicht => new(_haContext, "light.abwaschlicht");
    ///<summary>Glasvitrine</summary>
    public LightEntity Arbeitsplatte => new(_haContext, "light.arbeitsplatte");
    ///<summary>Badezimmer</summary>
    public LightEntity Badezimmer => new(_haContext, "light.badezimmer");
    ///<summary>Baum</summary>
    public LightEntity Baum => new(_haContext, "light.baum");
    ///<summary>Baum 1</summary>
    public LightEntity Baum1 => new(_haContext, "light.baum_1");
    ///<summary>Baum 2</summary>
    public LightEntity Baum2 => new(_haContext, "light.baum_2");
    ///<summary>Baum 3</summary>
    public LightEntity Baum3 => new(_haContext, "light.baum_3");
    ///<summary>Baum 4</summary>
    public LightEntity Baum4 => new(_haContext, "light.baum_4");
    ///<summary>Büro</summary>
    public LightEntity Buro => new(_haContext, "light.buro");
    ///<summary>Galerie 2 unten</summary>
    public LightEntity ColorTemperatureLight1 => new(_haContext, "light.color_temperature_light_1");
    ///<summary>Galerie 2 oben</summary>
    public LightEntity ColorTemperatureLight12 => new(_haContext, "light.color_temperature_light_1_2");
    ///<summary>Galerie 3 unten</summary>
    public LightEntity ColorTemperatureLight13 => new(_haContext, "light.color_temperature_light_1_3");
    ///<summary>Galerie 3 oben</summary>
    public LightEntity ColorTemperatureLight14 => new(_haContext, "light.color_temperature_light_1_4");
    ///<summary>Color temperature light 1</summary>
    public LightEntity ColorTemperatureLight15 => new(_haContext, "light.color_temperature_light_1_5");
    ///<summary>Arbeitsplatte</summary>
    public LightEntity DimmableLight1 => new(_haContext, "light.dimmable_light_1");
    ///<summary>Board</summary>
    public LightEntity DimmableLight12 => new(_haContext, "light.dimmable_light_1_2");
    ///<summary>Dunstabzug</summary>
    public LightEntity Dunstabzug => new(_haContext, "light.dunstabzug");
    ///<summary>Ecklampe</summary>
    public LightEntity Ecklampe2 => new(_haContext, "light.ecklampe_2");
    ///<summary>Elgato Key Light</summary>
    public LightEntity ElgatoKeyLight => new(_haContext, "light.elgato_key_light");
    ///<summary>Elias</summary>
    public LightEntity Elias => new(_haContext, "light.elias");
    ///<summary>Esstisch</summary>
    public LightEntity Esstisch => new(_haContext, "light.esstisch");
    ///<summary>Extended color light down</summary>
    public LightEntity ExtendedColorLight1 => new(_haContext, "light.extended_color_light_1");
    ///<summary>Extended color light 3</summary>
    public LightEntity ExtendedColorLight12 => new(_haContext, "light.extended_color_light_1_2");
    ///<summary>Kugel</summary>
    public LightEntity ExtendedColorLight13 => new(_haContext, "light.extended_color_light_1_3");
    ///<summary>Extended color light up</summary>
    public LightEntity ExtendedColorLight2 => new(_haContext, "light.extended_color_light_2");
    ///<summary>Extended color light 4</summary>
    public LightEntity ExtendedColorLight4 => new(_haContext, "light.extended_color_light_4");
    ///<summary>Glasvitrine</summary>
    public LightEntity ExtendedColorLight5 => new(_haContext, "light.extended_color_light_5");
    ///<summary>Farbkugel</summary>
    public LightEntity Farbkugel => new(_haContext, "light.farbkugel");
    ///<summary>Fernseher</summary>
    public LightEntity Fernseher => new(_haContext, "light.fernseher");
    ///<summary>Galerie</summary>
    public LightEntity Galerie => new(_haContext, "light.galerie");
    ///<summary>Galerie 1</summary>
    public LightEntity Galerie1 => new(_haContext, "light.galerie_1");
    ///<summary>Galerie oben</summary>
    public LightEntity GalerieOben => new(_haContext, "light.galerie_oben");
    ///<summary>Galerie unten</summary>
    public LightEntity GalerieUnten => new(_haContext, "light.galerie_unten");
    ///<summary>Galerie Vorraum</summary>
    public LightEntity GalerieVorraum => new(_haContext, "light.galerie_vorraum");
    ///<summary>Garten 1</summary>
    public LightEntity Garten1 => new(_haContext, "light.garten_1");
    ///<summary>Garten 2</summary>
    public LightEntity Garten2 => new(_haContext, "light.garten_2");
    ///<summary>Gartenstiege</summary>
    public LightEntity Gartenstiege => new(_haContext, "light.gartenstiege");
    ///<summary>Gästezimmer</summary>
    public LightEntity Gastezimmer => new(_haContext, "light.gastezimmer");
    ///<summary>Tür</summary>
    public LightEntity HueAmbianceSpot110 => new(_haContext, "light.hue_ambiance_spot_1_10");
    ///<summary>Waschbecken</summary>
    public LightEntity HueAmbianceSpot111 => new(_haContext, "light.hue_ambiance_spot_1_11");
    ///<summary>1 oben</summary>
    public LightEntity HueAmbianceSpot112 => new(_haContext, "light.hue_ambiance_spot_1_12");
    ///<summary>B</summary>
    public LightEntity HueAmbianceSpot113 => new(_haContext, "light.hue_ambiance_spot_1_13");
    ///<summary>Vorraum Schlafzimmer</summary>
    public LightEntity hue_ambiance_spot_1_2 => new(_haContext, "light.hue_ambiance_spot_1_2");
    ///<summary>Jakob Kasten</summary>
    public LightEntity hue_ambiance_spot_1_3 => new(_haContext, "light.hue_ambiance_spot_1_3");
    ///<summary>Jakob Tür</summary>
    public LightEntity hue_ambiance_spot_1_4 => new(_haContext, "light.hue_ambiance_spot_1_4");
    ///<summary>Vorraum  Jakob</summary>
    public LightEntity HueAmbianceSpot15 => new(_haContext, "light.hue_ambiance_spot_1_5");
    ///<summary>Elias Desk 1</summary>
    public LightEntity HueAmbianceSpot16 => new(_haContext, "light.hue_ambiance_spot_1_6");
    ///<summary>Elias Tür</summary>
    public LightEntity HueAmbianceSpot17 => new(_haContext, "light.hue_ambiance_spot_1_7");
    ///<summary>Spot Durchgang</summary>
    public LightEntity HueAmbianceSpot18 => new(_haContext, "light.hue_ambiance_spot_1_8");
    ///<summary>WC</summary>
    public LightEntity HueAmbianceSpot19 => new(_haContext, "light.hue_ambiance_spot_1_9");
    ///<summary>5 oben</summary>
    public LightEntity HueAmbianceSpot10 => new(_haContext, "light.hue_ambiance_spot_10");
    ///<summary>3 unten</summary>
    public LightEntity HueAmbianceSpot11 => new(_haContext, "light.hue_ambiance_spot_11");
    ///<summary>5 mitte</summary>
    public LightEntity hue_ambiance_spot_12 => new(_haContext, "light.hue_ambiance_spot_12");
    ///<summary>3 mitte</summary>
    public LightEntity hue_ambiance_spot_13 => new(_haContext, "light.hue_ambiance_spot_13");
    ///<summary>2 oben</summary>
    public LightEntity hue_ambiance_spot_14 => new(_haContext, "light.hue_ambiance_spot_14");
    ///<summary>Vorraum 2</summary>
    public LightEntity HueAmbianceSpot22 => new(_haContext, "light.hue_ambiance_spot_2_2");
    ///<summary>Vorraum Elias</summary>
    public LightEntity HueAmbianceSpot23 => new(_haContext, "light.hue_ambiance_spot_2_3");
    ///<summary>Jakob Bett</summary>
    public LightEntity HueAmbianceSpot24 => new(_haContext, "light.hue_ambiance_spot_2_4");
    ///<summary>Elias Bett</summary>
    public LightEntity HueAmbianceSpot25 => new(_haContext, "light.hue_ambiance_spot_2_5");
    ///<summary>Elias Desk 2</summary>
    public LightEntity HueAmbianceSpot26 => new(_haContext, "light.hue_ambiance_spot_2_6");
    ///<summary>Spot Tür</summary>
    public LightEntity HueAmbianceSpot27 => new(_haContext, "light.hue_ambiance_spot_2_7");
    ///<summary>2 mitte</summary>
    public LightEntity HueAmbianceSpot28 => new(_haContext, "light.hue_ambiance_spot_2_8");
    ///<summary>A</summary>
    public LightEntity HueAmbianceSpot29 => new(_haContext, "light.hue_ambiance_spot_2_9");
    ///<summary>Vorraum 3</summary>
    public LightEntity HueAmbianceSpot32 => new(_haContext, "light.hue_ambiance_spot_3_2");
    ///<summary>1 mitte</summary>
    public LightEntity HueAmbianceSpot33 => new(_haContext, "light.hue_ambiance_spot_3_3");
    ///<summary>1 unten</summary>
    public LightEntity HueAmbianceSpot4 => new(_haContext, "light.hue_ambiance_spot_4");
    ///<summary>6 oben</summary>
    public LightEntity HueAmbianceSpot5 => new(_haContext, "light.hue_ambiance_spot_5");
    ///<summary>6 unten</summary>
    public LightEntity HueAmbianceSpot6 => new(_haContext, "light.hue_ambiance_spot_6");
    ///<summary>4 oben</summary>
    public LightEntity HueAmbianceSpot7 => new(_haContext, "light.hue_ambiance_spot_7");
    ///<summary>3 oben</summary>
    public LightEntity HueAmbianceSpot8 => new(_haContext, "light.hue_ambiance_spot_8");
    ///<summary>6 mitte</summary>
    public LightEntity HueAmbianceSpot9 => new(_haContext, "light.hue_ambiance_spot_9");
    ///<summary>Spot 1 down</summary>
    public LightEntity HueColorSpot1 => new(_haContext, "light.hue_color_spot_1");
    ///<summary>Spot 5 down</summary>
    public LightEntity HueColorSpot110 => new(_haContext, "light.hue_color_spot_1_10");
    ///<summary>Dusche</summary>
    public LightEntity HueColorSpot112 => new(_haContext, "light.hue_color_spot_1_12");
    ///<summary>Hue color spot 1</summary>
    public LightEntity HueColorSpot12 => new(_haContext, "light.hue_color_spot_1_2");
    ///<summary>Vorraum down</summary>
    public LightEntity HueColorSpot13 => new(_haContext, "light.hue_color_spot_1_3");
    ///<summary>Spot 2 up</summary>
    public LightEntity HueColorSpot14 => new(_haContext, "light.hue_color_spot_1_4");
    ///<summary>Spot 2 down</summary>
    public LightEntity HueColorSpot15 => new(_haContext, "light.hue_color_spot_1_5");
    ///<summary>Spot 3 up</summary>
    public LightEntity HueColorSpot16 => new(_haContext, "light.hue_color_spot_1_6");
    ///<summary>Spot 3 down</summary>
    public LightEntity HueColorSpot17 => new(_haContext, "light.hue_color_spot_1_7");
    ///<summary>Spot 4 up</summary>
    public LightEntity HueColorSpot18 => new(_haContext, "light.hue_color_spot_1_8");
    ///<summary>Spot 4 down</summary>
    public LightEntity HueColorSpot19 => new(_haContext, "light.hue_color_spot_1_9");
    ///<summary>Spot 1 up</summary>
    public LightEntity HueColorSpot2 => new(_haContext, "light.hue_color_spot_2");
    ///<summary>Spot Petra</summary>
    public LightEntity HueColorSpot22 => new(_haContext, "light.hue_color_spot_2_2");
    ///<summary>Spot 5 up</summary>
    public LightEntity HueColorSpot23 => new(_haContext, "light.hue_color_spot_2_3");
    ///<summary>Galerie 1 oben</summary>
    public LightEntity HueColorSpot24 => new(_haContext, "light.hue_color_spot_2_4");
    ///<summary>Steinwand down</summary>
    public LightEntity HueColorSpot25 => new(_haContext, "light.hue_color_spot_2_5");
    ///<summary>Vorraum up</summary>
    public LightEntity HueColorSpot26 => new(_haContext, "light.hue_color_spot_2_6");
    ///<summary>Galerie 1 unten</summary>
    public LightEntity HueColorSpot3 => new(_haContext, "light.hue_color_spot_3");
    ///<summary>Spot Thomas</summary>
    public LightEntity HueColorSpot32 => new(_haContext, "light.hue_color_spot_3_2");
    ///<summary>Steinwand up</summary>
    public LightEntity HueColorSpot33 => new(_haContext, "light.hue_color_spot_3_3");
    ///<summary>Discover 1</summary>
    public LightEntity HueDiscoverOutdoorWall1 => new(_haContext, "light.hue_discover_outdoor_wall_1");
    ///<summary>Jakob Desk down</summary>
    public LightEntity HueEnsisDown1 => new(_haContext, "light.hue_ensis_down_1");
    ///<summary>Jakob Desk up</summary>
    public LightEntity HueEnsisUp1 => new(_haContext, "light.hue_ensis_up_1");
    ///<summary>Go</summary>
    public LightEntity HueGo1 => new(_haContext, "light.hue_go_1");
    ///<summary>Nische</summary>
    public LightEntity HueLightstripPlus1 => new(_haContext, "light.hue_lightstrip_plus_1");
    ///<summary>Hue Play 1</summary>
    public LightEntity HuePlay1 => new(_haContext, "light.hue_play_1");
    ///<summary>Hue Play 2</summary>
    public LightEntity HuePlay2 => new(_haContext, "light.hue_play_2");
    ///<summary>Hue Play 3</summary>
    public LightEntity HuePlay3 => new(_haContext, "light.hue_play_3");
    ///<summary>Icicle 1</summary>
    public LightEntity Icicle1 => new(_haContext, "light.icicle_1");
    ///<summary>Icicle 2</summary>
    public LightEntity Icicle2 => new(_haContext, "light.icicle_2");
    ///<summary>Jakob</summary>
    public LightEntity Jakob => new(_haContext, "light.jakob");
    ///<summary>Jakob Desk</summary>
    public LightEntity JakobDesk => new(_haContext, "light.jakob_desk");
    ///<summary>Jugend Badezimmer</summary>
    public LightEntity JugendBadezimmer => new(_haContext, "light.jugend_badezimmer");
    ///<summary>Jugend Vorraum</summary>
    public LightEntity JugendVorraum => new(_haContext, "light.jugend_vorraum");
    ///<summary>Kochinsel</summary>
    public LightEntity Kochinsel => new(_haContext, "light.kochinsel");
    ///<summary>Küche</summary>
    public LightEntity Kuche => new(_haContext, "light.kuche");
    ///<summary>Küchentisch</summary>
    public LightEntity Kuechentisch => new(_haContext, "light.kuechentisch");
    ///<summary>Kugellampe</summary>
    public LightEntity Kugellampe => new(_haContext, "light.kugellampe");
    ///<summary>Lightstrip</summary>
    public LightEntity Lightstrip => new(_haContext, "light.lightstrip");
    ///<summary>Master Bedroom</summary>
    public LightEntity MasterBedroom => new(_haContext, "light.master_bedroom");
    ///<summary>Nachttisch Petra</summary>
    public LightEntity NachttischPetra => new(_haContext, "light.nachttisch_petra");
    ///<summary>Nachttisch Thomas</summary>
    public LightEntity NachttischThomas => new(_haContext, "light.nachttisch_thomas");
    ///<summary>Nachttischlampen</summary>
    public LightEntity Nachttischlampen => new(_haContext, "light.nachttischlampen");
    ///<summary>Office Sideboard</summary>
    public LightEntity OfficeSideboard => new(_haContext, "light.office_sideboard");
    ///<summary>Ecklampe</summary>
    public LightEntity OnOffPlug1 => new(_haContext, "light.on_off_plug_1");
    ///<summary>Panel</summary>
    public LightEntity Panel => new(_haContext, "light.panel");
    ///<summary>Pendelleuchte</summary>
    public LightEntity Pendelleuchte => new(_haContext, "light.pendelleuchte");
    ///<summary>Reislampe</summary>
    public LightEntity Reislampe => new(_haContext, "light.reislampe");
    ///<summary>Scheinwerfer</summary>
    public LightEntity Scheinwerfer => new(_haContext, "light.scheinwerfer");
    ///<summary>Schlafzimmer</summary>
    public LightEntity Schlafzimmer => new(_haContext, "light.schlafzimmer");
    ///<summary>Schlafzimmer Spots</summary>
    public LightEntity SchlafzimmerSpots => new(_haContext, "light.schlafzimmer_spots");
    ///<summary>Schrankdurchgang</summary>
    public LightEntity Schrankdurchgang => new(_haContext, "light.schrankdurchgang");
    ///<summary>Schreibtisch</summary>
    public LightEntity Schreibtisch => new(_haContext, "light.schreibtisch");
    ///<summary>Schreibtisch down</summary>
    public LightEntity SchreibtischDown => new(_haContext, "light.schreibtisch_down");
    ///<summary>Schreibtisch up</summary>
    public LightEntity SchreibtischUp => new(_haContext, "light.schreibtisch_up");
    ///<summary>Shelly Color 1</summary>
    public LightEntity ShellyColor1 => new(_haContext, "light.shelly_color_1");
    ///<summary>Shelly Vintage 1</summary>
    public LightEntity ShellyVintage1 => new(_haContext, "light.shelly_vintage_1");
    ///<summary>Shelly White 1</summary>
    public LightEntity ShellyWhite1 => new(_haContext, "light.shelly_white_1");
    ///<summary>Smart Switch</summary>
    public LightEntity SmartSwitch => new(_haContext, "light.smart_switch");
    ///<summary>Spot</summary>
    public LightEntity Spot => new(_haContext, "light.spot");
    ///<summary>Stehlampe</summary>
    public LightEntity Stehlampe => new(_haContext, "light.stehlampe");
    ///<summary>Stiegen</summary>
    public LightEntity Stiegen => new(_haContext, "light.stiegen");
    ///<summary>Tradfri</summary>
    public LightEntity Tradfri => new(_haContext, "light.tradfri");
    ///<summary>WC</summary>
    public LightEntity Wc => new(_haContext, "light.wc");
    ///<summary>Wohnzimmer</summary>
    public LightEntity Wohnzimmer => new(_haContext, "light.wohnzimmer");
    ///<summary>Xiaomi Gateway Light</summary>
    public LightEntity XiaomiGatewayLight => new(_haContext, "light.xiaomi_gateway_light");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Enyaq Door locked</summary>
    public LockEntity EnyaqDoorLocked => new(_haContext, "lock.enyaq_door_locked");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aquos TV</summary>
    public MediaPlayerEntity AquosTv => new(_haContext, "media_player.aquos_tv");
    public MediaPlayerEntity AquosTve21f => new(_haContext, "media_player.aquos_tve21f");
    ///<summary>TV Jakob</summary>
    public MediaPlayerEntity AquosTve21f2 => new(_haContext, "media_player.aquos_tve21f_2");
    ///<summary>AS-AFTN[Cast]</summary>
    public MediaPlayerEntity AsAftnCast => new(_haContext, "media_player.as_aftn_cast");
    ///<summary>Fernseher im Wohnzimmer</summary>
    public MediaPlayerEntity FernseherImWohnzimmer => new(_haContext, "media_player.fernseher_im_wohnzimmer");
    ///<summary>Plex (Plex for Android (Mobile) - Galaxy S22 Ultra)</summary>
    public MediaPlayerEntity PlexPlexForAndroidMobileGalaxyS22Ultra => new(_haContext, "media_player.plex_plex_for_android_mobile_galaxy_s22_ultra");
    ///<summary>Plex (Plex for Android (TV) - AFTN)</summary>
    public MediaPlayerEntity PlexPlexForAndroidTvAftn => new(_haContext, "media_player.plex_plex_for_android_tv_aftn");
    ///<summary>Plex (Plex for Android (TV) - EU)</summary>
    public MediaPlayerEntity PlexPlexForAndroidTvEu => new(_haContext, "media_player.plex_plex_for_android_tv_eu");
    ///<summary>Plex (Plex for Windows - Surface-Pro-7-Petra)</summary>
    public MediaPlayerEntity PlexPlexForWindowsSurfacePro7Petra => new(_haContext, "media_player.plex_plex_for_windows_surface_pro_7_petra");
    ///<summary>Plex (Plex Web - Microsoft Edge - Windows)</summary>
    public MediaPlayerEntity PlexPlexWebMicrosoftEdgeWindows => new(_haContext, "media_player.plex_plex_web_microsoft_edge_windows");
    ///<summary>Spotify Thomas Mutzl</summary>
    public MediaPlayerEntity SpotifyThomasMutzl => new(_haContext, "media_player.spotify_thomas_mutzl");
    ///<summary>Terrasse</summary>
    public MediaPlayerEntity Terrasse => new(_haContext, "media_player.terrasse");
    ///<summary>VLC-TELNET</summary>
    public MediaPlayerEntity VlcTelnet => new(_haContext, "media_player.vlc_telnet");
    ///<summary>Wohnzimmer</summary>
    public MediaPlayerEntity Wohnzimmer => new(_haContext, "media_player.wohnzimmer");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>EV Smart Charging Charging speed</summary>
    public NumberEntity EvSmartChargingChargingSpeed => new(_haContext, "number.ev_smart_charging_charging_speed");
    ///<summary>EV Smart Charging Electricity price limit</summary>
    public NumberEntity EvSmartChargingElectricityPriceLimit => new(_haContext, "number.ev_smart_charging_electricity_price_limit");
    ///<summary>EV Smart Charging Minimum EV SOC</summary>
    public NumberEntity EvSmartChargingMinimumEvSoc => new(_haContext, "number.ev_smart_charging_minimum_ev_soc");
    ///<summary>EV Smart Charging Opportunistic level</summary>
    public NumberEntity EvSmartChargingOpportunisticLevel => new(_haContext, "number.ev_smart_charging_opportunistic_level");
    ///<summary>Requested current</summary>
    public NumberEntity GoEcharger203597Amp => new(_haContext, "number.go_echarger_203597_amp");
    ///<summary>Automatic stop energy</summary>
    public NumberEntity GoEcharger203597Ate => new(_haContext, "number.go_echarger_203597_ate");
    ///<summary>Automatic stop time</summary>
    public NumberEntity GoEcharger203597Att => new(_haContext, "number.go_echarger_203597_att");
    ///<summary>Terrasse Bass</summary>
    public NumberEntity TerrasseBass => new(_haContext, "number.terrasse_bass");
    ///<summary>Terrasse Treble</summary>
    public NumberEntity TerrasseTreble => new(_haContext, "number.terrasse_treble");
    ///<summary>Wohnzimmer Bass</summary>
    public NumberEntity WohnzimmerBass => new(_haContext, "number.wohnzimmer_bass");
    ///<summary>Wohnzimmer Treble</summary>
    public NumberEntity WohnzimmerTreble => new(_haContext, "number.wohnzimmer_treble");
}

public partial class PersistentNotificationEntities
{
    private readonly IHaContext _haContext;
    public PersistentNotificationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>New devices discovered</summary>
    public PersistentNotificationEntity ConfigEntryDiscovery => new(_haContext, "persistent_notification.config_entry_discovery");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Elias Mutzl</summary>
    public PersonEntity EliasMutzl => new(_haContext, "person.elias_mutzl");
    ///<summary>Jakob Mutzl</summary>
    public PersonEntity JakobMutzl => new(_haContext, "person.jakob_mutzl");
    ///<summary>Petra Liebhhart-Mutzl</summary>
    public PersonEntity PetraLiebhhartMutzl => new(_haContext, "person.petra_liebhhart_mutzl");
    ///<summary>Thomas Mutzl</summary>
    public PersonEntity ThomasMutzl => new(_haContext, "person.thomas_mutzl");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Harmony Hub</summary>
    public RemoteEntity HarmonyHub => new(_haContext, "remote.harmony_hub");
    ///<summary>Harmony Hub</summary>
    public RemoteEntity HarmonyHub2 => new(_haContext, "remote.harmony_hub_2");
    ///<summary>Spielezimmer</summary>
    public RemoteEntity Spielezimmer => new(_haContext, "remote.spielezimmer");
    ///<summary>Wohnzimmer</summary>
    public RemoteEntity Wohnzimmer => new(_haContext, "remote.wohnzimmer");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Badezimmer Energie tanken</summary>
    public SceneEntity BadezimmerEnergieTanken => new(_haContext, "scene.badezimmer_energie_tanken");
    ///<summary>Badezimmer Entspannen</summary>
    public SceneEntity BadezimmerEntspannen => new(_haContext, "scene.badezimmer_entspannen");
    ///<summary>Badezimmer Gedimmt</summary>
    public SceneEntity BadezimmerGedimmt => new(_haContext, "scene.badezimmer_gedimmt");
    ///<summary>Badezimmer Hell</summary>
    public SceneEntity BadezimmerHell => new(_haContext, "scene.badezimmer_hell");
    ///<summary>Badezimmer Konzentrieren</summary>
    public SceneEntity BadezimmerKonzentrieren => new(_haContext, "scene.badezimmer_konzentrieren");
    ///<summary>Badezimmer Lesen</summary>
    public SceneEntity BadezimmerLesen => new(_haContext, "scene.badezimmer_lesen");
    ///<summary>Badezimmer Nachtlicht</summary>
    public SceneEntity BadezimmerNachtlicht => new(_haContext, "scene.badezimmer_nachtlicht");
    ///<summary>Büro Energie tanken</summary>
    public SceneEntity BuroEnergieTanken2 => new(_haContext, "scene.buro_energie_tanken_2");
    ///<summary>Büro Entspannen</summary>
    public SceneEntity BuroEntspannen => new(_haContext, "scene.buro_entspannen");
    ///<summary>Büro Hell</summary>
    public SceneEntity BuroHell => new(_haContext, "scene.buro_hell");
    ///<summary>Büro Konzentrieren</summary>
    public SceneEntity BuroKonzentrieren => new(_haContext, "scene.buro_konzentrieren");
    ///<summary>Büro Lesen</summary>
    public SceneEntity BuroLesen => new(_haContext, "scene.buro_lesen");
    ///<summary>Büro Nachtlicht</summary>
    public SceneEntity BuroNachtlicht => new(_haContext, "scene.buro_nachtlicht");
    ///<summary>Dunstabzug Entspannen</summary>
    public SceneEntity DunstabzugEntspannen => new(_haContext, "scene.dunstabzug_entspannen");
    ///<summary>Dunstabzug Hell</summary>
    public SceneEntity DunstabzugHell => new(_haContext, "scene.dunstabzug_hell");
    ///<summary>Dunstabzug Konzentrieren</summary>
    public SceneEntity DunstabzugKonzentrieren => new(_haContext, "scene.dunstabzug_konzentrieren");
    ///<summary>Elias Energie tanken</summary>
    public SceneEntity EliasEnergieTanken => new(_haContext, "scene.elias_energie_tanken");
    ///<summary>Elias Entspannen</summary>
    public SceneEntity EliasEntspannen => new(_haContext, "scene.elias_entspannen");
    ///<summary>Elias Gedimmt</summary>
    public SceneEntity EliasGedimmt => new(_haContext, "scene.elias_gedimmt");
    ///<summary>Elias Hell</summary>
    public SceneEntity EliasHell => new(_haContext, "scene.elias_hell");
    ///<summary>Elias Konzentrieren</summary>
    public SceneEntity EliasKonzentrieren => new(_haContext, "scene.elias_konzentrieren");
    ///<summary>Elias Lesen</summary>
    public SceneEntity EliasLesen => new(_haContext, "scene.elias_lesen");
    ///<summary>Elias Nachtlicht</summary>
    public SceneEntity EliasNachtlicht => new(_haContext, "scene.elias_nachtlicht");
    ///<summary>Fernseher Fairfax</summary>
    public SceneEntity FernseherFairfax => new(_haContext, "scene.fernseher_fairfax");
    ///<summary>Fernseher Frostige Morgendämmerung</summary>
    public SceneEntity FernseherFrostigeMorgendammerung => new(_haContext, "scene.fernseher_frostige_morgendammerung");
    ///<summary>Fernseher Gemalter Himmel</summary>
    public SceneEntity FernseherGemalterHimmel => new(_haContext, "scene.fernseher_gemalter_himmel");
    ///<summary>Fernseher Ibiza</summary>
    public SceneEntity FernseherIbiza => new(_haContext, "scene.fernseher_ibiza");
    ///<summary>Fernseher Ruby Romance</summary>
    public SceneEntity FernseherRubyRomance => new(_haContext, "scene.fernseher_ruby_romance");
    ///<summary>Fernseher Sonnenuntergang</summary>
    public SceneEntity FernseherSonnenuntergang => new(_haContext, "scene.fernseher_sonnenuntergang");
    ///<summary>Fernseher Sternenlicht</summary>
    public SceneEntity FernseherSternenlicht => new(_haContext, "scene.fernseher_sternenlicht");
    ///<summary>Fernseher Tokio</summary>
    public SceneEntity FernseherTokio => new(_haContext, "scene.fernseher_tokio");
    ///<summary>Fernseher Tokio</summary>
    public SceneEntity FernseherTokio2 => new(_haContext, "scene.fernseher_tokio_2");
    ///<summary>Fernseher Vapor Wave</summary>
    public SceneEntity FernseherVaporWave => new(_haContext, "scene.fernseher_vapor_wave");
    ///<summary>Galerie Aktivieren</summary>
    public SceneEntity GalerieAktivieren => new(_haContext, "scene.galerie_aktivieren");
    ///<summary>Galerie Entspannen</summary>
    public SceneEntity GalerieEntspannen => new(_haContext, "scene.galerie_entspannen");
    ///<summary>Galerie Gedimmt</summary>
    public SceneEntity GalerieGedimmt => new(_haContext, "scene.galerie_gedimmt");
    ///<summary>Galerie Hell</summary>
    public SceneEntity GalerieHell => new(_haContext, "scene.galerie_hell");
    ///<summary>Galerie Konzentration</summary>
    public SceneEntity GalerieKonzentration => new(_haContext, "scene.galerie_konzentration");
    ///<summary>Galerie Lesen</summary>
    public SceneEntity GalerieLesen => new(_haContext, "scene.galerie_lesen");
    ///<summary>Galerie Nachtlicht</summary>
    public SceneEntity GalerieNachtlicht => new(_haContext, "scene.galerie_nachtlicht");
    ///<summary>Galerie Vorraum Entspannen</summary>
    public SceneEntity GalerieVorraumEntspannen => new(_haContext, "scene.galerie_vorraum_entspannen");
    ///<summary>Galerie Vorraum Gedimmt</summary>
    public SceneEntity GalerieVorraumGedimmt => new(_haContext, "scene.galerie_vorraum_gedimmt");
    ///<summary>Galerie Vorraum Hell</summary>
    public SceneEntity GalerieVorraumHell => new(_haContext, "scene.galerie_vorraum_hell");
    ///<summary>Galerie Vorraum Nachtlicht</summary>
    public SceneEntity GalerieVorraumNachtlicht => new(_haContext, "scene.galerie_vorraum_nachtlicht");
    ///<summary>Gästezimmer Energie tanken</summary>
    public SceneEntity GastezimmerEnergieTanken => new(_haContext, "scene.gastezimmer_energie_tanken");
    ///<summary>Gästezimmer Entspannen</summary>
    public SceneEntity GastezimmerEntspannen => new(_haContext, "scene.gastezimmer_entspannen");
    ///<summary>Gästezimmer Konzentrieren</summary>
    public SceneEntity GastezimmerKonzentrieren => new(_haContext, "scene.gastezimmer_konzentrieren");
    ///<summary>Gästezimmer Lesen</summary>
    public SceneEntity GastezimmerLesen => new(_haContext, "scene.gastezimmer_lesen");
    ///<summary>Jakob Energie tanken</summary>
    public SceneEntity JakobEnergieTanken => new(_haContext, "scene.jakob_energie_tanken");
    ///<summary>Jakob Entspannen</summary>
    public SceneEntity JakobEntspannen => new(_haContext, "scene.jakob_entspannen");
    ///<summary>Jakob Hell</summary>
    public SceneEntity JakobHell => new(_haContext, "scene.jakob_hell");
    ///<summary>Jakob Konzentrieren</summary>
    public SceneEntity JakobKonzentrieren => new(_haContext, "scene.jakob_konzentrieren");
    ///<summary>Jakob Lesen</summary>
    public SceneEntity JakobLesen => new(_haContext, "scene.jakob_lesen");
    ///<summary>Jakob Nachtlicht</summary>
    public SceneEntity JakobNachtlicht => new(_haContext, "scene.jakob_nachtlicht");
    ///<summary>Jakob Rubinrotes Leuchten</summary>
    public SceneEntity JakobRubinrotesLeuchten => new(_haContext, "scene.jakob_rubinrotes_leuchten");
    ///<summary>Jugend Badezimmer Energie tanken</summary>
    public SceneEntity JugendBadezimmerEnergieTanken => new(_haContext, "scene.jugend_badezimmer_energie_tanken");
    ///<summary>Jugend Badezimmer Entspannen</summary>
    public SceneEntity JugendBadezimmerEntspannen => new(_haContext, "scene.jugend_badezimmer_entspannen");
    ///<summary>Jugend Badezimmer Fairfax</summary>
    public SceneEntity JugendBadezimmerFairfax => new(_haContext, "scene.jugend_badezimmer_fairfax");
    ///<summary>Jugend Badezimmer Frühlingssee</summary>
    public SceneEntity JugendBadezimmerFruhlingssee => new(_haContext, "scene.jugend_badezimmer_fruhlingssee");
    ///<summary>Jugend Badezimmer Gemalter Himmel</summary>
    public SceneEntity JugendBadezimmerGemalterHimmel => new(_haContext, "scene.jugend_badezimmer_gemalter_himmel");
    ///<summary>Jugend Badezimmer Hell</summary>
    public SceneEntity JugendBadezimmerHell => new(_haContext, "scene.jugend_badezimmer_hell");
    ///<summary>Jugend Badezimmer Konzentrieren</summary>
    public SceneEntity JugendBadezimmerKonzentrieren => new(_haContext, "scene.jugend_badezimmer_konzentrieren");
    ///<summary>Jugend Badezimmer Lesen</summary>
    public SceneEntity JugendBadezimmerLesen => new(_haContext, "scene.jugend_badezimmer_lesen");
    ///<summary>Jugend Badezimmer Miami</summary>
    public SceneEntity JugendBadezimmerMiami => new(_haContext, "scene.jugend_badezimmer_miami");
    ///<summary>Jugend Badezimmer Nachtlicht</summary>
    public SceneEntity JugendBadezimmerNachtlicht => new(_haContext, "scene.jugend_badezimmer_nachtlicht");
    ///<summary>Jugend Badezimmer Nebel über dem See</summary>
    public SceneEntity JugendBadezimmerNebelUberDemSee => new(_haContext, "scene.jugend_badezimmer_nebel_uber_dem_see");
    ///<summary>Jugend Badezimmer Trick or treat</summary>
    public SceneEntity JugendBadezimmerTrickOrTreat => new(_haContext, "scene.jugend_badezimmer_trick_or_treat");
    ///<summary>Jugend Badezimmer Tropendämmerung</summary>
    public SceneEntity JugendBadezimmerTropendammerung => new(_haContext, "scene.jugend_badezimmer_tropendammerung");
    ///<summary>Jugend Badezimmer Winterschönheit</summary>
    public SceneEntity JugendBadezimmerWinterschonheit => new(_haContext, "scene.jugend_badezimmer_winterschonheit");
    ///<summary>Jugend Vorraum Gedimmt</summary>
    public SceneEntity JugendVorraumGedimmt => new(_haContext, "scene.jugend_vorraum_gedimmt");
    ///<summary>Jugend Vorraum Hell</summary>
    public SceneEntity JugendVorraumHell => new(_haContext, "scene.jugend_vorraum_hell");
    ///<summary>Jugend Vorraum Konzentrieren</summary>
    public SceneEntity JugendVorraumKonzentrieren => new(_haContext, "scene.jugend_vorraum_konzentrieren");
    ///<summary>Kitchen Bright</summary>
    public SceneEntity KitchenBright => new(_haContext, "scene.kitchen_bright");
    ///<summary>Kitchen Dimmed</summary>
    public SceneEntity KitchenDimmed => new(_haContext, "scene.kitchen_dimmed");
    ///<summary>Kitchen Night</summary>
    public SceneEntity KitchenNight => new(_haContext, "scene.kitchen_night");
    ///<summary>Kitchen Normal</summary>
    public SceneEntity KitchenNormal => new(_haContext, "scene.kitchen_normal");
    ///<summary>Kitchen Off</summary>
    public SceneEntity KitchenOff => new(_haContext, "scene.kitchen_off");
    ///<summary>Küche Energie tanken</summary>
    public SceneEntity KucheEnergieTanken => new(_haContext, "scene.kuche_energie_tanken");
    ///<summary>Küche Entspannen</summary>
    public SceneEntity KucheEntspannen => new(_haContext, "scene.kuche_entspannen");
    ///<summary>Küche Gedimmt</summary>
    public SceneEntity KucheGedimmt => new(_haContext, "scene.kuche_gedimmt");
    ///<summary>Küche Hell</summary>
    public SceneEntity KucheHell => new(_haContext, "scene.kuche_hell");
    ///<summary>Küche Konzentrieren</summary>
    public SceneEntity KucheKonzentrieren => new(_haContext, "scene.kuche_konzentrieren");
    ///<summary>Küche Lesen</summary>
    public SceneEntity KucheLesen => new(_haContext, "scene.kuche_lesen");
    ///<summary>Küche Nachtlicht</summary>
    public SceneEntity KucheNachtlicht => new(_haContext, "scene.kuche_nachtlicht");
    ///<summary>Küche Standard</summary>
    public SceneEntity KucheStandard => new(_haContext, "scene.kuche_standard");
    ///<summary>Livingroom Bright</summary>
    public SceneEntity LivingroomBright => new(_haContext, "scene.livingroom_bright");
    ///<summary>Livingroom Night</summary>
    public SceneEntity LivingroomNight => new(_haContext, "scene.livingroom_night");
    ///<summary>Livingroom Normal</summary>
    public SceneEntity LivingroomNormal => new(_haContext, "scene.livingroom_normal");
    ///<summary>Livingroom Off</summary>
    public SceneEntity LivingroomOff => new(_haContext, "scene.livingroom_off");
    ///<summary>Livingroom TV</summary>
    public SceneEntity LivingroomTv => new(_haContext, "scene.livingroom_tv");
    ///<summary>Nachttischlampen Entspannen</summary>
    public SceneEntity NachttischlampenEntspannen => new(_haContext, "scene.nachttischlampen_entspannen");
    ///<summary>Nachttischlampen Hell</summary>
    public SceneEntity NachttischlampenHell => new(_haContext, "scene.nachttischlampen_hell");
    ///<summary>Nachttischlampen Konzentrieren</summary>
    public SceneEntity NachttischlampenKonzentrieren => new(_haContext, "scene.nachttischlampen_konzentrieren");
    ///<summary>Schlafzimmer Energie tanken</summary>
    public SceneEntity SchlafzimmerEnergieTanken => new(_haContext, "scene.schlafzimmer_energie_tanken");
    ///<summary>Schlafzimmer Entspannen</summary>
    public SceneEntity SchlafzimmerEntspannen => new(_haContext, "scene.schlafzimmer_entspannen");
    ///<summary>Schlafzimmer Konzentrieren</summary>
    public SceneEntity SchlafzimmerKonzentrieren => new(_haContext, "scene.schlafzimmer_konzentrieren");
    ///<summary>Schlafzimmer Lesen</summary>
    public SceneEntity SchlafzimmerLesen => new(_haContext, "scene.schlafzimmer_lesen");
    ///<summary>Schlafzimmer Smitten</summary>
    public SceneEntity SchlafzimmerSmitten => new(_haContext, "scene.schlafzimmer_smitten");
    ///<summary>Schlafzimmer Spots Entspannen</summary>
    public SceneEntity SchlafzimmerSpotsEntspannen => new(_haContext, "scene.schlafzimmer_spots_entspannen");
    ///<summary>Schlafzimmer Spots Hell</summary>
    public SceneEntity SchlafzimmerSpotsHell => new(_haContext, "scene.schlafzimmer_spots_hell");
    ///<summary>Schlafzimmer Spots Konzentrieren</summary>
    public SceneEntity SchlafzimmerSpotsKonzentrieren => new(_haContext, "scene.schlafzimmer_spots_konzentrieren");
    ///<summary>Schrankdurchgang Gedimmt</summary>
    public SceneEntity SchrankdurchgangGedimmt => new(_haContext, "scene.schrankdurchgang_gedimmt");
    ///<summary>Schrankdurchgang Hell</summary>
    public SceneEntity SchrankdurchgangHell => new(_haContext, "scene.schrankdurchgang_hell");
    ///<summary>Stiegen Entspannen</summary>
    public SceneEntity StiegenEntspannen => new(_haContext, "scene.stiegen_entspannen");
    ///<summary>Stiegen Gedimmt</summary>
    public SceneEntity StiegenGedimmt => new(_haContext, "scene.stiegen_gedimmt");
    ///<summary>Stiegen Hell</summary>
    public SceneEntity StiegenHell => new(_haContext, "scene.stiegen_hell");
    ///<summary>Stiegen Konzentrieren</summary>
    public SceneEntity StiegenKonzentrieren => new(_haContext, "scene.stiegen_konzentrieren");
    ///<summary>Stiegen Lesen</summary>
    public SceneEntity StiegenLesen => new(_haContext, "scene.stiegen_lesen");
    ///<summary>Stiegen Nachtlicht</summary>
    public SceneEntity StiegenNachtlicht => new(_haContext, "scene.stiegen_nachtlicht");
    ///<summary>Stiegen Orangenfelder</summary>
    public SceneEntity StiegenOrangenfelder => new(_haContext, "scene.stiegen_orangenfelder");
    ///<summary>Stiegen Sternenlicht</summary>
    public SceneEntity StiegenSternenlicht => new(_haContext, "scene.stiegen_sternenlicht");
    ///<summary>Terrasse Fairfax</summary>
    public SceneEntity TerrasseFairfax => new(_haContext, "scene.terrasse_fairfax");
    ///<summary>Terrasse Gedimmt</summary>
    public SceneEntity TerrasseGedimmt => new(_haContext, "scene.terrasse_gedimmt");
    ///<summary>Terrasse Goldener Stern</summary>
    public SceneEntity TerrasseGoldenerStern => new(_haContext, "scene.terrasse_goldener_stern");
    ///<summary>Terrasse Hell</summary>
    public SceneEntity TerrasseHell => new(_haContext, "scene.terrasse_hell");
    ///<summary>Terrasse Nordlichter</summary>
    public SceneEntity TerrasseNordlichter => new(_haContext, "scene.terrasse_nordlichter");
    ///<summary>Terrasse Orangenfelder</summary>
    public SceneEntity TerrasseOrangenfelder => new(_haContext, "scene.terrasse_orangenfelder");
    ///<summary>Terrasse Unter dem Baum</summary>
    public SceneEntity TerrasseUnterDemBaum => new(_haContext, "scene.terrasse_unter_dem_baum");
    ///<summary>Terrasse Waldabenteuer</summary>
    public SceneEntity TerrasseWaldabenteuer => new(_haContext, "scene.terrasse_waldabenteuer");
    ///<summary>Terrasse Winterschönheit</summary>
    public SceneEntity TerrasseWinterschonheit => new(_haContext, "scene.terrasse_winterschonheit");
    ///<summary>WC Entspannen</summary>
    public SceneEntity WcEntspannen => new(_haContext, "scene.wc_entspannen");
    ///<summary>WC Hell</summary>
    public SceneEntity WcHell => new(_haContext, "scene.wc_hell");
    ///<summary>WC Lesen</summary>
    public SceneEntity WcLesen => new(_haContext, "scene.wc_lesen");
    ///<summary>Wohnzimmer Galaxie</summary>
    public SceneEntity WohnzimmerGalaxie => new(_haContext, "scene.wohnzimmer_galaxie");
    ///<summary>Wohnzimmer Gemalter Himmel</summary>
    public SceneEntity WohnzimmerGemalterHimmel => new(_haContext, "scene.wohnzimmer_gemalter_himmel");
    ///<summary>Wohnzimmer Goldener Stern</summary>
    public SceneEntity WohnzimmerGoldenerStern => new(_haContext, "scene.wohnzimmer_goldener_stern");
    ///<summary>Wohnzimmer Hell</summary>
    public SceneEntity WohnzimmerHell => new(_haContext, "scene.wohnzimmer_hell");
    ///<summary>Wohnzimmer Tokio</summary>
    public SceneEntity WohnzimmerTokio => new(_haContext, "scene.wohnzimmer_tokio");
    ///<summary>Wohnzimmer TV</summary>
    public SceneEntity WohnzimmerTv => new(_haContext, "scene.wohnzimmer_tv");
    ///<summary>Wohnzimmer Unter dem Baum</summary>
    public SceneEntity WohnzimmerUnterDemBaum => new(_haContext, "scene.wohnzimmer_unter_dem_baum");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Büro - Call</summary>
    public ScriptEntity BuroCall => new(_haContext, "script.buro_call");
    ///<summary>Büro - Fancy</summary>
    public ScriptEntity BuroFancy => new(_haContext, "script.buro_fancy");
    ///<summary>Büro - Hell</summary>
    public ScriptEntity BuroHell => new(_haContext, "script.buro_hell");
    ///<summary>Büro - Nacht</summary>
    public ScriptEntity BuroNacht => new(_haContext, "script.buro_nacht");
    ///<summary>Büro - Normal</summary>
    public ScriptEntity BuroNormal => new(_haContext, "script.buro_normal");
    ///<summary>Büro - Aus</summary>
    public ScriptEntity BuroOff => new(_haContext, "script.buro_off");
    ///<summary>Good Evening</summary>
    public ScriptEntity GoodEvening => new(_haContext, "script.good_evening");
    ///<summary>Good Night</summary>
    public ScriptEntity GoodNight => new(_haContext, "script.good_night");
    ///<summary>Küche - Aus</summary>
    public ScriptEntity KucheAus => new(_haContext, "script.kuche_aus");
    ///<summary>Küche - Gedimmt</summary>
    public ScriptEntity KucheDimmed => new(_haContext, "script.kuche_dimmed");
    ///<summary>Küche - Dunstabzug</summary>
    public ScriptEntity KucheDunstabzug => new(_haContext, "script.kuche_dunstabzug");
    ///<summary>Küche - Hell</summary>
    public ScriptEntity KucheHell => new(_haContext, "script.kuche_hell");
    ///<summary>Küche - Nacht</summary>
    public ScriptEntity KucheNacht => new(_haContext, "script.kuche_nacht");
    ///<summary>Küche - Normal</summary>
    public ScriptEntity KucheNormal => new(_haContext, "script.kuche_normal");
    ///<summary>Küche - Waschbecken</summary>
    public ScriptEntity KucheWaschbecken => new(_haContext, "script.kuche_waschbecken");
    ///<summary>Küchenradio</summary>
    public ScriptEntity Kuchenradio => new(_haContext, "script.kuchenradio");
    ///<summary>Master Bedroom Off</summary>
    public ScriptEntity MasterBedroomOff => new(_haContext, "script.master_bedroom_off");
    ///<summary>Set Enyaq Charging Limit</summary>
    public ScriptEntity SetEnyaqChargingLimit => new(_haContext, "script.set_enyaq_charging_limit");
    ///<summary>Set Timer Duration</summary>
    public ScriptEntity SetTimerDuration => new(_haContext, "script.set_timer_duration");
    ///<summary>Set Wallbox Max Current</summary>
    public ScriptEntity SetWallboxMaxCurrent => new(_haContext, "script.set_wallbox_max_current");
    ///<summary>Timer Nachricht</summary>
    public ScriptEntity TimerNachricht => new(_haContext, "script.timer_nachricht");
    ///<summary>Küchenradio Play OE3</summary>
    public ScriptEntity ToggleKuchenradio => new(_haContext, "script.toggle_kuchenradio");
    ///<summary>Tune In Radio</summary>
    public ScriptEntity TuneInRadio => new(_haContext, "script.tune_in_radio");
    ///<summary>TV Mute</summary>
    public ScriptEntity TvMute => new(_haContext, "script.tv_mute");
    ///<summary>TV Off</summary>
    public ScriptEntity TvOff => new(_haContext, "script.tv_off");
    ///<summary>TV ORF1</summary>
    public ScriptEntity TvOrf1 => new(_haContext, "script.tv_orf1");
    ///<summary>TV ORF2</summary>
    public ScriptEntity TvOrf2 => new(_haContext, "script.tv_orf2");
    ///<summary>TV Volume Down</summary>
    public ScriptEntity TvVolumeDown => new(_haContext, "script.tv_volume_down");
    ///<summary>TV Volume Up</summary>
    public ScriptEntity TvVolumeUp => new(_haContext, "script.tv_volume_up");
    ///<summary>TvGuideInPopup</summary>
    public ScriptEntity Tvguideinpopup => new(_haContext, "script.tvguideinpopup");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>EV Smart Charging Charge completion time</summary>
    public SelectEntity EvSmartChargingChargeCompletionTime => new(_haContext, "select.ev_smart_charging_charge_completion_time");
    ///<summary>EV Smart Charging Charge start time</summary>
    public SelectEntity EvSmartChargingChargeStartTime => new(_haContext, "select.ev_smart_charging_charge_start_time");
    ///<summary>Force state</summary>
    public SelectEntity GoEcharger203597Frc => new(_haContext, "select.go_echarger_203597_frc");
    ///<summary>Logic mode</summary>
    public SelectEntity GoEcharger203597Lmo => new(_haContext, "select.go_echarger_203597_lmo");
    ///<summary>Transaction</summary>
    public SelectEntity GoEcharger203597Trx => new(_haContext, "select.go_echarger_203597_trx");
    ///<summary>Cable unlock mode</summary>
    public SelectEntity GoEcharger203597Ust => new(_haContext, "select.go_echarger_203597_ust");
    ///<summary>Harmony Hub Activities</summary>
    public SelectEntity HarmonyHubActivities => new(_haContext, "select.harmony_hub_activities");
    ///<summary>Harmony Hub Activities</summary>
    public SelectEntity HarmonyHubActivities2 => new(_haContext, "select.harmony_hub_activities_2");
    ///<summary>Spielezimmer Activities</summary>
    public SelectEntity SpielezimmerActivities => new(_haContext, "select.spielezimmer_activities");
    ///<summary>Wohnzimmer Activities</summary>
    public SelectEntity WohnzimmerActivities => new(_haContext, "select.wohnzimmer_activities");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Altpapier</summary>
    public SensorEntity Altpapier => new(_haContext, "sensor.altpapier");
    ///<summary>Autoschlüssel Alarm</summary>
    public SensorEntity AutoschlusselAlarm => new(_haContext, "sensor.autoschlussel_alarm");
    ///<summary>Backup State</summary>
    public SensorEntity BackupState => new(_haContext, "sensor.backup_state");
    ///<summary>Biotonne</summary>
    public SensorEntity Biotonne => new(_haContext, "sensor.biotonne");
    ///<summary>Blechturmgasse first departure</summary>
    public SensorEntity BlechturmgasseFirstDeparture => new(_haContext, "sensor.blechturmgasse_first_departure");
    ///<summary>Blechturmgasse next departure</summary>
    public SensorEntity BlechturmgasseNextDeparture => new(_haContext, "sensor.blechturmgasse_next_departure");
    ///<summary>Brother DCP-9022CDW</summary>
    public SensorEntity BrotherDcp9022cdw => new(_haContext, "sensor.brother_dcp_9022cdw");
    ///<summary>Brother DCP-9022CDW Uptime</summary>
    public SensorEntity BrotherDcp9022cdwUptime => new(_haContext, "sensor.brother_dcp_9022cdw_uptime");
    ///<summary>charging_plan</summary>
    public SensorEntity ChargingPlan2 => new(_haContext, "sensor.charging_plan_2");
    ///<summary>charging_plan_2</summary>
    public SensorEntity ChargingPlan22 => new(_haContext, "sensor.charging_plan_2_2");
    ///<summary>charging_test</summary>
    public SensorEntity ChargingTest => new(_haContext, "sensor.charging_test");
    ///<summary>CNMF645C</summary>
    public SensorEntity Cnmf645c => new(_haContext, "sensor.cnmf645c");
    ///<summary>CNMF645C Uptime</summary>
    public SensorEntity Cnmf645cUptime => new(_haContext, "sensor.cnmf645c_uptime");
    ///<summary>Date</summary>
    public SensorEntity Date => new(_haContext, "sensor.date");
    ///<summary>Date &amp; Time</summary>
    public SensorEntity DateTime => new(_haContext, "sensor.date_time");
    ///<summary>Date &amp; Time (ISO)</summary>
    public SensorEntity DateTimeIso => new(_haContext, "sensor.date_time_iso");
    ///<summary>Date &amp; Time (UTC)</summary>
    public SensorEntity DateTimeUtc => new(_haContext, "sensor.date_time_utc");
    ///<summary>DCP-9022CDW Status</summary>
    public SensorEntity Dcp9022cdwStatus => new(_haContext, "sensor.dcp_9022cdw_status");
    ///<summary>DiskStation2 (Drive 1) Status</summary>
    public SensorEntity DiskstationDrive1Status => new(_haContext, "sensor.diskstation_drive_1_status");
    ///<summary>DiskStation (Drive 1) Status</summary>
    public SensorEntity DiskstationDrive1Status2 => new(_haContext, "sensor.diskstation_drive_1_status_2");
    ///<summary>DiskStation2 (Drive 2) Status</summary>
    public SensorEntity DiskstationDrive2Status => new(_haContext, "sensor.diskstation_drive_2_status");
    ///<summary>DiskStation (Drive 2) Status</summary>
    public SensorEntity DiskstationDrive2Status2 => new(_haContext, "sensor.diskstation_drive_2_status_2");
    ///<summary>DiskStation (Drive 3) Status</summary>
    public SensorEntity DiskstationDrive3Status => new(_haContext, "sensor.diskstation_drive_3_status");
    ///<summary>DiskStation (Drive 4) Status</summary>
    public SensorEntity DiskstationDrive4Status => new(_haContext, "sensor.diskstation_drive_4_status");
    ///<summary>DiskStation2 (Volume 1) Status</summary>
    public SensorEntity DiskstationVolume1Status => new(_haContext, "sensor.diskstation_volume_1_status");
    ///<summary>DiskStation (Volume 1) Status</summary>
    public SensorEntity DiskstationVolume1Status2 => new(_haContext, "sensor.diskstation_volume_1_status_2");
    ///<summary>Enyaq Car Info</summary>
    public SensorEntity EnyaqCarInfo => new(_haContext, "sensor.enyaq_car_info");
    ///<summary>Enyaq Last connected</summary>
    public SensorEntity EnyaqLastConnected => new(_haContext, "sensor.enyaq_last_connected");
    ///<summary>Enyaq Model image URL (Large)</summary>
    public SensorEntity EnyaqModelImageUrlLarge => new(_haContext, "sensor.enyaq_model_image_url_large");
    ///<summary>Enyaq Model image URL (Small)</summary>
    public SensorEntity EnyaqModelImageUrlSmall => new(_haContext, "sensor.enyaq_model_image_url_small");
    ///<summary>EPEX Spot at Quantile</summary>
    public SensorEntity EpexSpotAtQuantile => new(_haContext, "sensor.epex_spot_at_quantile");
    ///<summary>EPEX Spot at Rank</summary>
    public SensorEntity EpexSpotAtRank => new(_haContext, "sensor.epex_spot_at_rank");
    ///<summary>epg_3sat</summary>
    public SensorEntity Epg3sat => new(_haContext, "sensor.epg_3sat");
    ///<summary>epg_desc</summary>
    public SensorEntity EpgDesc => new(_haContext, "sensor.epg_desc");
    ///<summary>epg_hoerzu_3sat</summary>
    public SensorEntity EpgHoerzu3sat => new(_haContext, "sensor.epg_hoerzu_3sat");
    ///<summary>epg_hoerzu_orf1</summary>
    public SensorEntity EpgHoerzuOrf1 => new(_haContext, "sensor.epg_hoerzu_orf1");
    ///<summary>epg_hoerzu_orf2</summary>
    public SensorEntity EpgHoerzuOrf2 => new(_haContext, "sensor.epg_hoerzu_orf2");
    ///<summary>epg_hoerzu_orf3</summary>
    public SensorEntity EpgHoerzuOrf3 => new(_haContext, "sensor.epg_hoerzu_orf3");
    ///<summary>epg_orf_orf1</summary>
    public SensorEntity EpgOrfOrf1 => new(_haContext, "sensor.epg_orf_orf1");
    ///<summary>epg_orf_orf2</summary>
    public SensorEntity EpgOrfOrf2 => new(_haContext, "sensor.epg_orf_orf2");
    ///<summary>epg_orf_orf3</summary>
    public SensorEntity EpgOrfOrf3 => new(_haContext, "sensor.epg_orf_orf3");
    ///<summary>epg_orf1</summary>
    public SensorEntity EpgOrf1 => new(_haContext, "sensor.epg_orf1");
    ///<summary>epg_orf2</summary>
    public SensorEntity EpgOrf2 => new(_haContext, "sensor.epg_orf2");
    ///<summary>epg_orf3</summary>
    public SensorEntity EpgOrf3 => new(_haContext, "sensor.epg_orf3");
    ///<summary>epg_sample_tvone</summary>
    public SensorEntity EpgSampleTvone => new(_haContext, "sensor.epg_sample_tvone");
    ///<summary>EV Smart Charging Charging</summary>
    public SensorEntity EvSmartChargingCharging => new(_haContext, "sensor.ev_smart_charging_charging");
    ///<summary>Galaxy Watch4 Classic Battery Health</summary>
    public SensorEntity GalaxyWatch4ClassicBatteryHealth => new(_haContext, "sensor.galaxy_watch4_classic_battery_health");
    ///<summary>Galaxy Watch4 Classic Battery State</summary>
    public SensorEntity GalaxyWatch4ClassicBatteryState => new(_haContext, "sensor.galaxy_watch4_classic_battery_state");
    ///<summary>Galaxy Watch4 Classic Charger Type</summary>
    public SensorEntity GalaxyWatch4ClassicChargerType => new(_haContext, "sensor.galaxy_watch4_classic_charger_type");
    ///<summary>Gelber Sack</summary>
    public SensorEntity GelberSack => new(_haContext, "sensor.gelber_sack");
    ///<summary>Elias OnePlus  Battery State</summary>
    public SensorEntity Gm1913Akkustatus => new(_haContext, "sensor.gm1913_akkustatus");
    ///<summary>Elias OnePlus  Battery Health</summary>
    public SensorEntity Gm1913Akkuzustand => new(_haContext, "sensor.gm1913_akkuzustand");
    ///<summary>Elias OnePlus  Current Time Zone</summary>
    public SensorEntity Gm1913AktuelleZeitzone => new(_haContext, "sensor.gm1913_aktuelle_zeitzone");
    ///<summary>Elias OnePlus  App Standby Bucket</summary>
    public SensorEntity Gm1913AppStandbyBucket => new(_haContext, "sensor.gm1913_app_standby_bucket");
    ///<summary>Elias OnePlus  Audio Mode</summary>
    public SensorEntity Gm1913Audiomodus => new(_haContext, "sensor.gm1913_audiomodus");
    ///<summary>Elias OnePlus  Last Update Trigger</summary>
    public SensorEntity Gm1913AusloserDerLetztenAktualisierung => new(_haContext, "sensor.gm1913_ausloser_der_letzten_aktualisierung");
    ///<summary>GM1913 Battery Health</summary>
    public SensorEntity Gm1913BatteryHealth => new(_haContext, "sensor.gm1913_battery_health");
    ///<summary>GM1913 Battery State</summary>
    public SensorEntity Gm1913BatteryState => new(_haContext, "sensor.gm1913_battery_state");
    ///<summary>GM1913 Charger Type</summary>
    public SensorEntity Gm1913ChargerType => new(_haContext, "sensor.gm1913_charger_type");
    ///<summary>Elias OnePlus  Current Version</summary>
    public SensorEntity Gm1913DerzeitigeVersion => new(_haContext, "sensor.gm1913_derzeitige_version");
    ///<summary>Elias OnePlus  Detected Activity</summary>
    public SensorEntity Gm1913ErkannteAktivitat => new(_haContext, "sensor.gm1913_erkannte_aktivitat");
    ///<summary>GM1913 Geokodierter Standort</summary>
    public SensorEntity Gm1913GeokodierterStandort => new(_haContext, "sensor.gm1913_geokodierter_standort");
    ///<summary>Elias OnePlus  Ringer Mode</summary>
    public SensorEntity Gm1913Klingeltonmodus => new(_haContext, "sensor.gm1913_klingeltonmodus");
    ///<summary>Elias OnePlus  Volume Level Call</summary>
    public SensorEntity Gm1913LautstarkeAnruf => new(_haContext, "sensor.gm1913_lautstarke_anruf");
    ///<summary>Elias OnePlus  Volume Level Ringer</summary>
    public SensorEntity Gm1913LautstarkeKlingelton => new(_haContext, "sensor.gm1913_lautstarke_klingelton");
    ///<summary>Elias OnePlus  Volume Level Music</summary>
    public SensorEntity Gm1913LautstarkeMusikwiedergabe => new(_haContext, "sensor.gm1913_lautstarke_musikwiedergabe");
    ///<summary>Elias OnePlus  Volume Level Alarm</summary>
    public SensorEntity Gm1913LautstarkeWecker => new(_haContext, "sensor.gm1913_lautstarke_wecker");
    ///<summary>Elias OnePlus  Last Notification</summary>
    public SensorEntity Gm1913LetzteBenachrichtigung => new(_haContext, "sensor.gm1913_letzte_benachrichtigung");
    ///<summary>Elias OnePlus  Last Removed Notification</summary>
    public SensorEntity Gm1913LetzteEntfernteBenachrichtigungen => new(_haContext, "sensor.gm1913_letzte_entfernte_benachrichtigungen");
    ///<summary>Elias OnePlus  Last Reboot</summary>
    public SensorEntity Gm1913LetzterNeustart => new(_haContext, "sensor.gm1913_letzter_neustart");
    ///<summary>Elias OnePlus  Next Alarm</summary>
    public SensorEntity Gm1913NachsterWecker => new(_haContext, "sensor.gm1913_nachster_wecker");
    ///<summary>Elias OnePlus  Proximity Sensor</summary>
    public SensorEntity Gm1913Naherungssensor => new(_haContext, "sensor.gm1913_naherungssensor");
    ///<summary>Elias OnePlus  Do Not Disturb Sensor</summary>
    public SensorEntity Gm1913NichtStorenSensor => new(_haContext, "sensor.gm1913_nicht_storen_sensor");
    ///<summary>Elias OnePlus  Public IP Address</summary>
    public SensorEntity Gm1913OffentlicheIpAdresse => new(_haContext, "sensor.gm1913_offentliche_ip_adresse");
    ///<summary>Elias OnePlus  SIM 1</summary>
    public SensorEntity Gm1913Sim1 => new(_haContext, "sensor.gm1913_sim_1");
    ///<summary>Elias OnePlus  SIM 2</summary>
    public SensorEntity Gm1913Sim2 => new(_haContext, "sensor.gm1913_sim_2");
    ///<summary>Elias OnePlus  Phone State</summary>
    public SensorEntity Gm1913Telefonstatus => new(_haContext, "sensor.gm1913_telefonstatus");
    ///<summary>Elias OnePlus  Charger Type</summary>
    public SensorEntity Gm1913TypDesLadegerats => new(_haContext, "sensor.gm1913_typ_des_ladegerats");
    ///<summary>Elias OnePlus  App Importance</summary>
    public SensorEntity Gm1913WichtigkeitDerApp => new(_haContext, "sensor.gm1913_wichtigkeit_der_app");
    ///<summary>Elias OnePlus  WiFi BSSID</summary>
    public SensorEntity Gm1913WlanBssid => new(_haContext, "sensor.gm1913_wlan_bssid");
    ///<summary>Elias OnePlus  WiFi IP Address</summary>
    public SensorEntity Gm1913WlanIpAdresse => new(_haContext, "sensor.gm1913_wlan_ip_adresse");
    ///<summary>Elias OnePlus  WiFi Connection</summary>
    public SensorEntity Gm1913WlanVerbindung => new(_haContext, "sensor.gm1913_wlan_verbindung");
    ///<summary>Car state</summary>
    public SensorEntity GoEcharger203597Car => new(_haContext, "sensor.go_echarger_203597_car");
    ///<summary>Cable unlock status</summary>
    public SensorEntity GoEcharger203597Cus2 => new(_haContext, "sensor.go_echarger_203597_cus_2");
    ///<summary>Error</summary>
    public SensorEntity GoEcharger203597Err => new(_haContext, "sensor.go_echarger_203597_err");
    ///<summary>Force state</summary>
    public SensorEntity GoEcharger203597Frc => new(_haContext, "sensor.go_echarger_203597_frc");
    ///<summary>Logic mode</summary>
    public SensorEntity GoEcharger203597Lmo => new(_haContext, "sensor.go_echarger_203597_lmo");
    ///<summary>Status</summary>
    public SensorEntity GoEcharger203597Modelstatus => new(_haContext, "sensor.go_echarger_203597_modelstatus");
    ///<summary>Configured phases</summary>
    public SensorEntity GoEcharger203597Psm => new(_haContext, "sensor.go_echarger_203597_psm");
    ///<summary>Reboot counter</summary>
    public SensorEntity GoEcharger203597Rbc => new(_haContext, "sensor.go_echarger_203597_rbc");
    ///<summary>Last set config key result</summary>
    public SensorEntity GoEcharger203597Result => new(_haContext, "sensor.go_echarger_203597_result");
    ///<summary>Transaction</summary>
    public SensorEntity GoEcharger203597Trx => new(_haContext, "sensor.go_echarger_203597_trx");
    ///<summary>Cable unlock mode</summary>
    public SensorEntity GoEcharger203597Ust => new(_haContext, "sensor.go_echarger_203597_ust");
    ///<summary>HA</summary>
    public SensorEntity Ha => new(_haContext, "sensor.ha");
    ///<summary>Thomas Handy Proximity Sensor</summary>
    public SensorEntity HomeAssistantBlueNaherungssensor => new(_haContext, "sensor.home_assistant_blue_naherungssensor");
    ///<summary>Thomas Handy WiFi Connection</summary>
    public SensorEntity HomeAssistantBlueWlanVerbindung => new(_haContext, "sensor.home_assistant_blue_wlan_verbindung");
    ///<summary>Home Pressure tendency</summary>
    public SensorEntity HomePressureTendency => new(_haContext, "sensor.home_pressure_tendency");
    ///<summary>Internet Time</summary>
    public SensorEntity InternetTime => new(_haContext, "sensor.internet_time");
    ///<summary>Motion 1: General purpose</summary>
    public SensorEntity Motion1GeneralPurpose => new(_haContext, "sensor.motion_1_general_purpose");
    ///<summary>Node status</summary>
    public SensorEntity Motion1NodeStatus => new(_haContext, "sensor.motion_1_node_status");
    ///<summary>Motion 1: Seismic Intensity</summary>
    public SensorEntity Motion1SeismicIntensity => new(_haContext, "sensor.motion_1_seismic_intensity");
    ///<summary>Node status</summary>
    public SensorEntity Motion2NodeStatus => new(_haContext, "sensor.motion_2_node_status");
    ///<summary>Motion 2: Seismic Intensity</summary>
    public SensorEntity Motion2SeismicIntensity => new(_haContext, "sensor.motion_2_seismic_intensity");
    ///<summary>Müll</summary>
    public SensorEntity Mull => new(_haContext, "sensor.mull");
    ///<summary>mytest</summary>
    public SensorEntity Mytest => new(_haContext, "sensor.mytest");
    ///<summary>mytest_boolean</summary>
    public SensorEntity MytestBoolean => new(_haContext, "sensor.mytest_boolean");
    ///<summary>netdaemon_status</summary>
    public SensorEntity NetdaemonStatus => new(_haContext, "sensor.netdaemon_status");
    ///<summary>Nächster Abholtermin</summary>
    public SensorEntity NextMull => new(_haContext, "sensor.next_mull");
    ///<summary>Problemstoffe</summary>
    public SensorEntity NextProblemstoffe => new(_haContext, "sensor.next_problemstoffe");
    ///<summary>Rauchfangkehrer</summary>
    public SensorEntity NextRauchfangkehrer => new(_haContext, "sensor.next_rauchfangkehrer");
    ///<summary>OpenWeatherMap Condition</summary>
    public SensorEntity OpenweathermapCondition => new(_haContext, "sensor.openweathermap_condition");
    ///<summary>OpenWeatherMap Forecast Condition</summary>
    public SensorEntity OpenweathermapForecastCondition => new(_haContext, "sensor.openweathermap_forecast_condition");
    ///<summary>OpenWeatherMap Forecast Time</summary>
    public SensorEntity OpenweathermapForecastTime => new(_haContext, "sensor.openweathermap_forecast_time");
    ///<summary>OpenWeatherMap Precipitation kind</summary>
    public SensorEntity OpenweathermapPrecipitationKind => new(_haContext, "sensor.openweathermap_precipitation_kind");
    ///<summary>OpenWeatherMap Weather</summary>
    public SensorEntity OpenweathermapWeather => new(_haContext, "sensor.openweathermap_weather");
    ///<summary>OpenWeatherMap Weather Code</summary>
    public SensorEntity OpenweathermapWeatherCode => new(_haContext, "sensor.openweathermap_weather_code");
    ///<summary>pool_filtration</summary>
    public SensorEntity PoolFiltration => new(_haContext, "sensor.pool_filtration");
    ///<summary>Problemstoffe</summary>
    public SensorEntity Problemstoffe => new(_haContext, "sensor.problemstoffe");
    ///<summary>Rauchfangkehrer</summary>
    public SensorEntity Rauchfangkehrer => new(_haContext, "sensor.rauchfangkehrer");
    ///<summary>Restmüll</summary>
    public SensorEntity Restmull => new(_haContext, "sensor.restmull");
    ///<summary>S22 Ultra Battery Health</summary>
    public SensorEntity S22UltraBatteryHealth => new(_haContext, "sensor.s22_ultra_battery_health");
    ///<summary>S22 Ultra Battery State</summary>
    public SensorEntity S22UltraBatteryState => new(_haContext, "sensor.s22_ultra_battery_state");
    ///<summary>S22 Ultra Charger Type</summary>
    public SensorEntity S22UltraChargerType => new(_haContext, "sensor.s22_ultra_charger_type");
    ///<summary>Samba Backup</summary>
    public SensorEntity SambaBackup => new(_haContext, "sensor.samba_backup");
    ///<summary>SmartTag+ 1 Alarm</summary>
    public SensorEntity Smarttag1Alarm => new(_haContext, "sensor.smarttag_1_alarm");
    ///<summary>SmartTag+ 2 Alarm</summary>
    public SensorEntity Smarttag2Alarm => new(_haContext, "sensor.smarttag_2_alarm");
    ///<summary>Thomas Handy Battery State</summary>
    public SensorEntity ThomasHandyAkkustatus => new(_haContext, "sensor.thomas_handy_akkustatus");
    ///<summary>Thomas Handy Battery Health</summary>
    public SensorEntity ThomasHandyAkkuzustand => new(_haContext, "sensor.thomas_handy_akkuzustand");
    ///<summary>Thomas Handy Current Time Zone</summary>
    public SensorEntity ThomasHandyAktuelleZeitzone => new(_haContext, "sensor.thomas_handy_aktuelle_zeitzone");
    ///<summary>Thomas Handy App Standby Bucket</summary>
    public SensorEntity ThomasHandyAppStandbyBucket => new(_haContext, "sensor.thomas_handy_app_standby_bucket");
    ///<summary>Thomas Handy Audio Mode</summary>
    public SensorEntity ThomasHandyAudiomodus => new(_haContext, "sensor.thomas_handy_audiomodus");
    ///<summary>Thomas Handy Last Update Trigger</summary>
    public SensorEntity ThomasHandyAusloserDerLetztenAktualisierung => new(_haContext, "sensor.thomas_handy_ausloser_der_letzten_aktualisierung");
    ///<summary>Thomas Handy Current Version</summary>
    public SensorEntity ThomasHandyDerzeitigeVersion => new(_haContext, "sensor.thomas_handy_derzeitige_version");
    ///<summary>Thomas Handy Detected Activity</summary>
    public SensorEntity ThomasHandyErkannteAktivitat => new(_haContext, "sensor.thomas_handy_erkannte_aktivitat");
    ///<summary>Thomas Handy Geocoded Location</summary>
    public SensorEntity ThomasHandyGeokodierterStandort => new(_haContext, "sensor.thomas_handy_geokodierter_standort");
    ///<summary>Thomas Handy Ringer Mode</summary>
    public SensorEntity ThomasHandyKlingeltonmodus => new(_haContext, "sensor.thomas_handy_klingeltonmodus");
    ///<summary>Thomas Handy Volume Level Call</summary>
    public SensorEntity ThomasHandyLautstarkeAnruf => new(_haContext, "sensor.thomas_handy_lautstarke_anruf");
    ///<summary>Thomas Handy Volume Level Ringer</summary>
    public SensorEntity ThomasHandyLautstarkeKlingelton => new(_haContext, "sensor.thomas_handy_lautstarke_klingelton");
    ///<summary>Thomas Handy Volume Level Music</summary>
    public SensorEntity ThomasHandyLautstarkeMusikwiedergabe => new(_haContext, "sensor.thomas_handy_lautstarke_musikwiedergabe");
    ///<summary>Thomas Handy Volume Level Alarm</summary>
    public SensorEntity ThomasHandyLautstarkeWecker => new(_haContext, "sensor.thomas_handy_lautstarke_wecker");
    ///<summary>Thomas Handy Last Notification</summary>
    public SensorEntity ThomasHandyLetzteBenachrichtigung => new(_haContext, "sensor.thomas_handy_letzte_benachrichtigung");
    ///<summary>Thomas Handy Last Removed Notification</summary>
    public SensorEntity ThomasHandyLetzteEntfernteBenachrichtigungen => new(_haContext, "sensor.thomas_handy_letzte_entfernte_benachrichtigungen");
    ///<summary>Thomas Handy Last Reboot</summary>
    public SensorEntity ThomasHandyLetzterNeustart => new(_haContext, "sensor.thomas_handy_letzter_neustart");
    ///<summary>Thomas Handy Media Session</summary>
    public SensorEntity ThomasHandyMediaSession => new(_haContext, "sensor.thomas_handy_media_session");
    ///<summary>Thomas Handy Next Alarm</summary>
    public SensorEntity ThomasHandyNachsterWecker => new(_haContext, "sensor.thomas_handy_nachster_wecker");
    ///<summary>Thomas Handy Do Not Disturb Sensor</summary>
    public SensorEntity ThomasHandyNichtStorenSensor => new(_haContext, "sensor.thomas_handy_nicht_storen_sensor");
    ///<summary>Thomas Handy Public IP Address</summary>
    public SensorEntity ThomasHandyOffentlicheIpAdresse => new(_haContext, "sensor.thomas_handy_offentliche_ip_adresse");
    ///<summary>Thomas Handy SIM 1</summary>
    public SensorEntity ThomasHandySim1 => new(_haContext, "sensor.thomas_handy_sim_1");
    ///<summary>Thomas Handy SIM 2</summary>
    public SensorEntity ThomasHandySim2 => new(_haContext, "sensor.thomas_handy_sim_2");
    ///<summary>Thomas Handy Phone State</summary>
    public SensorEntity ThomasHandyTelefonstatus => new(_haContext, "sensor.thomas_handy_telefonstatus");
    ///<summary>Thomas Handy Charger Type</summary>
    public SensorEntity ThomasHandyTypDesLadegerats => new(_haContext, "sensor.thomas_handy_typ_des_ladegerats");
    ///<summary>Thomas Handy App Importance</summary>
    public SensorEntity ThomasHandyWichtigkeitDerApp => new(_haContext, "sensor.thomas_handy_wichtigkeit_der_app");
    ///<summary>Thomas Handy WiFi BSSID</summary>
    public SensorEntity ThomasHandyWlanBssid => new(_haContext, "sensor.thomas_handy_wlan_bssid");
    ///<summary>Thomas Handy WiFi IP Address</summary>
    public SensorEntity ThomasHandyWlanIpAdresse => new(_haContext, "sensor.thomas_handy_wlan_ip_adresse");
    ///<summary>Time</summary>
    public SensorEntity Time => new(_haContext, "sensor.time");
    ///<summary>Time &amp; Date</summary>
    public SensorEntity TimeDate => new(_haContext, "sensor.time_date");
    ///<summary>Date and Time</summary>
    public SensorEntity TimeFormatted => new(_haContext, "sensor.time_formatted");
    ///<summary>Time (UTC)</summary>
    public SensorEntity TimeUtc => new(_haContext, "sensor.time_utc");
    ///<summary>vistapool_connected</summary>
    public SensorEntity VistapoolConnected => new(_haContext, "sensor.vistapool_connected");
    ///<summary>Wasch­maschine Washer Completion Time</summary>
    public SensorEntity WaschmaschineWasherCompletionTime => new(_haContext, "sensor.waschmaschine_washer_completion_time");
    ///<summary>Wasch­maschine Washer Job State</summary>
    public SensorEntity WaschmaschineWasherJobState => new(_haContext, "sensor.waschmaschine_washer_job_state");
    ///<summary>Wasch­maschine Washer Machine State</summary>
    public SensorEntity WaschmaschineWasherMachineState => new(_haContext, "sensor.waschmaschine_washer_machine_state");
    ///<summary>Westbahnhof S U first departure</summary>
    public SensorEntity WestbahnhofSUFirstDeparture => new(_haContext, "sensor.westbahnhof_s_u_first_departure");
    ///<summary>Westbahnhof S U next departure</summary>
    public SensorEntity WestbahnhofSUNextDeparture => new(_haContext, "sensor.westbahnhof_s_u_next_departure");
    ///<summary>Austria Coronavirus confirmed</summary>
    public NumericSensorEntity AustriaCoronavirusConfirmed => new(_haContext, "sensor.austria_coronavirus_confirmed");
    ///<summary>Austria Coronavirus current</summary>
    public NumericSensorEntity AustriaCoronavirusCurrent => new(_haContext, "sensor.austria_coronavirus_current");
    ///<summary>Austria Coronavirus deaths</summary>
    public NumericSensorEntity AustriaCoronavirusDeaths => new(_haContext, "sensor.austria_coronavirus_deaths");
    ///<summary>Austria Coronavirus recovered</summary>
    public NumericSensorEntity AustriaCoronavirusRecovered => new(_haContext, "sensor.austria_coronavirus_recovered");
    ///<summary>Autoschlüssel Battery</summary>
    public NumericSensorEntity AutoschlusselBattery => new(_haContext, "sensor.autoschlussel_battery");
    ///<summary>Autoschlüssel Volume</summary>
    public NumericSensorEntity AutoschlusselVolume => new(_haContext, "sensor.autoschlussel_volume");
    ///<summary>Awattar AT</summary>
    public NumericSensorEntity AwattarAt => new(_haContext, "sensor.awattar_at");
    ///<summary>Lightning Azimuth</summary>
    public NumericSensorEntity BlitzortungLightningAzimuth => new(_haContext, "sensor.blitzortung_lightning_azimuth");
    ///<summary>Lightning Counter</summary>
    public NumericSensorEntity BlitzortungLightningCounter => new(_haContext, "sensor.blitzortung_lightning_counter");
    ///<summary>Lightning Distance</summary>
    public NumericSensorEntity BlitzortungLightningDistance => new(_haContext, "sensor.blitzortung_lightning_distance");
    ///<summary>Brother DCP-9022CDW Black Toner Cartridge</summary>
    public NumericSensorEntity BrotherDcp9022cdwBlackTonerCartridge => new(_haContext, "sensor.brother_dcp_9022cdw_black_toner_cartridge");
    ///<summary>Brother DCP-9022CDW Cyan Toner Cartridge</summary>
    public NumericSensorEntity BrotherDcp9022cdwCyanTonerCartridge => new(_haContext, "sensor.brother_dcp_9022cdw_cyan_toner_cartridge");
    ///<summary>Brother DCP-9022CDW Magenta Toner Cartridge</summary>
    public NumericSensorEntity BrotherDcp9022cdwMagentaTonerCartridge => new(_haContext, "sensor.brother_dcp_9022cdw_magenta_toner_cartridge");
    ///<summary>Brother DCP-9022CDW Yellow Toner Cartridge</summary>
    public NumericSensorEntity BrotherDcp9022cdwYellowTonerCartridge => new(_haContext, "sensor.brother_dcp_9022cdw_yellow_toner_cartridge");
    ///<summary>BUCHBERG Dew Point</summary>
    public NumericSensorEntity BuchbergDewPoint => new(_haContext, "sensor.buchberg_dew_point");
    ///<summary>BUCHBERG Dew Point Average</summary>
    public NumericSensorEntity BuchbergDewPointAverage => new(_haContext, "sensor.buchberg_dew_point_average");
    ///<summary>BUCHBERG Humidity</summary>
    public NumericSensorEntity BuchbergHumidity => new(_haContext, "sensor.buchberg_humidity");
    ///<summary>BUCHBERG Precipitation</summary>
    public NumericSensorEntity BuchbergPrecipitation => new(_haContext, "sensor.buchberg_precipitation");
    ///<summary>BUCHBERG Pressure</summary>
    public NumericSensorEntity BuchbergPressure => new(_haContext, "sensor.buchberg_pressure");
    ///<summary>BUCHBERG Pressure at Sea Level</summary>
    public NumericSensorEntity BuchbergPressureAtSeaLevel => new(_haContext, "sensor.buchberg_pressure_at_sea_level");
    ///<summary>BUCHBERG Snow</summary>
    public NumericSensorEntity BuchbergSnow => new(_haContext, "sensor.buchberg_snow");
    ///<summary>BUCHBERG Sun Last 10 Minutes</summary>
    public NumericSensorEntity BuchbergSunLast10Minutes => new(_haContext, "sensor.buchberg_sun_last_10_minutes");
    ///<summary>BUCHBERG Temperature</summary>
    public NumericSensorEntity BuchbergTemperature => new(_haContext, "sensor.buchberg_temperature");
    ///<summary>BUCHBERG Temperature Average</summary>
    public NumericSensorEntity BuchbergTemperatureAverage => new(_haContext, "sensor.buchberg_temperature_average");
    ///<summary>BUCHBERG Top Wind Bearing</summary>
    public NumericSensorEntity BuchbergTopWindBearing => new(_haContext, "sensor.buchberg_top_wind_bearing");
    ///<summary>BUCHBERG Top Wind Speed</summary>
    public NumericSensorEntity BuchbergTopWindSpeed => new(_haContext, "sensor.buchberg_top_wind_speed");
    ///<summary>BUCHBERG Wind Bearing</summary>
    public NumericSensorEntity BuchbergWindBearing => new(_haContext, "sensor.buchberg_wind_bearing");
    ///<summary>BUCHBERG Wind Speed</summary>
    public NumericSensorEntity BuchbergWindSpeed => new(_haContext, "sensor.buchberg_wind_speed");
    ///<summary>Charging Plan</summary>
    public NumericSensorEntity ChargingPlan => new(_haContext, "sensor.charging_plan");
    ///<summary>CNMF645C Canon Cartridge 054 Black Toner</summary>
    public NumericSensorEntity Cnmf645cCanonCartridge054BlackToner => new(_haContext, "sensor.cnmf645c_canon_cartridge_054_black_toner");
    ///<summary>CNMF645C Canon Cartridge 054 Cyan Toner</summary>
    public NumericSensorEntity Cnmf645cCanonCartridge054CyanToner => new(_haContext, "sensor.cnmf645c_canon_cartridge_054_cyan_toner");
    ///<summary>CNMF645C Canon Cartridge 054 Magenta To</summary>
    public NumericSensorEntity Cnmf645cCanonCartridge054MagentaTo => new(_haContext, "sensor.cnmf645c_canon_cartridge_054_magenta_to");
    ///<summary>CNMF645C Canon Cartridge 054 Yellow Ton</summary>
    public NumericSensorEntity Cnmf645cCanonCartridge054YellowTon => new(_haContext, "sensor.cnmf645c_canon_cartridge_054_yellow_ton");
    ///<summary>DCP-9022CDW B/W counter</summary>
    public NumericSensorEntity Dcp9022cdwBWCounter => new(_haContext, "sensor.dcp_9022cdw_b_w_counter");
    ///<summary>DCP-9022CDW Belt unit remaining life</summary>
    public NumericSensorEntity Dcp9022cdwBeltUnitRemainingLife => new(_haContext, "sensor.dcp_9022cdw_belt_unit_remaining_life");
    ///<summary>DCP-9022CDW Black drum counter</summary>
    public NumericSensorEntity Dcp9022cdwBlackDrumCounter => new(_haContext, "sensor.dcp_9022cdw_black_drum_counter");
    ///<summary>DCP-9022CDW Black drum remaining life</summary>
    public NumericSensorEntity Dcp9022cdwBlackDrumRemainingLife => new(_haContext, "sensor.dcp_9022cdw_black_drum_remaining_life");
    ///<summary>DCP-9022CDW Black drum remaining pages</summary>
    public NumericSensorEntity Dcp9022cdwBlackDrumRemainingPages => new(_haContext, "sensor.dcp_9022cdw_black_drum_remaining_pages");
    ///<summary>DCP-9022CDW Black toner remaining</summary>
    public NumericSensorEntity Dcp9022cdwBlackTonerRemaining => new(_haContext, "sensor.dcp_9022cdw_black_toner_remaining");
    ///<summary>DCP-9022CDW Color counter</summary>
    public NumericSensorEntity Dcp9022cdwColorCounter => new(_haContext, "sensor.dcp_9022cdw_color_counter");
    ///<summary>DCP-9022CDW Cyan drum counter</summary>
    public NumericSensorEntity Dcp9022cdwCyanDrumCounter => new(_haContext, "sensor.dcp_9022cdw_cyan_drum_counter");
    ///<summary>DCP-9022CDW Cyan drum remaining life</summary>
    public NumericSensorEntity Dcp9022cdwCyanDrumRemainingLife => new(_haContext, "sensor.dcp_9022cdw_cyan_drum_remaining_life");
    ///<summary>DCP-9022CDW Cyan drum remaining pages</summary>
    public NumericSensorEntity Dcp9022cdwCyanDrumRemainingPages => new(_haContext, "sensor.dcp_9022cdw_cyan_drum_remaining_pages");
    ///<summary>DCP-9022CDW Cyan toner remaining</summary>
    public NumericSensorEntity Dcp9022cdwCyanTonerRemaining => new(_haContext, "sensor.dcp_9022cdw_cyan_toner_remaining");
    ///<summary>DCP-9022CDW Fuser remaining life</summary>
    public NumericSensorEntity Dcp9022cdwFuserRemainingLife => new(_haContext, "sensor.dcp_9022cdw_fuser_remaining_life");
    ///<summary>DCP-9022CDW Magenta drum counter</summary>
    public NumericSensorEntity Dcp9022cdwMagentaDrumCounter => new(_haContext, "sensor.dcp_9022cdw_magenta_drum_counter");
    ///<summary>DCP-9022CDW Magenta drum remaining life</summary>
    public NumericSensorEntity Dcp9022cdwMagentaDrumRemainingLife => new(_haContext, "sensor.dcp_9022cdw_magenta_drum_remaining_life");
    ///<summary>DCP-9022CDW Magenta drum remaining pages</summary>
    public NumericSensorEntity Dcp9022cdwMagentaDrumRemainingPages => new(_haContext, "sensor.dcp_9022cdw_magenta_drum_remaining_pages");
    ///<summary>DCP-9022CDW Magenta toner remaining</summary>
    public NumericSensorEntity Dcp9022cdwMagentaTonerRemaining => new(_haContext, "sensor.dcp_9022cdw_magenta_toner_remaining");
    ///<summary>DCP-9022CDW Page counter</summary>
    public NumericSensorEntity Dcp9022cdwPageCounter => new(_haContext, "sensor.dcp_9022cdw_page_counter");
    ///<summary>DCP-9022CDW PF Kit 1 remaining life</summary>
    public NumericSensorEntity Dcp9022cdwPfKit1RemainingLife => new(_haContext, "sensor.dcp_9022cdw_pf_kit_1_remaining_life");
    ///<summary>DCP-9022CDW Yellow drum counter</summary>
    public NumericSensorEntity Dcp9022cdwYellowDrumCounter => new(_haContext, "sensor.dcp_9022cdw_yellow_drum_counter");
    ///<summary>DCP-9022CDW Yellow drum remaining life</summary>
    public NumericSensorEntity Dcp9022cdwYellowDrumRemainingLife => new(_haContext, "sensor.dcp_9022cdw_yellow_drum_remaining_life");
    ///<summary>DCP-9022CDW Yellow drum remaining pages</summary>
    public NumericSensorEntity Dcp9022cdwYellowDrumRemainingPages => new(_haContext, "sensor.dcp_9022cdw_yellow_drum_remaining_pages");
    ///<summary>DCP-9022CDW Yellow toner remaining</summary>
    public NumericSensorEntity Dcp9022cdwYellowTonerRemaining => new(_haContext, "sensor.dcp_9022cdw_yellow_toner_remaining");
    ///<summary>Dimmer Battery</summary>
    public NumericSensorEntity DimmerBatteryLevel => new(_haContext, "sensor.dimmer_battery_level");
    ///<summary>Dimmer Büro Battery</summary>
    public NumericSensorEntity DimmerBuroBatteryLevel => new(_haContext, "sensor.dimmer_buro_battery_level");
    ///<summary>Dimmer Gästezimmer Battery</summary>
    public NumericSensorEntity DimmerGastezimmerBatteryLevel => new(_haContext, "sensor.dimmer_gastezimmer_battery_level");
    ///<summary>Dimmer oben Battery</summary>
    public NumericSensorEntity DimmerObenBatteryLevel => new(_haContext, "sensor.dimmer_oben_battery_level");
    ///<summary>Dimmer Schlafzimmer Battery</summary>
    public NumericSensorEntity DimmerSchlafzimmerBatteryLevel => new(_haContext, "sensor.dimmer_schlafzimmer_battery_level");
    ///<summary>DiskStation CPU Load Average (15 min)</summary>
    public NumericSensorEntity DiskstationCpuLoadAverage15Min => new(_haContext, "sensor.diskstation_cpu_load_average_15_min");
    ///<summary>DiskStation CPU Load Average (5 min)</summary>
    public NumericSensorEntity DiskstationCpuLoadAverage5Min => new(_haContext, "sensor.diskstation_cpu_load_average_5_min");
    ///<summary>DiskStation2 CPU Load Average (15 min)</summary>
    public NumericSensorEntity DiskstationCpuLoadAverarge15Min => new(_haContext, "sensor.diskstation_cpu_load_averarge_15_min");
    ///<summary>DiskStation2 CPU Load Average (5 min)</summary>
    public NumericSensorEntity DiskstationCpuLoadAverarge5Min => new(_haContext, "sensor.diskstation_cpu_load_averarge_5_min");
    ///<summary>DiskStation2 CPU Utilization (Total)</summary>
    public NumericSensorEntity DiskstationCpuUtilizationTotal => new(_haContext, "sensor.diskstation_cpu_utilization_total");
    ///<summary>DiskStation CPU Utilization (Total)</summary>
    public NumericSensorEntity DiskstationCpuUtilizationTotal2 => new(_haContext, "sensor.diskstation_cpu_utilization_total_2");
    ///<summary>DiskStation2 CPU Utilization (User)</summary>
    public NumericSensorEntity DiskstationCpuUtilizationUser => new(_haContext, "sensor.diskstation_cpu_utilization_user");
    ///<summary>DiskStation CPU Utilization (User)</summary>
    public NumericSensorEntity DiskstationCpuUtilizationUser2 => new(_haContext, "sensor.diskstation_cpu_utilization_user_2");
    ///<summary>DiskStation Download Throughput</summary>
    public NumericSensorEntity DiskstationDownloadThroughput => new(_haContext, "sensor.diskstation_download_throughput");
    ///<summary>DiskStation2 (Drive 1) Temperature</summary>
    public NumericSensorEntity DiskstationDrive1Temperature => new(_haContext, "sensor.diskstation_drive_1_temperature");
    ///<summary>DiskStation (Drive 1) Temperature</summary>
    public NumericSensorEntity DiskstationDrive1Temperature2 => new(_haContext, "sensor.diskstation_drive_1_temperature_2");
    ///<summary>DiskStation2 (Drive 2) Temperature</summary>
    public NumericSensorEntity DiskstationDrive2Temperature => new(_haContext, "sensor.diskstation_drive_2_temperature");
    ///<summary>DiskStation (Drive 2) Temperature</summary>
    public NumericSensorEntity DiskstationDrive2Temperature2 => new(_haContext, "sensor.diskstation_drive_2_temperature_2");
    ///<summary>DiskStation (Drive 3) Temperature</summary>
    public NumericSensorEntity DiskstationDrive3Temperature => new(_haContext, "sensor.diskstation_drive_3_temperature");
    ///<summary>DiskStation (Drive 4) Temperature</summary>
    public NumericSensorEntity DiskstationDrive4Temperature => new(_haContext, "sensor.diskstation_drive_4_temperature");
    ///<summary>DiskStation Library - Dokus</summary>
    public NumericSensorEntity DiskstationLibraryDokus => new(_haContext, "sensor.diskstation_library_dokus");
    ///<summary>DiskStation Library - Filme</summary>
    public NumericSensorEntity DiskstationLibraryFilme => new(_haContext, "sensor.diskstation_library_filme");
    ///<summary>DiskStation Library - Serien</summary>
    public NumericSensorEntity DiskstationLibrarySerien => new(_haContext, "sensor.diskstation_library_serien");
    ///<summary>DiskStation2 Memory Available (Real)</summary>
    public NumericSensorEntity DiskstationMemoryAvailableReal => new(_haContext, "sensor.diskstation_memory_available_real");
    ///<summary>DiskStation Memory Available (Real)</summary>
    public NumericSensorEntity DiskstationMemoryAvailableReal2 => new(_haContext, "sensor.diskstation_memory_available_real_2");
    ///<summary>DiskStation2 Memory Available (Swap)</summary>
    public NumericSensorEntity DiskstationMemoryAvailableSwap => new(_haContext, "sensor.diskstation_memory_available_swap");
    ///<summary>DiskStation Memory Available (Swap)</summary>
    public NumericSensorEntity DiskstationMemoryAvailableSwap2 => new(_haContext, "sensor.diskstation_memory_available_swap_2");
    ///<summary>DiskStation2 Memory Total (Real)</summary>
    public NumericSensorEntity DiskstationMemoryTotalReal => new(_haContext, "sensor.diskstation_memory_total_real");
    ///<summary>DiskStation Memory Total (Real)</summary>
    public NumericSensorEntity DiskstationMemoryTotalReal2 => new(_haContext, "sensor.diskstation_memory_total_real_2");
    ///<summary>DiskStation2 Memory Total (Swap)</summary>
    public NumericSensorEntity DiskstationMemoryTotalSwap => new(_haContext, "sensor.diskstation_memory_total_swap");
    ///<summary>DiskStation Memory Total (Swap)</summary>
    public NumericSensorEntity DiskstationMemoryTotalSwap2 => new(_haContext, "sensor.diskstation_memory_total_swap_2");
    ///<summary>DiskStation2 Memory Usage (Real)</summary>
    public NumericSensorEntity DiskstationMemoryUsageReal => new(_haContext, "sensor.diskstation_memory_usage_real");
    ///<summary>DiskStation Memory Usage (Real)</summary>
    public NumericSensorEntity DiskstationMemoryUsageReal2 => new(_haContext, "sensor.diskstation_memory_usage_real_2");
    ///<summary>DiskStation2 Download Throughput</summary>
    public NumericSensorEntity DiskstationNetworkDown => new(_haContext, "sensor.diskstation_network_down");
    ///<summary>DiskStation2 Upload Throughput</summary>
    public NumericSensorEntity DiskstationNetworkUp => new(_haContext, "sensor.diskstation_network_up");
    ///<summary>DiskStation2 Temperature</summary>
    public NumericSensorEntity DiskstationTemperature => new(_haContext, "sensor.diskstation_temperature");
    ///<summary>DiskStation Temperature</summary>
    public NumericSensorEntity DiskstationTemperature2 => new(_haContext, "sensor.diskstation_temperature_2");
    ///<summary>DiskStation Upload Throughput</summary>
    public NumericSensorEntity DiskstationUploadThroughput => new(_haContext, "sensor.diskstation_upload_throughput");
    ///<summary>DiskStation2 (Volume 1) Average Disk Temp</summary>
    public NumericSensorEntity DiskstationVolume1AverageDiskTemp => new(_haContext, "sensor.diskstation_volume_1_average_disk_temp");
    ///<summary>DiskStation (Volume 1) Average Disk Temp</summary>
    public NumericSensorEntity DiskstationVolume1AverageDiskTemp2 => new(_haContext, "sensor.diskstation_volume_1_average_disk_temp_2");
    ///<summary>DiskStation2 (Volume 1) Used Space</summary>
    public NumericSensorEntity DiskstationVolume1UsedSpace => new(_haContext, "sensor.diskstation_volume_1_used_space");
    ///<summary>DiskStation (Volume 1) Used Space</summary>
    public NumericSensorEntity DiskstationVolume1UsedSpace2 => new(_haContext, "sensor.diskstation_volume_1_used_space_2");
    ///<summary>DiskStation2 (Volume 1) Volume Used</summary>
    public NumericSensorEntity DiskstationVolume1VolumeUsed => new(_haContext, "sensor.diskstation_volume_1_volume_used");
    ///<summary>DiskStation (Volume 1) Volume Used</summary>
    public NumericSensorEntity DiskstationVolume1VolumeUsed2 => new(_haContext, "sensor.diskstation_volume_1_volume_used_2");
    ///<summary>Battery level</summary>
    public NumericSensorEntity DoorOpeningSensorBatteryLevel => new(_haContext, "sensor.door_opening_sensor_battery_level");
    ///<summary>Charging status</summary>
    public NumericSensorEntity DoorOpeningSensorChargingStatus => new(_haContext, "sensor.door_opening_sensor_charging_status");
    ///<summary>Charging status</summary>
    public NumericSensorEntity DoorOpeningSensorChargingStatus2 => new(_haContext, "sensor.door_opening_sensor_charging_status_2");
    ///<summary>Maximum capacity</summary>
    public NumericSensorEntity DoorOpeningSensorMaximumCapacity => new(_haContext, "sensor.door_opening_sensor_maximum_capacity");
    ///<summary>Maximum capacity</summary>
    public NumericSensorEntity DoorOpeningSensorMaximumCapacity2 => new(_haContext, "sensor.door_opening_sensor_maximum_capacity_2");
    ///<summary>Recharge or replace</summary>
    public NumericSensorEntity DoorOpeningSensorRechargeOrReplace => new(_haContext, "sensor.door_opening_sensor_recharge_or_replace");
    ///<summary>Recharge or replace</summary>
    public NumericSensorEntity DoorOpeningSensorRechargeOrReplace2 => new(_haContext, "sensor.door_opening_sensor_recharge_or_replace_2");
    ///<summary>Temperature</summary>
    public NumericSensorEntity DoorOpeningSensorTemperature => new(_haContext, "sensor.door_opening_sensor_temperature");
    ///<summary>Temperature</summary>
    public NumericSensorEntity DoorOpeningSensorTemperature2 => new(_haContext, "sensor.door_opening_sensor_temperature_2");
    ///<summary>Dwains Dashboard Latest version</summary>
    public NumericSensorEntity DwainsDashboardLatestVersion => new(_haContext, "sensor.dwains_dashboard_latest_version");
    ///<summary>Elias OnePlus  Sleep Segment</summary>
    public NumericSensorEntity EliasOneplusSchlafabschnitt => new(_haContext, "sensor.elias_oneplus_schlafabschnitt");
    ///<summary>energy_per_day</summary>
    public NumericSensorEntity EnergyPerDay => new(_haContext, "sensor.energy_per_day");
    ///<summary>energy_per_hour</summary>
    public NumericSensorEntity EnergyPerHour => new(_haContext, "sensor.energy_per_hour");
    ///<summary>energy_per_hour2</summary>
    public NumericSensorEntity EnergyPerHour2 => new(_haContext, "sensor.energy_per_hour2");
    ///<summary>energy_per_month</summary>
    public NumericSensorEntity EnergyPerMonth => new(_haContext, "sensor.energy_per_month");
    ///<summary>energy_per_week</summary>
    public NumericSensorEntity EnergyPerWeek => new(_haContext, "sensor.energy_per_week");
    ///<summary>Test Sensor - MQTT</summary>
    public NumericSensorEntity EntitiesTestMqtt => new(_haContext, "sensor.entities_test_mqtt");
    ///<summary>Test Sensor - MQTT</summary>
    public NumericSensorEntity EntitiesTest2Mqtt => new(_haContext, "sensor.entities_test2_mqtt");
    ///<summary>Enyaq Battery level</summary>
    public NumericSensorEntity EnyaqBatteryLevel => new(_haContext, "sensor.enyaq_battery_level");
    ///<summary>Enyaq Charger max ampere</summary>
    public NumericSensorEntity EnyaqChargerMaxAmpere => new(_haContext, "sensor.enyaq_charger_max_ampere");
    ///<summary>Enyaq Charging Power</summary>
    public NumericSensorEntity EnyaqChargingPower => new(_haContext, "sensor.enyaq_charging_power");
    ///<summary>Enyaq Charging rate</summary>
    public NumericSensorEntity EnyaqChargingRate => new(_haContext, "sensor.enyaq_charging_rate");
    ///<summary>Enyaq Charging time left</summary>
    public NumericSensorEntity EnyaqChargingTimeLeft => new(_haContext, "sensor.enyaq_charging_time_left");
    ///<summary>Enyaq Climatisation target temperature</summary>
    public NumericSensorEntity EnyaqClimatisationTargetTemperature => new(_haContext, "sensor.enyaq_climatisation_target_temperature");
    ///<summary>Enyaq Climatisation time left</summary>
    public NumericSensorEntity EnyaqClimatisationTimeLeft => new(_haContext, "sensor.enyaq_climatisation_time_left");
    ///<summary>Enyaq Electric range</summary>
    public NumericSensorEntity EnyaqElectricRange => new(_haContext, "sensor.enyaq_electric_range");
    ///<summary>Enyaq Minimum charge level</summary>
    public NumericSensorEntity EnyaqMinimumChargeLevel => new(_haContext, "sensor.enyaq_minimum_charge_level");
    ///<summary>Enyaq Odometer</summary>
    public NumericSensorEntity EnyaqOdometer => new(_haContext, "sensor.enyaq_odometer");
    ///<summary>EPEX Spot at Average Price</summary>
    public NumericSensorEntity EpexSpotAtAveragePrice => new(_haContext, "sensor.epex_spot_at_average_price");
    ///<summary>EPEX Spot at Highest Price</summary>
    public NumericSensorEntity EpexSpotAtHighestPrice => new(_haContext, "sensor.epex_spot_at_highest_price");
    ///<summary>EPEX Spot at Lowest Price</summary>
    public NumericSensorEntity EpexSpotAtLowestPrice => new(_haContext, "sensor.epex_spot_at_lowest_price");
    ///<summary>EPEX Spot at Price</summary>
    public NumericSensorEntity EpexSpotAtPrice => new(_haContext, "sensor.epex_spot_at_price");
    ///<summary>epex_spot_at_price_ct_per_kwh</summary>
    public NumericSensorEntity EpexSpotAtPriceCtPerKwh => new(_haContext, "sensor.epex_spot_at_price_ct_per_kwh");
    ///<summary>Fibaro Door 2: Battery level</summary>
    public NumericSensorEntity FibaroDoor2BatteryLevel => new(_haContext, "sensor.fibaro_door_2_battery_level");
    ///<summary>Galaxy Watch4 Classic Battery Level</summary>
    public NumericSensorEntity GalaxyWatch4ClassicBatteryLevel => new(_haContext, "sensor.galaxy_watch4_classic_battery_level");
    ///<summary>Galaxy Watch4 Classic Battery Power</summary>
    public NumericSensorEntity GalaxyWatch4ClassicBatteryPower => new(_haContext, "sensor.galaxy_watch4_classic_battery_power");
    ///<summary>Galaxy Watch4 Classic Battery Temperature</summary>
    public NumericSensorEntity GalaxyWatch4ClassicBatteryTemperature => new(_haContext, "sensor.galaxy_watch4_classic_battery_temperature");
    ///<summary>Elias OnePlus  Battery Level</summary>
    public NumericSensorEntity Gm1913Akkufullstand => new(_haContext, "sensor.gm1913_akkufullstand");
    ///<summary>Elias OnePlus  Active Notification Count</summary>
    public NumericSensorEntity Gm1913AnzahlAktiverBenachrichtigungen => new(_haContext, "sensor.gm1913_anzahl_aktiver_benachrichtigungen");
    ///<summary>Elias OnePlus  App Memory</summary>
    public NumericSensorEntity Gm1913AppSpeicher => new(_haContext, "sensor.gm1913_app_speicher");
    ///<summary>Elias OnePlus  Battery Temperature</summary>
    public NumericSensorEntity Gm1913Batterietemperatur => new(_haContext, "sensor.gm1913_batterietemperatur");
    ///<summary>GM1913 Battery Level</summary>
    public NumericSensorEntity Gm1913BatteryLevel => new(_haContext, "sensor.gm1913_battery_level");
    ///<summary>GM1913 Battery Power</summary>
    public NumericSensorEntity Gm1913BatteryPower => new(_haContext, "sensor.gm1913_battery_power");
    ///<summary>GM1913 Battery Temperature</summary>
    public NumericSensorEntity Gm1913BatteryTemperature => new(_haContext, "sensor.gm1913_battery_temperature");
    ///<summary>Elias OnePlus  Bluetooth Connection</summary>
    public NumericSensorEntity Gm1913BluetoothVerbindung => new(_haContext, "sensor.gm1913_bluetooth_verbindung");
    ///<summary>Elias OnePlus  App Tx GB</summary>
    public NumericSensorEntity Gm1913EmpfangeneDatenViaAppGb => new(_haContext, "sensor.gm1913_empfangene_daten_via_app_gb");
    ///<summary>Elias OnePlus  External Storage</summary>
    public NumericSensorEntity Gm1913ExternerSpeicher => new(_haContext, "sensor.gm1913_externer_speicher");
    ///<summary>Elias OnePlus  App Rx GB</summary>
    public NumericSensorEntity Gm1913GesendeteDatenViaAppGb => new(_haContext, "sensor.gm1913_gesendete_daten_via_app_gb");
    ///<summary>Elias OnePlus  Light Sensor</summary>
    public NumericSensorEntity Gm1913Helligkeitssensor => new(_haContext, "sensor.gm1913_helligkeitssensor");
    ///<summary>Elias OnePlus  Total Rx GB</summary>
    public NumericSensorEntity Gm1913InsgesamtEmpfangeneDatenGb => new(_haContext, "sensor.gm1913_insgesamt_empfangene_daten_gb");
    ///<summary>Elias OnePlus  Total Tx GB</summary>
    public NumericSensorEntity Gm1913InsgesamtGesendetGb => new(_haContext, "sensor.gm1913_insgesamt_gesendet_gb");
    ///<summary>Elias OnePlus  Internal Storage</summary>
    public NumericSensorEntity Gm1913InternerSpeicher => new(_haContext, "sensor.gm1913_interner_speicher");
    ///<summary>Elias OnePlus  Steps Sensor</summary>
    public NumericSensorEntity Gm1913Schrittsensor => new(_haContext, "sensor.gm1913_schrittsensor");
    ///<summary>Elias OnePlus  Sleep Confidence</summary>
    public NumericSensorEntity Gm1913SicherheitDerSchlaferkennung => new(_haContext, "sensor.gm1913_sicherheit_der_schlaferkennung");
    ///<summary>Elias OnePlus  WiFi Frequency</summary>
    public NumericSensorEntity Gm1913WlanFrequenz => new(_haContext, "sensor.gm1913_wlan_frequenz");
    ///<summary>Elias OnePlus  WiFi Link Speed</summary>
    public NumericSensorEntity Gm1913WlanGeschwindigkeit => new(_haContext, "sensor.gm1913_wlan_geschwindigkeit");
    ///<summary>Elias OnePlus  WiFi Signal Strength</summary>
    public NumericSensorEntity Gm1913WlanSignalstarke => new(_haContext, "sensor.gm1913_wlan_signalstarke");
    ///<summary>Maximum allowed current</summary>
    public NumericSensorEntity GoEcharger203597Acu => new(_haContext, "sensor.go_echarger_203597_acu");
    ///<summary>Maximum current limit</summary>
    public NumericSensorEntity GoEcharger203597Ama => new(_haContext, "sensor.go_echarger_203597_ama");
    ///<summary>Current temperature limit</summary>
    public NumericSensorEntity GoEcharger203597Amt => new(_haContext, "sensor.go_echarger_203597_amt");
    ///<summary>Automatic stop energy</summary>
    public NumericSensorEntity GoEcharger203597Ate => new(_haContext, "sensor.go_echarger_203597_ate");
    ///<summary>Automatic stop time</summary>
    public NumericSensorEntity GoEcharger203597Att => new(_haContext, "sensor.go_echarger_203597_att");
    ///<summary>Charged energy card 1</summary>
    public NumericSensorEntity GoEcharger203597Cards => new(_haContext, "sensor.go_echarger_203597_cards");
    ///<summary>Charging duration</summary>
    public NumericSensorEntity GoEcharger203597Cdi => new(_haContext, "sensor.go_echarger_203597_cdi");
    ///<summary>Charging energy limit</summary>
    public NumericSensorEntity GoEcharger203597Dwo => new(_haContext, "sensor.go_echarger_203597_dwo");
    ///<summary>Total energy</summary>
    public NumericSensorEntity GoEcharger203597Eto => new(_haContext, "sensor.go_echarger_203597_eto");
    ///<summary>Last car state changed from charging</summary>
    public NumericSensorEntity GoEcharger203597Lccfc => new(_haContext, "sensor.go_echarger_203597_lccfc");
    ///<summary>Last car state changed from idle</summary>
    public NumericSensorEntity GoEcharger203597Lccfi => new(_haContext, "sensor.go_echarger_203597_lccfi");
    ///<summary>Last car state changed to charging</summary>
    public NumericSensorEntity GoEcharger203597Lcctc => new(_haContext, "sensor.go_echarger_203597_lcctc");
    ///<summary>Load balancing available current</summary>
    public NumericSensorEntity GoEcharger203597Loa => new(_haContext, "sensor.go_echarger_203597_loa");
    ///<summary>Minimum charging current</summary>
    public NumericSensorEntity GoEcharger203597Mca => new(_haContext, "sensor.go_echarger_203597_mca");
    ///<summary>Voltage L1</summary>
    public NumericSensorEntity GoEcharger203597Nrg => new(_haContext, "sensor.go_echarger_203597_nrg");
    ///<summary>Power L3</summary>
    public NumericSensorEntity GoEcharger203597Nrg10 => new(_haContext, "sensor.go_echarger_203597_nrg_10");
    ///<summary>Power N</summary>
    public NumericSensorEntity GoEcharger203597Nrg11 => new(_haContext, "sensor.go_echarger_203597_nrg_11");
    ///<summary>Current power</summary>
    public NumericSensorEntity GoEcharger203597Nrg12 => new(_haContext, "sensor.go_echarger_203597_nrg_12");
    ///<summary>Power factor L1</summary>
    public NumericSensorEntity GoEcharger203597Nrg13 => new(_haContext, "sensor.go_echarger_203597_nrg_13");
    ///<summary>Power factor L2</summary>
    public NumericSensorEntity GoEcharger203597Nrg14 => new(_haContext, "sensor.go_echarger_203597_nrg_14");
    ///<summary>Power factor L3</summary>
    public NumericSensorEntity GoEcharger203597Nrg15 => new(_haContext, "sensor.go_echarger_203597_nrg_15");
    ///<summary>Power factor N</summary>
    public NumericSensorEntity GoEcharger203597Nrg16 => new(_haContext, "sensor.go_echarger_203597_nrg_16");
    ///<summary>Voltage L2</summary>
    public NumericSensorEntity GoEcharger203597Nrg2 => new(_haContext, "sensor.go_echarger_203597_nrg_2");
    ///<summary>Voltage L3</summary>
    public NumericSensorEntity GoEcharger203597Nrg3 => new(_haContext, "sensor.go_echarger_203597_nrg_3");
    ///<summary>Voltage N</summary>
    public NumericSensorEntity GoEcharger203597Nrg4 => new(_haContext, "sensor.go_echarger_203597_nrg_4");
    ///<summary>Current L1</summary>
    public NumericSensorEntity GoEcharger203597Nrg5 => new(_haContext, "sensor.go_echarger_203597_nrg_5");
    ///<summary>Current L2</summary>
    public NumericSensorEntity GoEcharger203597Nrg6 => new(_haContext, "sensor.go_echarger_203597_nrg_6");
    ///<summary>Current L3</summary>
    public NumericSensorEntity GoEcharger203597Nrg7 => new(_haContext, "sensor.go_echarger_203597_nrg_7");
    ///<summary>Power L1</summary>
    public NumericSensorEntity GoEcharger203597Nrg8 => new(_haContext, "sensor.go_echarger_203597_nrg_8");
    ///<summary>Power L2</summary>
    public NumericSensorEntity GoEcharger203597Nrg9 => new(_haContext, "sensor.go_echarger_203597_nrg_9");
    ///<summary>Three phase switch level</summary>
    public NumericSensorEntity GoEcharger203597Spl3 => new(_haContext, "sensor.go_echarger_203597_spl3");
    ///<summary>Temperature sensor 1</summary>
    public NumericSensorEntity GoEcharger203597Tma => new(_haContext, "sensor.go_echarger_203597_tma");
    ///<summary>Temperature sensor 2</summary>
    public NumericSensorEntity GoEcharger203597Tma2 => new(_haContext, "sensor.go_echarger_203597_tma_2");
    ///<summary>Total power average</summary>
    public NumericSensorEntity GoEcharger203597Tpa => new(_haContext, "sensor.go_echarger_203597_tpa");
    ///<summary>Charged energy</summary>
    public NumericSensorEntity GoEcharger203597Wh => new(_haContext, "sensor.go_echarger_203597_wh");
    ///<summary>adapter</summary>
    public NumericSensorEntity GoechargerWallboxAdapter => new(_haContext, "sensor.goecharger_wallbox_adapter");
    ///<summary>Cable lock mode</summary>
    public NumericSensorEntity GoechargerWallboxCableLockMode => new(_haContext, "sensor.goecharger_wallbox_cable_lock_mode");
    ///<summary>Cable max current</summary>
    public NumericSensorEntity GoechargerWallboxCableMaxCurrent => new(_haContext, "sensor.goecharger_wallbox_cable_max_current");
    ///<summary>Status</summary>
    public NumericSensorEntity GoechargerWallboxCarStatus => new(_haContext, "sensor.goecharger_wallbox_car_status");
    ///<summary>Charge limit</summary>
    public NumericSensorEntity GoechargerWallboxChargeLimit => new(_haContext, "sensor.goecharger_wallbox_charge_limit");
    ///<summary>Charger absolute max current setting</summary>
    public NumericSensorEntity GoechargerWallboxChargerAbsoluteMaxCurrent => new(_haContext, "sensor.goecharger_wallbox_charger_absolute_max_current");
    ///<summary>charger_access</summary>
    public NumericSensorEntity GoechargerWallboxChargerAccess => new(_haContext, "sensor.goecharger_wallbox_charger_access");
    ///<summary>charger_err</summary>
    public NumericSensorEntity GoechargerWallboxChargerErr => new(_haContext, "sensor.goecharger_wallbox_charger_err");
    ///<summary>Charger max current setting</summary>
    public NumericSensorEntity GoechargerWallboxChargerMaxCurrent => new(_haContext, "sensor.goecharger_wallbox_charger_max_current");
    ///<summary>Charger Temp</summary>
    public NumericSensorEntity GoechargerWallboxChargerTemp => new(_haContext, "sensor.goecharger_wallbox_charger_temp");
    ///<summary>Charger Temp 0</summary>
    public NumericSensorEntity GoechargerWallboxChargerTemp0 => new(_haContext, "sensor.goecharger_wallbox_charger_temp0");
    ///<summary>Charger Temp 1</summary>
    public NumericSensorEntity GoechargerWallboxChargerTemp1 => new(_haContext, "sensor.goecharger_wallbox_charger_temp1");
    ///<summary>Charger Temp 2</summary>
    public NumericSensorEntity GoechargerWallboxChargerTemp2 => new(_haContext, "sensor.goecharger_wallbox_charger_temp2");
    ///<summary>Charger Temp 3</summary>
    public NumericSensorEntity GoechargerWallboxChargerTemp3 => new(_haContext, "sensor.goecharger_wallbox_charger_temp3");
    ///<summary>Current Session charged</summary>
    public NumericSensorEntity GoechargerWallboxCurrentSessionChargedEnergy => new(_haContext, "sensor.goecharger_wallbox_current_session_charged_energy");
    ///<summary>Current Session charged corrected</summary>
    public NumericSensorEntity GoechargerWallboxCurrentSessionChargedEnergyCorrected => new(_haContext, "sensor.goecharger_wallbox_current_session_charged_energy_corrected");
    ///<summary>Total Charged</summary>
    public NumericSensorEntity GoechargerWallboxEnergyTotal => new(_haContext, "sensor.goecharger_wallbox_energy_total");
    ///<summary>Total Charged corrected</summary>
    public NumericSensorEntity GoechargerWallboxEnergyTotalCorrected => new(_haContext, "sensor.goecharger_wallbox_energy_total_corrected");
    ///<summary>firmware</summary>
    public NumericSensorEntity GoechargerWallboxFirmware => new(_haContext, "sensor.goecharger_wallbox_firmware");
    ///<summary>Current L1</summary>
    public NumericSensorEntity GoechargerWallboxIL1 => new(_haContext, "sensor.goecharger_wallbox_i_l1");
    ///<summary>Current L2</summary>
    public NumericSensorEntity GoechargerWallboxIL2 => new(_haContext, "sensor.goecharger_wallbox_i_l2");
    ///<summary>Current L3</summary>
    public NumericSensorEntity GoechargerWallboxIL3 => new(_haContext, "sensor.goecharger_wallbox_i_l3");
    ///<summary>Power factor L1</summary>
    public NumericSensorEntity GoechargerWallboxLfL1 => new(_haContext, "sensor.goecharger_wallbox_lf_l1");
    ///<summary>Power factor L2</summary>
    public NumericSensorEntity GoechargerWallboxLfL2 => new(_haContext, "sensor.goecharger_wallbox_lf_l2");
    ///<summary>Power factor L3</summary>
    public NumericSensorEntity GoechargerWallboxLfL3 => new(_haContext, "sensor.goecharger_wallbox_lf_l3");
    ///<summary>Loadfactor N</summary>
    public NumericSensorEntity GoechargerWallboxLfN => new(_haContext, "sensor.goecharger_wallbox_lf_n");
    ///<summary>Power All</summary>
    public NumericSensorEntity GoechargerWallboxPAll => new(_haContext, "sensor.goecharger_wallbox_p_all");
    ///<summary>Power L1</summary>
    public NumericSensorEntity GoechargerWallboxPL1 => new(_haContext, "sensor.goecharger_wallbox_p_l1");
    ///<summary>Power L2</summary>
    public NumericSensorEntity GoechargerWallboxPL2 => new(_haContext, "sensor.goecharger_wallbox_p_l2");
    ///<summary>Power L3</summary>
    public NumericSensorEntity GoechargerWallboxPL3 => new(_haContext, "sensor.goecharger_wallbox_p_l3");
    ///<summary>Power N</summary>
    public NumericSensorEntity GoechargerWallboxPN => new(_haContext, "sensor.goecharger_wallbox_p_n");
    ///<summary>post_contactor_l1</summary>
    public NumericSensorEntity GoechargerWallboxPostContactorL1 => new(_haContext, "sensor.goecharger_wallbox_post_contactor_l1");
    ///<summary>post_contactor_l2</summary>
    public NumericSensorEntity GoechargerWallboxPostContactorL2 => new(_haContext, "sensor.goecharger_wallbox_post_contactor_l2");
    ///<summary>post_contactor_l3</summary>
    public NumericSensorEntity GoechargerWallboxPostContactorL3 => new(_haContext, "sensor.goecharger_wallbox_post_contactor_l3");
    ///<summary>pre_contactor_l1</summary>
    public NumericSensorEntity GoechargerWallboxPreContactorL1 => new(_haContext, "sensor.goecharger_wallbox_pre_contactor_l1");
    ///<summary>pre_contactor_l2</summary>
    public NumericSensorEntity GoechargerWallboxPreContactorL2 => new(_haContext, "sensor.goecharger_wallbox_pre_contactor_l2");
    ///<summary>pre_contactor_l3</summary>
    public NumericSensorEntity GoechargerWallboxPreContactorL3 => new(_haContext, "sensor.goecharger_wallbox_pre_contactor_l3");
    ///<summary>serial_number</summary>
    public NumericSensorEntity GoechargerWallboxSerialNumber => new(_haContext, "sensor.goecharger_wallbox_serial_number");
    ///<summary>stop_mode</summary>
    public NumericSensorEntity GoechargerWallboxStopMode => new(_haContext, "sensor.goecharger_wallbox_stop_mode");
    ///<summary>timezone_dst_offset</summary>
    public NumericSensorEntity GoechargerWallboxTimezoneDstOffset => new(_haContext, "sensor.goecharger_wallbox_timezone_dst_offset");
    ///<summary>timezone_offset</summary>
    public NumericSensorEntity GoechargerWallboxTimezoneOffset => new(_haContext, "sensor.goecharger_wallbox_timezone_offset");
    ///<summary>Voltage L1</summary>
    public NumericSensorEntity GoechargerWallboxUL1 => new(_haContext, "sensor.goecharger_wallbox_u_l1");
    ///<summary>Voltage L2</summary>
    public NumericSensorEntity GoechargerWallboxUL2 => new(_haContext, "sensor.goecharger_wallbox_u_l2");
    ///<summary>Voltage L3</summary>
    public NumericSensorEntity GoechargerWallboxUL3 => new(_haContext, "sensor.goecharger_wallbox_u_l3");
    ///<summary>Voltage N</summary>
    public NumericSensorEntity GoechargerWallboxUN => new(_haContext, "sensor.goecharger_wallbox_u_n");
    ///<summary>Card used</summary>
    public NumericSensorEntity GoechargerWallboxUnlockedByCard => new(_haContext, "sensor.goecharger_wallbox_unlocked_by_card");
    ///<summary>wifi</summary>
    public NumericSensorEntity GoechargerWallboxWifi => new(_haContext, "sensor.goecharger_wallbox_wifi");
    ///<summary>wifi_enabled</summary>
    public NumericSensorEntity GoechargerWallboxWifiEnabled => new(_haContext, "sensor.goecharger_wallbox_wifi_enabled");
    ///<summary>wifi_ssid</summary>
    public NumericSensorEntity GoechargerWallboxWifiSsid => new(_haContext, "sensor.goecharger_wallbox_wifi_ssid");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>Heizkörper energy</summary>
    public NumericSensorEntity HeizkorperEnergy => new(_haContext, "sensor.heizkorper_energy");
    ///<summary>Heizkörper power</summary>
    public NumericSensorEntity HeizkorperPower => new(_haContext, "sensor.heizkorper_power");
    ///<summary>Thomas Handy Battery Level</summary>
    public NumericSensorEntity HomeAssistantBlueAkkufullstand => new(_haContext, "sensor.home_assistant_blue_akkufullstand");
    ///<summary>Thomas Handy Pressure Sensor</summary>
    public NumericSensorEntity HomeAssistantBlueDrucksensor => new(_haContext, "sensor.home_assistant_blue_drucksensor");
    ///<summary>Thomas Handy Light Sensor</summary>
    public NumericSensorEntity HomeAssistantBlueHelligkeitssensor => new(_haContext, "sensor.home_assistant_blue_helligkeitssensor");
    ///<summary>Home Cloud ceiling</summary>
    public NumericSensorEntity HomeCloudCeiling => new(_haContext, "sensor.home_cloud_ceiling");
    ///<summary>Home Precipitation</summary>
    public NumericSensorEntity HomePrecipitation => new(_haContext, "sensor.home_precipitation");
    ///<summary>Home RealFeel temperature</summary>
    public NumericSensorEntity HomeRealfeelTemperature => new(_haContext, "sensor.home_realfeel_temperature");
    ///<summary>Home UV index</summary>
    public NumericSensorEntity HomeUvIndex => new(_haContext, "sensor.home_uv_index");
    ///<summary>Home Wind</summary>
    public NumericSensorEntity HomeWind => new(_haContext, "sensor.home_wind");
    ///<summary>Dimmer Küche Battery</summary>
    public NumericSensorEntity HueDimmerSwitch1Battery => new(_haContext, "sensor.hue_dimmer_switch_1_battery");
    ///<summary>Dimmer Galerie Battery</summary>
    public NumericSensorEntity HueDimmerSwitch1Battery2 => new(_haContext, "sensor.hue_dimmer_switch_1_battery_2");
    ///<summary>Jugend Badezimmer dimmer switch Battery</summary>
    public NumericSensorEntity HueDimmerSwitch1Battery3 => new(_haContext, "sensor.hue_dimmer_switch_1_battery_3");
    ///<summary>Badezimmer switch Battery</summary>
    public NumericSensorEntity HueDimmerSwitch1Battery4 => new(_haContext, "sensor.hue_dimmer_switch_1_battery_4");
    ///<summary>Jugend Vorraum Sensor Battery</summary>
    public NumericSensorEntity HueMotionSensor1Battery => new(_haContext, "sensor.hue_motion_sensor_1_battery");
    ///<summary>Stiegen motion sensor Battery</summary>
    public NumericSensorEntity HueMotionSensor1Battery2 => new(_haContext, "sensor.hue_motion_sensor_1_battery_2");
    ///<summary>Galerie motion sensor Battery</summary>
    public NumericSensorEntity HueMotionSensor1Battery3 => new(_haContext, "sensor.hue_motion_sensor_1_battery_3");
    ///<summary>Hue motion sensor WC Battery</summary>
    public NumericSensorEntity HueMotionSensor1Battery4 => new(_haContext, "sensor.hue_motion_sensor_1_battery_4");
    ///<summary>Hue motion sensor Schrankdg Battery</summary>
    public NumericSensorEntity HueMotionSensor1Battery5 => new(_haContext, "sensor.hue_motion_sensor_1_battery_5");
    ///<summary>Jugend Vorraum Sensor Illuminance</summary>
    public NumericSensorEntity HueMotionSensor1Illuminance => new(_haContext, "sensor.hue_motion_sensor_1_illuminance");
    ///<summary>Stiegen motion sensor Illuminance</summary>
    public NumericSensorEntity HueMotionSensor1Illuminance2 => new(_haContext, "sensor.hue_motion_sensor_1_illuminance_2");
    ///<summary>Galerie motion sensor Illuminance</summary>
    public NumericSensorEntity HueMotionSensor1Illuminance3 => new(_haContext, "sensor.hue_motion_sensor_1_illuminance_3");
    ///<summary>Hue motion sensor WC Illuminance</summary>
    public NumericSensorEntity HueMotionSensor1Illuminance4 => new(_haContext, "sensor.hue_motion_sensor_1_illuminance_4");
    ///<summary>Hue motion sensor Schrankdg Illuminance</summary>
    public NumericSensorEntity HueMotionSensor1Illuminance5 => new(_haContext, "sensor.hue_motion_sensor_1_illuminance_5");
    ///<summary>Jugend Vorraum Sensor Temperature</summary>
    public NumericSensorEntity HueMotionSensor1Temperature => new(_haContext, "sensor.hue_motion_sensor_1_temperature");
    ///<summary>Stiegen motion sensor Temperature</summary>
    public NumericSensorEntity HueMotionSensor1Temperature2 => new(_haContext, "sensor.hue_motion_sensor_1_temperature_2");
    ///<summary>Galerie motion sensor Temperature</summary>
    public NumericSensorEntity HueMotionSensor1Temperature3 => new(_haContext, "sensor.hue_motion_sensor_1_temperature_3");
    ///<summary>Hue motion sensor WC Temperature</summary>
    public NumericSensorEntity HueMotionSensor1Temperature4 => new(_haContext, "sensor.hue_motion_sensor_1_temperature_4");
    ///<summary>Hue motion sensor Schrankdg Temperature</summary>
    public NumericSensorEntity HueMotionSensor1Temperature5 => new(_haContext, "sensor.hue_motion_sensor_1_temperature_5");
    ///<summary>Bewegungsmelder Terasse Battery</summary>
    public NumericSensorEntity HueOutdoorMotionSensor1Battery => new(_haContext, "sensor.hue_outdoor_motion_sensor_1_battery");
    ///<summary>Bewegungsmelder Terasse Illuminance</summary>
    public NumericSensorEntity HueOutdoorMotionSensor1Illuminance => new(_haContext, "sensor.hue_outdoor_motion_sensor_1_illuminance");
    ///<summary>Bewegungsmelder Terasse Temperature</summary>
    public NumericSensorEntity HueOutdoorMotionSensor1Temperature => new(_haContext, "sensor.hue_outdoor_motion_sensor_1_temperature");
    ///<summary>Jakob smart button Battery</summary>
    public NumericSensorEntity HueSmartButton1Battery => new(_haContext, "sensor.hue_smart_button_1_battery");
    ///<summary>Elias Smart Button Battery</summary>
    public NumericSensorEntity HueSmartButton1Battery2 => new(_haContext, "sensor.hue_smart_button_1_battery_2");
    ///<summary>Küche wall switch Battery</summary>
    public NumericSensorEntity HueWallSwitchModule1Battery => new(_haContext, "sensor.hue_wall_switch_module_1_battery");
    ///<summary>Schlafzimmer wall switch Battery</summary>
    public NumericSensorEntity HueWallSwitchModule1Battery2 => new(_haContext, "sensor.hue_wall_switch_module_1_battery_2");
    ///<summary>Küche wall switch 2 Battery</summary>
    public NumericSensorEntity HueWallSwitchModule1Battery3 => new(_haContext, "sensor.hue_wall_switch_module_1_battery_3");
    ///<summary>Mähphisto battery level</summary>
    public NumericSensorEntity MahphistoBatteryLevel => new(_haContext, "sensor.mahphisto_battery_level");
    ///<summary>Motion 1: Acceleration X-axis</summary>
    public NumericSensorEntity Motion1AccelerationXAxis => new(_haContext, "sensor.motion_1_acceleration_x_axis");
    ///<summary>Motion 1: Acceleration Y-axis</summary>
    public NumericSensorEntity Motion1AccelerationYAxis => new(_haContext, "sensor.motion_1_acceleration_y_axis");
    ///<summary>Motion 1: Acceleration Z-axis</summary>
    public NumericSensorEntity Motion1AccelerationZAxis => new(_haContext, "sensor.motion_1_acceleration_z_axis");
    ///<summary>Motion 1: Air temperature</summary>
    public NumericSensorEntity Motion1AirTemperature => new(_haContext, "sensor.motion_1_air_temperature");
    ///<summary>Motion 1: Battery level</summary>
    public NumericSensorEntity Motion1BatteryLevel => new(_haContext, "sensor.motion_1_battery_level");
    ///<summary>Motion 1: Dew point</summary>
    public NumericSensorEntity Motion1DewPoint => new(_haContext, "sensor.motion_1_dew_point");
    ///<summary>Motion 1: Illuminance</summary>
    public NumericSensorEntity Motion1Illuminance => new(_haContext, "sensor.motion_1_illuminance");
    ///<summary>Motion 1: Particulate Matter 2.5</summary>
    public NumericSensorEntity Motion1ParticulateMatter25 => new(_haContext, "sensor.motion_1_particulate_matter_2_5");
    ///<summary>Motion 1: Tank capacity</summary>
    public NumericSensorEntity Motion1TankCapacity => new(_haContext, "sensor.motion_1_tank_capacity");
    ///<summary>Motion 2: Acceleration X-axis</summary>
    public NumericSensorEntity Motion2AccelerationXAxis => new(_haContext, "sensor.motion_2_acceleration_x_axis");
    ///<summary>Motion 2: Acceleration Y-axis</summary>
    public NumericSensorEntity Motion2AccelerationYAxis => new(_haContext, "sensor.motion_2_acceleration_y_axis");
    ///<summary>Motion 2: Acceleration Z-axis</summary>
    public NumericSensorEntity Motion2AccelerationZAxis => new(_haContext, "sensor.motion_2_acceleration_z_axis");
    ///<summary>Motion 2: Air temperature</summary>
    public NumericSensorEntity Motion2AirTemperature => new(_haContext, "sensor.motion_2_air_temperature");
    ///<summary>Motion 2: Battery level</summary>
    public NumericSensorEntity Motion2BatteryLevel => new(_haContext, "sensor.motion_2_battery_level");
    ///<summary>Motion 2: Illuminance</summary>
    public NumericSensorEntity Motion2Illuminance => new(_haContext, "sensor.motion_2_illuminance");
    ///<summary>myfirstapp_test</summary>
    public NumericSensorEntity MyfirstappTest => new(_haContext, "sensor.myfirstapp_test");
    ///<summary>mytest_double</summary>
    public NumericSensorEntity MytestDouble => new(_haContext, "sensor.mytest_double");
    ///<summary>mytest_int</summary>
    public NumericSensorEntity MytestInt => new(_haContext, "sensor.mytest_int");
    ///<summary>nordpool_kwh_at_eur_3_10_02</summary>
    public NumericSensorEntity NordpoolKwhAtEur31002 => new(_haContext, "sensor.nordpool_kwh_at_eur_3_10_02");
    ///<summary>OpenWeatherMap Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapCloudCoverage => new(_haContext, "sensor.openweathermap_cloud_coverage");
    ///<summary>OpenWeatherMap Dew Point</summary>
    public NumericSensorEntity OpenweathermapDewPoint => new(_haContext, "sensor.openweathermap_dew_point");
    ///<summary>OpenWeatherMap Feels like temperature</summary>
    public NumericSensorEntity OpenweathermapFeelsLikeTemperature => new(_haContext, "sensor.openweathermap_feels_like_temperature");
    ///<summary>OpenWeatherMap Forecast Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapForecastCloudCoverage => new(_haContext, "sensor.openweathermap_forecast_cloud_coverage");
    ///<summary>OpenWeatherMap Forecast Precipitation</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitation => new(_haContext, "sensor.openweathermap_forecast_precipitation");
    ///<summary>OpenWeatherMap Forecast Precipitation probability</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitationProbability => new(_haContext, "sensor.openweathermap_forecast_precipitation_probability");
    ///<summary>OpenWeatherMap Forecast Pressure</summary>
    public NumericSensorEntity OpenweathermapForecastPressure => new(_haContext, "sensor.openweathermap_forecast_pressure");
    ///<summary>OpenWeatherMap Forecast Temperature</summary>
    public NumericSensorEntity OpenweathermapForecastTemperature => new(_haContext, "sensor.openweathermap_forecast_temperature");
    ///<summary>OpenWeatherMap Forecast Temperature Low</summary>
    public NumericSensorEntity OpenweathermapForecastTemperatureLow => new(_haContext, "sensor.openweathermap_forecast_temperature_low");
    ///<summary>OpenWeatherMap Forecast Wind bearing</summary>
    public NumericSensorEntity OpenweathermapForecastWindBearing => new(_haContext, "sensor.openweathermap_forecast_wind_bearing");
    ///<summary>OpenWeatherMap Forecast Wind speed</summary>
    public NumericSensorEntity OpenweathermapForecastWindSpeed => new(_haContext, "sensor.openweathermap_forecast_wind_speed");
    ///<summary>OpenWeatherMap Humidity</summary>
    public NumericSensorEntity OpenweathermapHumidity => new(_haContext, "sensor.openweathermap_humidity");
    ///<summary>OpenWeatherMap Pressure</summary>
    public NumericSensorEntity OpenweathermapPressure => new(_haContext, "sensor.openweathermap_pressure");
    ///<summary>OpenWeatherMap Rain</summary>
    public NumericSensorEntity OpenweathermapRain => new(_haContext, "sensor.openweathermap_rain");
    ///<summary>OpenWeatherMap Snow</summary>
    public NumericSensorEntity OpenweathermapSnow => new(_haContext, "sensor.openweathermap_snow");
    ///<summary>OpenWeatherMap Temperature</summary>
    public NumericSensorEntity OpenweathermapTemperature => new(_haContext, "sensor.openweathermap_temperature");
    ///<summary>OpenWeatherMap UV Index</summary>
    public NumericSensorEntity OpenweathermapUvIndex => new(_haContext, "sensor.openweathermap_uv_index");
    ///<summary>OpenWeatherMap Visibility</summary>
    public NumericSensorEntity OpenweathermapVisibility => new(_haContext, "sensor.openweathermap_visibility");
    ///<summary>OpenWeatherMap Wind bearing</summary>
    public NumericSensorEntity OpenweathermapWindBearing => new(_haContext, "sensor.openweathermap_wind_bearing");
    ///<summary>OpenWeatherMap Wind speed</summary>
    public NumericSensorEntity OpenweathermapWindSpeed => new(_haContext, "sensor.openweathermap_wind_speed");
    ///<summary>Plex (DiskStation)</summary>
    public NumericSensorEntity PlexDiskstation => new(_haContext, "sensor.plex_diskstation");
    ///<summary>power_spent</summary>
    public NumericSensorEntity PowerSpent => new(_haContext, "sensor.power_spent");
    ///<summary>Powermeter Current</summary>
    public NumericSensorEntity PowermeterCurrent => new(_haContext, "sensor.powermeter_current");
    ///<summary>Powermeter Current Consumption</summary>
    public NumericSensorEntity PowermeterCurrentConsumption => new(_haContext, "sensor.powermeter_current_consumption");
    ///<summary>Powermeter Today&apos;s Consumption</summary>
    public NumericSensorEntity PowermeterTodaySConsumption => new(_haContext, "sensor.powermeter_today_s_consumption");
    ///<summary>Powermeter Total Consumption</summary>
    public NumericSensorEntity PowermeterTotalConsumption => new(_haContext, "sensor.powermeter_total_consumption");
    ///<summary>Powermeter Voltage</summary>
    public NumericSensorEntity PowermeterVoltage => new(_haContext, "sensor.powermeter_voltage");
    ///<summary>Powermeter Leistung</summary>
    public NumericSensorEntity PowermeterWatt => new(_haContext, "sensor.powermeter_watt");
    ///<summary>S22 Ultra Battery Level</summary>
    public NumericSensorEntity S22UltraBatteryLevel => new(_haContext, "sensor.s22_ultra_battery_level");
    ///<summary>S22 Ultra Battery Power</summary>
    public NumericSensorEntity S22UltraBatteryPower => new(_haContext, "sensor.s22_ultra_battery_power");
    ///<summary>S22 Ultra Battery Temperature</summary>
    public NumericSensorEntity S22UltraBatteryTemperature => new(_haContext, "sensor.s22_ultra_battery_temperature");
    ///<summary>Shelly Button 1 Battery</summary>
    public NumericSensorEntity ShellyButton1Battery => new(_haContext, "sensor.shelly_button_1_battery");
    ///<summary>Shelly Button 2 Battery</summary>
    public NumericSensorEntity ShellyButton2Battery => new(_haContext, "sensor.shelly_button_2_battery");
    ///<summary>Power</summary>
    public NumericSensorEntity ShellyColor1Power => new(_haContext, "sensor.shelly_color_1_power");
    ///<summary>RSSI</summary>
    public NumericSensorEntity ShellyColor1Rssi => new(_haContext, "sensor.shelly_color_1_rssi");
    ///<summary>Shelly Door 1 Battery</summary>
    public NumericSensorEntity ShellyDoor1Battery => new(_haContext, "sensor.shelly_door_1_battery");
    ///<summary>Shelly Door 1 Luminosity</summary>
    public NumericSensorEntity ShellyDoor1Luminosity => new(_haContext, "sensor.shelly_door_1_luminosity");
    ///<summary>Shelly Door 1 Temperature</summary>
    public NumericSensorEntity ShellyDoor1Temperature => new(_haContext, "sensor.shelly_door_1_temperature");
    ///<summary>Shelly Door 1 Tilt</summary>
    public NumericSensorEntity ShellyDoor1Tilt => new(_haContext, "sensor.shelly_door_1_tilt");
    ///<summary>Shelly Flood 1 Battery</summary>
    public NumericSensorEntity ShellyFlood1Battery => new(_haContext, "sensor.shelly_flood_1_battery");
    ///<summary>Shelly Flood 1 Temperature</summary>
    public NumericSensorEntity ShellyFlood1Temperature => new(_haContext, "sensor.shelly_flood_1_temperature");
    ///<summary>Shelly Motion 1 Battery</summary>
    public NumericSensorEntity ShellyMotion1Battery => new(_haContext, "sensor.shelly_motion_1_battery");
    ///<summary>Shelly Motion 1 Luminosity</summary>
    public NumericSensorEntity ShellyMotion1Luminosity => new(_haContext, "sensor.shelly_motion_1_luminosity");
    ///<summary>Shelly Plug 1 Energy</summary>
    public NumericSensorEntity ShellyPlug1Energy => new(_haContext, "sensor.shelly_plug_1_energy");
    ///<summary>Shelly Plug 1 Power</summary>
    public NumericSensorEntity ShellyPlug1Power => new(_haContext, "sensor.shelly_plug_1_power");
    ///<summary>Plug 1 rssi</summary>
    public NumericSensorEntity ShellyPlug1Rssi => new(_haContext, "sensor.shelly_plug_1_rssi");
    ///<summary>Shelly Temperature 1 Battery</summary>
    public NumericSensorEntity ShellyTemperature1Battery => new(_haContext, "sensor.shelly_temperature_1_battery");
    ///<summary>Shelly Temperature 1 Humidity</summary>
    public NumericSensorEntity ShellyTemperature1Humidity => new(_haContext, "sensor.shelly_temperature_1_humidity");
    ///<summary>Shelly Temperature 1 Temperature</summary>
    public NumericSensorEntity ShellyTemperature1Temperature => new(_haContext, "sensor.shelly_temperature_1_temperature");
    ///<summary>Shelly Temperature 2 Battery</summary>
    public NumericSensorEntity ShellyTemperature2Battery => new(_haContext, "sensor.shelly_temperature_2_battery");
    ///<summary>Shelly Temperature 2 Humidity</summary>
    public NumericSensorEntity ShellyTemperature2Humidity => new(_haContext, "sensor.shelly_temperature_2_humidity");
    ///<summary>Shelly Temperature 2 Temperature</summary>
    public NumericSensorEntity ShellyTemperature2Temperature => new(_haContext, "sensor.shelly_temperature_2_temperature");
    ///<summary>Bulb Vintage 1 Power</summary>
    public NumericSensorEntity ShellyVintage1Power => new(_haContext, "sensor.shelly_vintage_1_power");
    ///<summary>Bulb Vintage 1 RSSI</summary>
    public NumericSensorEntity ShellyVintage1Rssi => new(_haContext, "sensor.shelly_vintage_1_rssi");
    ///<summary>Power</summary>
    public NumericSensorEntity ShellyWhite1Power => new(_haContext, "sensor.shelly_white_1_power");
    ///<summary>RSSI</summary>
    public NumericSensorEntity ShellyWhite1Rssi => new(_haContext, "sensor.shelly_white_1_rssi");
    ///<summary>Smart Switch: Electric Consumed [A]</summary>
    public NumericSensorEntity SmartSwitchElectricConsumedA => new(_haContext, "sensor.smart_switch_electric_consumed_a");
    ///<summary>Smart Switch: Electric Consumed [kWh]</summary>
    public NumericSensorEntity SmartSwitchElectricConsumedKwh => new(_haContext, "sensor.smart_switch_electric_consumed_kwh");
    ///<summary>Smart Switch: Electric Consumed [V]</summary>
    public NumericSensorEntity SmartSwitchElectricConsumedV => new(_haContext, "sensor.smart_switch_electric_consumed_v");
    ///<summary>Smart Switch: Electric Consumed [W]</summary>
    public NumericSensorEntity SmartSwitchElectricConsumedW => new(_haContext, "sensor.smart_switch_electric_consumed_w");
    ///<summary>SmartTag+ 1 Battery</summary>
    public NumericSensorEntity Smarttag1Battery => new(_haContext, "sensor.smarttag_1_battery");
    ///<summary>SmartTag+ 1 Volume</summary>
    public NumericSensorEntity Smarttag1Volume => new(_haContext, "sensor.smarttag_1_volume");
    ///<summary>SmartTag+ 2 Battery</summary>
    public NumericSensorEntity Smarttag2Battery => new(_haContext, "sensor.smarttag_2_battery");
    ///<summary>SmartTag+ 2 Volume</summary>
    public NumericSensorEntity Smarttag2Volume => new(_haContext, "sensor.smarttag_2_volume");
    ///<summary>SpeedTest Download</summary>
    public NumericSensorEntity SpeedtestDownload => new(_haContext, "sensor.speedtest_download");
    ///<summary>SpeedTest Ping</summary>
    public NumericSensorEntity SpeedtestPing => new(_haContext, "sensor.speedtest_ping");
    ///<summary>SpeedTest Upload</summary>
    public NumericSensorEntity SpeedtestUpload => new(_haContext, "sensor.speedtest_upload");
    ///<summary>Strip 3: Battery level</summary>
    public NumericSensorEntity Strip3BatteryLevel => new(_haContext, "sensor.strip_3_battery_level");
    ///<summary>Battery level</summary>
    public NumericSensorEntity StripsMazwBatteryLevel => new(_haContext, "sensor.strips_mazw_battery_level");
    ///<summary>Battery level</summary>
    public NumericSensorEntity StripsMazwBatteryLevel2 => new(_haContext, "sensor.strips_mazw_battery_level_2");
    ///<summary>Charging status</summary>
    public NumericSensorEntity StripsMazwChargingStatus => new(_haContext, "sensor.strips_mazw_charging_status");
    ///<summary>Charging status</summary>
    public NumericSensorEntity StripsMazwChargingStatus2 => new(_haContext, "sensor.strips_mazw_charging_status_2");
    ///<summary>Charging status</summary>
    public NumericSensorEntity StripsMazwChargingStatus3 => new(_haContext, "sensor.strips_mazw_charging_status_3");
    ///<summary>Maximum capacity</summary>
    public NumericSensorEntity StripsMazwMaximumCapacity => new(_haContext, "sensor.strips_mazw_maximum_capacity");
    ///<summary>Maximum capacity</summary>
    public NumericSensorEntity StripsMazwMaximumCapacity2 => new(_haContext, "sensor.strips_mazw_maximum_capacity_2");
    ///<summary>Maximum capacity</summary>
    public NumericSensorEntity StripsMazwMaximumCapacity3 => new(_haContext, "sensor.strips_mazw_maximum_capacity_3");
    ///<summary>Recharge or replace</summary>
    public NumericSensorEntity StripsMazwRechargeOrReplace => new(_haContext, "sensor.strips_mazw_recharge_or_replace");
    ///<summary>Recharge or replace</summary>
    public NumericSensorEntity StripsMazwRechargeOrReplace2 => new(_haContext, "sensor.strips_mazw_recharge_or_replace_2");
    ///<summary>Recharge or replace</summary>
    public NumericSensorEntity StripsMazwRechargeOrReplace3 => new(_haContext, "sensor.strips_mazw_recharge_or_replace_3");
    ///<summary>Temperature</summary>
    public NumericSensorEntity StripsMazwTemperature => new(_haContext, "sensor.strips_mazw_temperature");
    ///<summary>Temperature</summary>
    public NumericSensorEntity StripsMazwTemperature2 => new(_haContext, "sensor.strips_mazw_temperature_2");
    ///<summary>Temperature</summary>
    public NumericSensorEntity StripsMazwTemperature3 => new(_haContext, "sensor.strips_mazw_temperature_3");
    ///<summary>Thomas Handy Active Notification Count</summary>
    public NumericSensorEntity ThomasHandyAnzahlAktiverBenachrichtigungen => new(_haContext, "sensor.thomas_handy_anzahl_aktiver_benachrichtigungen");
    ///<summary>Thomas Handy App Memory</summary>
    public NumericSensorEntity ThomasHandyAppSpeicher => new(_haContext, "sensor.thomas_handy_app_speicher");
    ///<summary>Thomas Handy Battery Temperature</summary>
    public NumericSensorEntity ThomasHandyBatterietemperatur => new(_haContext, "sensor.thomas_handy_batterietemperatur");
    ///<summary>Thomas Handy Bluetooth Connection</summary>
    public NumericSensorEntity ThomasHandyBluetoothVerbindung => new(_haContext, "sensor.thomas_handy_bluetooth_verbindung");
    ///<summary>Thomas Handy App Tx GB</summary>
    public NumericSensorEntity ThomasHandyEmpfangeneDatenViaAppGb => new(_haContext, "sensor.thomas_handy_empfangene_daten_via_app_gb");
    ///<summary>Thomas Handy External Storage</summary>
    public NumericSensorEntity ThomasHandyExternerSpeicher => new(_haContext, "sensor.thomas_handy_externer_speicher");
    ///<summary>Thomas Handy App Rx GB</summary>
    public NumericSensorEntity ThomasHandyGesendeteDatenViaAppGb => new(_haContext, "sensor.thomas_handy_gesendete_daten_via_app_gb");
    ///<summary>Thomas Handy Total Rx GB</summary>
    public NumericSensorEntity ThomasHandyInsgesamtEmpfangeneDatenGb => new(_haContext, "sensor.thomas_handy_insgesamt_empfangene_daten_gb");
    ///<summary>Thomas Handy Total Tx GB</summary>
    public NumericSensorEntity ThomasHandyInsgesamtGesendetGb => new(_haContext, "sensor.thomas_handy_insgesamt_gesendet_gb");
    ///<summary>Thomas Handy Internal Storage</summary>
    public NumericSensorEntity ThomasHandyInternerSpeicher => new(_haContext, "sensor.thomas_handy_interner_speicher");
    ///<summary>Thomas Handy Mobile Rx GB</summary>
    public NumericSensorEntity ThomasHandyMobileRxGb => new(_haContext, "sensor.thomas_handy_mobile_rx_gb");
    ///<summary>Thomas Handy Mobile Tx GB</summary>
    public NumericSensorEntity ThomasHandyMobileTxGb => new(_haContext, "sensor.thomas_handy_mobile_tx_gb");
    ///<summary>Thomas Handy Steps Sensor</summary>
    public NumericSensorEntity ThomasHandySchrittsensor => new(_haContext, "sensor.thomas_handy_schrittsensor");
    ///<summary>Thomas Handy Sleep Confidence</summary>
    public NumericSensorEntity ThomasHandySleepConfidence => new(_haContext, "sensor.thomas_handy_sleep_confidence");
    ///<summary>Thomas Handy Sleep Segment</summary>
    public NumericSensorEntity ThomasHandySleepSegment => new(_haContext, "sensor.thomas_handy_sleep_segment");
    ///<summary>Thomas Handy WiFi Frequency</summary>
    public NumericSensorEntity ThomasHandyWlanFrequenz => new(_haContext, "sensor.thomas_handy_wlan_frequenz");
    ///<summary>Thomas Handy WiFi Link Speed</summary>
    public NumericSensorEntity ThomasHandyWlanGeschwindigkeit => new(_haContext, "sensor.thomas_handy_wlan_geschwindigkeit");
    ///<summary>Thomas Handy WiFi Signal Strength</summary>
    public NumericSensorEntity ThomasHandyWlanSignalstarke => new(_haContext, "sensor.thomas_handy_wlan_signalstarke");
    ///<summary>Vacuum Filter Remaining Lifespan</summary>
    public NumericSensorEntity VacuumFilter => new(_haContext, "sensor.vacuum_filter");
    ///<summary>Verbrauch</summary>
    public NumericSensorEntity VerbundEnergy => new(_haContext, "sensor.verbund_energy");
    ///<summary>Frequenz</summary>
    public NumericSensorEntity VerbundFrequency => new(_haContext, "sensor.verbund_frequency");
    ///<summary>Aktuelle Leistung</summary>
    public NumericSensorEntity VerbundPower => new(_haContext, "sensor.verbund_power");
    ///<summary>Phase A</summary>
    public NumericSensorEntity VerbundPowerA => new(_haContext, "sensor.verbund_power_a");
    ///<summary>Phase B</summary>
    public NumericSensorEntity VerbundPowerB => new(_haContext, "sensor.verbund_power_b");
    ///<summary>Phase C</summary>
    public NumericSensorEntity VerbundPowerC => new(_haContext, "sensor.verbund_power_c");
    ///<summary>verbund_powermeter</summary>
    public NumericSensorEntity VerbundPowermeter => new(_haContext, "sensor.verbund_powermeter");
    ///<summary>vistapool_ph</summary>
    public NumericSensorEntity VistapoolPh => new(_haContext, "sensor.vistapool_ph");
    ///<summary>vistapool_rx</summary>
    public NumericSensorEntity VistapoolRx => new(_haContext, "sensor.vistapool_rx");
    ///<summary>vistapool_temperature</summary>
    public NumericSensorEntity VistapoolTemperature => new(_haContext, "sensor.vistapool_temperature");
    ///<summary>Wallbox Leistung</summary>
    public NumericSensorEntity WallboxPower => new(_haContext, "sensor.wallbox_power");
    ///<summary>Wasch­maschine deltaEnergy</summary>
    public NumericSensorEntity WaschmaschineDeltaenergy => new(_haContext, "sensor.waschmaschine_deltaenergy");
    ///<summary>Wasch­maschine deltaEnergy</summary>
    public NumericSensorEntity WaschmaschineDeltaenergy2 => new(_haContext, "sensor.waschmaschine_deltaenergy_2");
    ///<summary>Wasch­maschine Energy Meter</summary>
    public NumericSensorEntity WaschmaschineEnergy => new(_haContext, "sensor.waschmaschine_energy");
    ///<summary>Wasch­maschine energy</summary>
    public NumericSensorEntity WaschmaschineEnergy2 => new(_haContext, "sensor.waschmaschine_energy_2");
    ///<summary>Wasch­maschine energySaved</summary>
    public NumericSensorEntity WaschmaschineEnergysaved => new(_haContext, "sensor.waschmaschine_energysaved");
    ///<summary>Wasch­maschine energySaved</summary>
    public NumericSensorEntity WaschmaschineEnergysaved2 => new(_haContext, "sensor.waschmaschine_energysaved_2");
    ///<summary>Wasch­maschine Power Meter</summary>
    public NumericSensorEntity WaschmaschinePower => new(_haContext, "sensor.waschmaschine_power");
    ///<summary>Wasch­maschine power</summary>
    public NumericSensorEntity WaschmaschinePower2 => new(_haContext, "sensor.waschmaschine_power_2");
    ///<summary>Wasch­maschine powerEnergy</summary>
    public NumericSensorEntity WaschmaschinePowerenergy => new(_haContext, "sensor.waschmaschine_powerenergy");
    ///<summary>Wasch­maschine powerEnergy</summary>
    public NumericSensorEntity WaschmaschinePowerenergy2 => new(_haContext, "sensor.waschmaschine_powerenergy_2");
    ///<summary>Xiaomi Gateway Illuminance</summary>
    public NumericSensorEntity XiaomiGatewayIlluminance => new(_haContext, "sensor.xiaomi_gateway_illuminance");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>DiskStation2 Surveillance Station Home Mode</summary>
    public SwitchEntity DiskstationHomeMode => new(_haContext, "switch.diskstation_home_mode");
    ///<summary>DiskStation Surveillance Station Home Mode</summary>
    public SwitchEntity DiskstationSurveillanceStationHomeMode => new(_haContext, "switch.diskstation_surveillance_station_home_mode");
    ///<summary>Ecklampe</summary>
    public SwitchEntity Ecklampe => new(_haContext, "switch.ecklampe");
    ///<summary>Ecklampe LED</summary>
    public SwitchEntity EcklampeLed => new(_haContext, "switch.ecklampe_led");
    ///<summary>Enyaq Charging</summary>
    public SwitchEntity EnyaqCharging => new(_haContext, "switch.enyaq_charging");
    ///<summary>Enyaq Departure timer 1</summary>
    public SwitchEntity EnyaqDepartureTimer1 => new(_haContext, "switch.enyaq_departure_timer_1");
    ///<summary>Enyaq Departure timer 2</summary>
    public SwitchEntity EnyaqDepartureTimer2 => new(_haContext, "switch.enyaq_departure_timer_2");
    ///<summary>Enyaq Electric Climatisation</summary>
    public SwitchEntity EnyaqElectricClimatisation => new(_haContext, "switch.enyaq_electric_climatisation");
    ///<summary>Enyaq Max Charge Current</summary>
    public SwitchEntity EnyaqMaxChargeCurrent => new(_haContext, "switch.enyaq_max_charge_current");
    ///<summary>Enyaq Plug Auto Unlock</summary>
    public SwitchEntity EnyaqPlugAutoUnlock => new(_haContext, "switch.enyaq_plug_auto_unlock");
    ///<summary>Enyaq Seat heating front left</summary>
    public SwitchEntity EnyaqSeatHeatingFrontLeft => new(_haContext, "switch.enyaq_seat_heating_front_left");
    ///<summary>Enyaq Seat heating front right</summary>
    public SwitchEntity EnyaqSeatHeatingFrontRight => new(_haContext, "switch.enyaq_seat_heating_front_right");
    ///<summary>Enyaq Window Heater</summary>
    public SwitchEntity EnyaqWindowHeater => new(_haContext, "switch.enyaq_window_heater");
    ///<summary>Enyaq Window Heater</summary>
    public SwitchEntity EnyaqWindowHeater2 => new(_haContext, "switch.enyaq_window_heater_2");
    ///<summary>Esstisch</summary>
    public SwitchEntity Esstisch => new(_haContext, "switch.esstisch");
    ///<summary>EV Smart Charging Apply price limit</summary>
    public SwitchEntity EvSmartChargingApplyPriceLimit => new(_haContext, "switch.ev_smart_charging_apply_price_limit");
    ///<summary>EV Smart Charging Continuous charging preferred</summary>
    public SwitchEntity EvSmartChargingContinuousChargingPreferred => new(_haContext, "switch.ev_smart_charging_continuous_charging_preferred");
    ///<summary>EV Smart Charging EV connected</summary>
    public SwitchEntity EvSmartChargingEvConnected => new(_haContext, "switch.ev_smart_charging_ev_connected");
    ///<summary>EV Smart Charging Keep charger on</summary>
    public SwitchEntity EvSmartChargingKeepChargerOn => new(_haContext, "switch.ev_smart_charging_keep_charger_on");
    ///<summary>EV Smart Charging Opportunistic charging</summary>
    public SwitchEntity EvSmartChargingOpportunisticCharging => new(_haContext, "switch.ev_smart_charging_opportunistic_charging");
    ///<summary>EV Smart Charging Smart charging activated</summary>
    public SwitchEntity EvSmartChargingSmartChargingActivated => new(_haContext, "switch.ev_smart_charging_smart_charging_activated");
    ///<summary>Garten 1</summary>
    public SwitchEntity Garten1 => new(_haContext, "switch.garten_1");
    ///<summary>Garten 1 LED</summary>
    public SwitchEntity Garten1Led => new(_haContext, "switch.garten_1_led");
    ///<summary>Garten 2</summary>
    public SwitchEntity Garten2 => new(_haContext, "switch.garten_2");
    ///<summary>Garten 2 LED</summary>
    public SwitchEntity Garten2Led => new(_haContext, "switch.garten_2_led");
    ///<summary>Gartenstiege</summary>
    public SwitchEntity Gartenstiege => new(_haContext, "switch.gartenstiege");
    ///<summary>Gartenstiege LED</summary>
    public SwitchEntity GartenstiegeLed => new(_haContext, "switch.gartenstiege_led");
    ///<summary>Card authorization required</summary>
    public SwitchEntity GoEcharger203597Acs => new(_haContext, "switch.go_echarger_203597_acs");
    ///<summary>Automatic stop mode</summary>
    public SwitchEntity GoEcharger203597Ara => new(_haContext, "switch.go_echarger_203597_ara");
    ///<summary>Allow current change by button</summary>
    public SwitchEntity GoEcharger203597Bac => new(_haContext, "switch.go_echarger_203597_bac");
    ///<summary>Force single phase</summary>
    public SwitchEntity GoEcharger203597Psm => new(_haContext, "switch.go_echarger_203597_psm");
    ///<summary>Simulate unplugging permanently</summary>
    public SwitchEntity GoEcharger203597Sua => new(_haContext, "switch.go_echarger_203597_sua");
    ///<summary>wallbox</summary>
    public SwitchEntity GoechargerWallboxAllowCharging => new(_haContext, "switch.goecharger_wallbox_allow_charging");
    ///<summary>HA Active</summary>
    public SwitchEntity HaActive => new(_haContext, "switch.ha_active");
    ///<summary>Heizkörper</summary>
    public SwitchEntity Heizkorper => new(_haContext, "switch.heizkorper");
    ///<summary>Jugend Vorraum Sensor Illuminance</summary>
    public SwitchEntity HueMotionSensor1Illuminance => new(_haContext, "switch.hue_motion_sensor_1_illuminance");
    ///<summary>Stiegen motion sensor Illuminance</summary>
    public SwitchEntity HueMotionSensor1Illuminance2 => new(_haContext, "switch.hue_motion_sensor_1_illuminance_2");
    ///<summary>Galerie motion sensor Illuminance</summary>
    public SwitchEntity HueMotionSensor1Illuminance3 => new(_haContext, "switch.hue_motion_sensor_1_illuminance_3");
    ///<summary>Hue motion sensor WC Illuminance</summary>
    public SwitchEntity HueMotionSensor1Illuminance4 => new(_haContext, "switch.hue_motion_sensor_1_illuminance_4");
    ///<summary>Hue motion sensor Schrankdg Illuminance</summary>
    public SwitchEntity HueMotionSensor1Illuminance5 => new(_haContext, "switch.hue_motion_sensor_1_illuminance_5");
    ///<summary>Jugend Vorraum Sensor Motion</summary>
    public SwitchEntity HueMotionSensor1Motion => new(_haContext, "switch.hue_motion_sensor_1_motion");
    ///<summary>Stiegen motion sensor Motion</summary>
    public SwitchEntity HueMotionSensor1Motion2 => new(_haContext, "switch.hue_motion_sensor_1_motion_2");
    ///<summary>Galerie motion sensor Motion</summary>
    public SwitchEntity HueMotionSensor1Motion3 => new(_haContext, "switch.hue_motion_sensor_1_motion_3");
    ///<summary>Hue motion sensor WC Motion</summary>
    public SwitchEntity HueMotionSensor1Motion4 => new(_haContext, "switch.hue_motion_sensor_1_motion_4");
    ///<summary>Hue motion sensor Schrankdg Motion</summary>
    public SwitchEntity HueMotionSensor1Motion5 => new(_haContext, "switch.hue_motion_sensor_1_motion_5");
    ///<summary>Bewegungsmelder Terasse Illuminance</summary>
    public SwitchEntity HueOutdoorMotionSensor1Illuminance => new(_haContext, "switch.hue_outdoor_motion_sensor_1_illuminance");
    ///<summary>Bewegungsmelder Terasse Motion</summary>
    public SwitchEntity HueOutdoorMotionSensor1Motion => new(_haContext, "switch.hue_outdoor_motion_sensor_1_motion");
    ///<summary>mytest</summary>
    public SwitchEntity Mytest => new(_haContext, "switch.mytest");
    ///<summary>netdaemon_buttonlistener</summary>
    public SwitchEntity NetdaemonButtonlistener => new(_haContext, "switch.netdaemon_buttonlistener");
    ///<summary>netdaemon_epg</summary>
    public SwitchEntity NetdaemonEpg => new(_haContext, "switch.netdaemon_epg");
    ///<summary>netdaemon_generatedappbase</summary>
    public SwitchEntity NetdaemonGeneratedappbase => new(_haContext, "switch.netdaemon_generatedappbase");
    ///<summary>netdaemon_hello_world_app</summary>
    public SwitchEntity NetdaemonHelloWorldApp => new(_haContext, "switch.netdaemon_hello_world_app");
    ///<summary>netdaemon_my_first_app</summary>
    public SwitchEntity NetdaemonMyFirstApp => new(_haContext, "switch.netdaemon_my_first_app");
    ///<summary>netdaemon_presence</summary>
    public SwitchEntity NetdaemonPresence => new(_haContext, "switch.netdaemon_presence");
    ///<summary>netdaemon_test</summary>
    public SwitchEntity NetdaemonTest => new(_haContext, "switch.netdaemon_test");
    ///<summary>netdaemon_vistapool</summary>
    public SwitchEntity NetdaemonVistapool => new(_haContext, "switch.netdaemon_vistapool");
    ///<summary>netdaemon_washing_machine_notifier_app</summary>
    public SwitchEntity NetdaemonWashingMachineNotifierApp => new(_haContext, "switch.netdaemon_washing_machine_notifier_app");
    ///<summary>Office Sideboard</summary>
    public SwitchEntity OfficeSideboard => new(_haContext, "switch.office_sideboard");
    ///<summary>Office Sideboard LED</summary>
    public SwitchEntity OfficeSideboardLed => new(_haContext, "switch.office_sideboard_led");
    ///<summary>Powermeter</summary>
    public SwitchEntity Powermeter => new(_haContext, "switch.powermeter");
    ///<summary>Powermeter LED</summary>
    public SwitchEntity PowermeterLed => new(_haContext, "switch.powermeter_led");
    ///<summary>room_presence_enabled_boys</summary>
    public SwitchEntity RoomPresenceEnabledBoys => new(_haContext, "switch.room_presence_enabled_boys");
    ///<summary>room_presence_enabled_dining</summary>
    public SwitchEntity RoomPresenceEnabledDining => new(_haContext, "switch.room_presence_enabled_dining");
    ///<summary>room_presence_enabled_entrance</summary>
    public SwitchEntity RoomPresenceEnabledEntrance => new(_haContext, "switch.room_presence_enabled_entrance");
    ///<summary>room_presence_enabled_hallway</summary>
    public SwitchEntity RoomPresenceEnabledHallway => new(_haContext, "switch.room_presence_enabled_hallway");
    ///<summary>room_presence_enabled_kitchen</summary>
    public SwitchEntity RoomPresenceEnabledKitchen => new(_haContext, "switch.room_presence_enabled_kitchen");
    ///<summary>room_presence_enabled_master</summary>
    public SwitchEntity RoomPresenceEnabledMaster => new(_haContext, "switch.room_presence_enabled_master");
    ///<summary>room_presence_enabled_study</summary>
    public SwitchEntity RoomPresenceEnabledStudy => new(_haContext, "switch.room_presence_enabled_study");
    ///<summary>Shelly Plug 1</summary>
    public SwitchEntity ShellyPlug1 => new(_haContext, "switch.shelly_plug_1");
    ///<summary>Smart Switch</summary>
    public SwitchEntity SmartSwitch => new(_haContext, "switch.smart_switch");
    ///<summary>Terrasse Crossfade</summary>
    public SwitchEntity SonosTerrasseCrossfade => new(_haContext, "switch.sonos_terrasse_crossfade");
    ///<summary>Wohnzimmer Crossfade</summary>
    public SwitchEntity SonosWohnzimmerCrossfade => new(_haContext, "switch.sonos_wohnzimmer_crossfade");
    ///<summary>Spielezimmer Anhören Wohnzimmer Sonos</summary>
    public SwitchEntity SpielezimmerAnhorenWohnzimmerSonos => new(_haContext, "switch.spielezimmer_anhoren_wohnzimmer_sonos");
    ///<summary>Spielezimmer Fernsehen</summary>
    public SwitchEntity SpielezimmerFernsehen => new(_haContext, "switch.spielezimmer_fernsehen");
    ///<summary>Spielezimmer Wiedergabe Xbox One</summary>
    public SwitchEntity SpielezimmerWiedergabeXboxOne => new(_haContext, "switch.spielezimmer_wiedergabe_xbox_one");
    ///<summary>Terrasse Loudness</summary>
    public SwitchEntity TerrasseLoudness => new(_haContext, "switch.terrasse_loudness");
    ///<summary>vistapool_aux</summary>
    public SwitchEntity VistapoolAux => new(_haContext, "switch.vistapool_aux");
    ///<summary>vistapool_light</summary>
    public SwitchEntity VistapoolLight => new(_haContext, "switch.vistapool_light");
    ///<summary>Wasch­maschine</summary>
    public SwitchEntity Waschmaschine => new(_haContext, "switch.waschmaschine");
    ///<summary>Wohnzimmer Fernsehen</summary>
    public SwitchEntity WohnzimmerFernsehen => new(_haContext, "switch.wohnzimmer_fernsehen");
    ///<summary>Wohnzimmer Fire TV sehen</summary>
    public SwitchEntity WohnzimmerFireTvSehen => new(_haContext, "switch.wohnzimmer_fire_tv_sehen");
    ///<summary>Wohnzimmer Loudness</summary>
    public SwitchEntity WohnzimmerLoudness => new(_haContext, "switch.wohnzimmer_loudness");
    ///<summary>Wohnzimmer Soundbar</summary>
    public SwitchEntity WohnzimmerSoundbar => new(_haContext, "switch.wohnzimmer_soundbar");
    ///<summary>Wohnzimmer Wiedergabe Xbox One</summary>
    public SwitchEntity WohnzimmerWiedergabeXboxOne => new(_haContext, "switch.wohnzimmer_wiedergabe_xbox_one");
}

public partial class TimerEntities
{
    private readonly IHaContext _haContext;
    public TimerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Timer</summary>
    public TimerEntity Kitchen => new(_haContext, "timer.kitchen");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>chrony Update</summary>
    public UpdateEntity ChronyUpdate => new(_haContext, "update.chrony_update");
    ///<summary>DiskStation2 DSM Update</summary>
    public UpdateEntity DiskstationDsmUpdate => new(_haContext, "update.diskstation_dsm_update");
    ///<summary>DiskStation DSM Update</summary>
    public UpdateEntity DiskstationDsmUpdate2 => new(_haContext, "update.diskstation_dsm_update_2");
    ///<summary>Duck DNS Update</summary>
    public UpdateEntity DuckDnsUpdate => new(_haContext, "update.duck_dns_update");
    ///<summary>ESPHome Update</summary>
    public UpdateEntity EsphomeUpdate => new(_haContext, "update.esphome_update");
    ///<summary>Firmware</summary>
    public UpdateEntity FibaroDoor1Firmware => new(_haContext, "update.fibaro_door_1_firmware");
    ///<summary>Firmware</summary>
    public UpdateEntity FibaroDoor2Firmware => new(_haContext, "update.fibaro_door_2_firmware");
    ///<summary>Git pull Update</summary>
    public UpdateEntity GitPullUpdate => new(_haContext, "update.git_pull_update");
    ///<summary>Grafana Update</summary>
    public UpdateEntity GrafanaUpdate => new(_haContext, "update.grafana_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>InfluxDB Update</summary>
    public UpdateEntity InfluxdbUpdate => new(_haContext, "update.influxdb_update");
    ///<summary>Log Viewer Update</summary>
    public UpdateEntity LogViewerUpdate => new(_haContext, "update.log_viewer_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>motionEye Update</summary>
    public UpdateEntity MotioneyeUpdate => new(_haContext, "update.motioneye_update");
    ///<summary>NetDaemon V3.1 (.NET 7) Update</summary>
    public UpdateEntity NetdaemonV31Net7Update => new(_haContext, "update.netdaemon_v3_1_net_7_update");
    ///<summary>Node-RED Update</summary>
    public UpdateEntity NodeRedUpdate => new(_haContext, "update.node_red_update");
    ///<summary>Plex Media Server Update</summary>
    public UpdateEntity PlexMediaServerUpdate => new(_haContext, "update.plex_media_server_update");
    ///<summary>Portainer Update</summary>
    public UpdateEntity PortainerUpdate => new(_haContext, "update.portainer_update");
    ///<summary>Samba Backup Update</summary>
    public UpdateEntity SambaBackupUpdate => new(_haContext, "update.samba_backup_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Spotify Connect Update</summary>
    public UpdateEntity SpotifyConnectUpdate => new(_haContext, "update.spotify_connect_update");
    ///<summary>SQLite Web Update</summary>
    public UpdateEntity SqliteWebUpdate => new(_haContext, "update.sqlite_web_update");
    ///<summary>SSH &amp; Web Terminal Update</summary>
    public UpdateEntity SshWebTerminalUpdate => new(_haContext, "update.ssh_web_terminal_update");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>TasmoAdmin Update</summary>
    public UpdateEntity TasmoadminUpdate => new(_haContext, "update.tasmoadmin_update");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>UniFi Network Application Update</summary>
    public UpdateEntity UnifiNetworkApplicationUpdate => new(_haContext, "update.unifi_network_application_update");
    ///<summary>Vaultwarden (Bitwarden) Update</summary>
    public UpdateEntity VaultwardenBitwardenUpdate => new(_haContext, "update.vaultwarden_bitwarden_update");
    ///<summary>VLC Update</summary>
    public UpdateEntity VlcUpdate => new(_haContext, "update.vlc_update");
    ///<summary>WireGuard Update</summary>
    public UpdateEntity WireguardUpdate => new(_haContext, "update.wireguard_update");
    ///<summary>Z-Wave JS UI Update</summary>
    public UpdateEntity ZWaveJsToMqttUpdate => new(_haContext, "update.z_wave_js_to_mqtt_update");
    ///<summary>Z-Wave JS Update</summary>
    public UpdateEntity ZWaveJsUpdate => new(_haContext, "update.z_wave_js_update");
}

public partial class VacuumEntities
{
    private readonly IHaContext _haContext;
    public VacuumEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dustin</summary>
    public VacuumEntity Dustin => new(_haContext, "vacuum.dustin");
    ///<summary>Mähphisto</summary>
    public VacuumEntity Mahphisto => new(_haContext, "vacuum.mahphisto");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Forecast Home</summary>
    public WeatherEntity Home => new(_haContext, "weather.home");
    ///<summary>Home</summary>
    public WeatherEntity Home2 => new(_haContext, "weather.home_2");
    ///<summary>OpenWeatherMap</summary>
    public WeatherEntity Openweathermap => new(_haContext, "weather.openweathermap");
    ///<summary>ZAMG BUCHBERG</summary>
    public WeatherEntity ZamgBuchberg => new(_haContext, "weather.zamg_buchberg");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Billa</summary>
    public ZoneEntity Billa => new(_haContext, "zone.billa");
    ///<summary>Hofer</summary>
    public ZoneEntity Hofer => new(_haContext, "zone.hofer");
    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Melk</summary>
    public ZoneEntity Melk => new(_haContext, "zone.melk");
    ///<summary>Sacre Coeur</summary>
    public ZoneEntity SacreCoeur => new(_haContext, "zone.sacre_coeur");
    ///<summary>Sir Karl Popper Schule</summary>
    public ZoneEntity SirKarlPopperSchule => new(_haContext, "zone.sir_karl_popper_schule");
    ///<summary>Tieto</summary>
    public ZoneEntity Tieto => new(_haContext, "zone.tieto");
    ///<summary>VwGH</summary>
    public ZoneEntity Vwgh => new(_haContext, "zone.vwgh");
    ///<summary>Westbahnhof</summary>
    public ZoneEntity Westbahnhof => new(_haContext, "zone.westbahnhof");
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(Entity entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(Entity entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("target")]
    public string? Target { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("motion_valid")]
    public bool? MotionValid { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("foo")]
    public double? Foo { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("ignoring_battery_optimizations")]
    public bool? IgnoringBatteryOptimizations { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("malware")]
    public string? Malware { get; init; }

    [JsonPropertyName("network")]
    public string? Network { get; init; }

    [JsonPropertyName("securitySetting")]
    public string? SecuritySetting { get; init; }

    [JsonPropertyName("systemCheck")]
    public string? SystemCheck { get; init; }

    [JsonPropertyName("update")]
    public string? Update { get; init; }

    [JsonPropertyName("userInfo")]
    public string? UserInfo { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("year")]
    public double? Year { get; init; }

    [JsonPropertyName("month")]
    public double? Month { get; init; }

    [JsonPropertyName("day")]
    public double? Day { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("dynamics")]
    public object? Dynamics { get; init; }

    [JsonPropertyName("is_hue_group")]
    public bool? IsHueGroup { get; init; }

    [JsonPropertyName("hue_scenes")]
    public IReadOnlyList<string>? HueScenes { get; init; }

    [JsonPropertyName("hue_type")]
    public string? HueType { get; init; }

    [JsonPropertyName("lights")]
    public IReadOnlyList<string>? Lights { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("last_result")]
    public string? LastResult { get; init; }

    [JsonPropertyName("last_timestamp")]
    public string? LastTimestamp { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("group_members")]
    public IReadOnlyList<string>? GroupMembers { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("queue_position")]
    public double? QueuePosition { get; init; }

    [JsonPropertyName("queue_size")]
    public double? QueueSize { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record PersistentNotificationEntity : Entity<PersistentNotificationEntity, EntityState<PersistentNotificationAttributes>, PersistentNotificationAttributes>
{
    public PersistentNotificationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersistentNotificationEntity(Entity entity) : base(entity)
    {
    }
}

public partial record PersistentNotificationAttributes
{
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(Entity entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    [JsonPropertyName("group_type")]
    public string? GroupType { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("is_dynamic")]
    public bool? IsDynamic { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("daysTo")]
    public string? DaysTo { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("destination")]
    public string? Destination { get; init; }

    [JsonPropertyName("platform")]
    public string? Platform { get; init; }

    [JsonPropertyName("direction")]
    public string? Direction { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("countdown")]
    public double? Countdown { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("target")]
    public string? Target { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public object? Serial { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public object? UriSupported { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("number_of_loaded_apps")]
    public double? NumberOfLoadedApps { get; init; }

    [JsonPropertyName("number_of_running_apps")]
    public double? NumberOfRunningApps { get; init; }

    [JsonPropertyName("version")]
    public string? Version { get; init; }

    [JsonPropertyName("Sender")]
    public string? Sender { get; init; }

    [JsonPropertyName("Title")]
    public string? Title { get; init; }

    [JsonPropertyName("Episode")]
    public string? Episode { get; init; }

    [JsonPropertyName("BeginTime")]
    public string? BeginTime { get; init; }

    [JsonPropertyName("Duration")]
    public double? Duration { get; init; }

    [JsonPropertyName("Genre")]
    public string? Genre { get; init; }

    [JsonPropertyName("Upcoming")]
    public string? Upcoming { get; init; }

    [JsonPropertyName("Id")]
    public string? Id { get; init; }

    [JsonPropertyName("Station")]
    public string? Station { get; init; }

    [JsonPropertyName("DataProvider")]
    public string? DataProvider { get; init; }

    [JsonPropertyName("Updated")]
    public string? Updated { get; init; }

    [JsonPropertyName("Description")]
    public string? Description { get; init; }

    [JsonPropertyName("foo")]
    public double? Foo { get; init; }

    [JsonPropertyName("Filter")]
    public bool? Filter { get; init; }

    [JsonPropertyName("Heating")]
    public bool? Heating { get; init; }

    [JsonPropertyName("AUX")]
    public bool? AUX { get; init; }

    [JsonPropertyName("Light")]
    public bool? Light { get; init; }

    [JsonPropertyName("LastUpdate")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("DataFrom")]
    public string? DataFrom { get; init; }

    [JsonPropertyName("is_hidden")]
    public bool? IsHidden { get; init; }

    [JsonPropertyName("administrative_area")]
    public string? AdministrativeArea_0 { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea_1 { get; init; }

    [JsonPropertyName("country")]
    public string? Country_0 { get; init; }

    [JsonPropertyName("Country")]
    public string? Country_1 { get; init; }

    [JsonPropertyName("iso_country_code")]
    public string? IsoCountryCode { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude_0 { get; init; }

    [JsonPropertyName("Latitude")]
    public double? Latitude_1 { get; init; }

    [JsonPropertyName("locality")]
    public string? Locality_0 { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality_1 { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude_0 { get; init; }

    [JsonPropertyName("Longitude")]
    public double? Longitude_1 { get; init; }

    [JsonPropertyName("postal_code")]
    public string? PostalCode_0 { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode_1 { get; init; }

    [JsonPropertyName("sub_administrative_area")]
    public string? SubAdministrativeArea_0 { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea_1 { get; init; }

    [JsonPropertyName("sub_locality")]
    public string? SubLocality_0 { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality_1 { get; init; }

    [JsonPropertyName("sub_thoroughfare")]
    public string? SubThoroughfare_0 { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare_1 { get; init; }

    [JsonPropertyName("thoroughfare")]
    public string? Thoroughfare_0 { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare_1 { get; init; }

    [JsonPropertyName("still")]
    public double? Still { get; init; }

    [JsonPropertyName("Local Time")]
    public string? LocalTime { get; init; }

    [JsonPropertyName("Time in Milliseconds")]
    public double? TimeinMilliseconds { get; init; }

    [JsonPropertyName("android.appInfo")]
    public string? Android_appInfo { get; init; }

    [JsonPropertyName("android.icon")]
    public double? Android_icon { get; init; }

    [JsonPropertyName("android.infoText")]
    public string? Android_infoText { get; init; }

    [JsonPropertyName("android.largeIcon")]
    public string? Android_largeIcon { get; init; }

    [JsonPropertyName("android.progress")]
    public double? Android_progress { get; init; }

    [JsonPropertyName("android.progressIndeterminate")]
    public bool? Android_progressIndeterminate { get; init; }

    [JsonPropertyName("android.progressMax")]
    public double? Android_progressMax { get; init; }

    [JsonPropertyName("android.reduced.images")]
    public bool? Android_reduced_images { get; init; }

    [JsonPropertyName("android.remoteInputHistory")]
    public string? Android_remoteInputHistory { get; init; }

    [JsonPropertyName("android.showChronometer")]
    public bool? Android_showChronometer { get; init; }

    [JsonPropertyName("android.showWhen")]
    public bool? Android_showWhen { get; init; }

    [JsonPropertyName("android.subText")]
    public string? Android_subText { get; init; }

    [JsonPropertyName("android.text")]
    public string? Android_text { get; init; }

    [JsonPropertyName("android.title")]
    public string? Android_title { get; init; }

    [JsonPropertyName("is_clearable")]
    public bool? IsClearable { get; init; }

    [JsonPropertyName("is_ongoing")]
    public bool? IsOngoing { get; init; }

    [JsonPropertyName("package")]
    public string? Package { get; init; }

    [JsonPropertyName("post_time")]
    public double? PostTime { get; init; }

    [JsonPropertyName("in_daylight_time")]
    public bool? InDaylightTime { get; init; }

    [JsonPropertyName("time_zone_id")]
    public string? TimeZoneId { get; init; }

    [JsonPropertyName("time_zone_short")]
    public string? TimeZoneShort { get; init; }

    [JsonPropertyName("uses_daylight_time")]
    public bool? UsesDaylightTime { get; init; }

    [JsonPropertyName("utc_offset")]
    public double? UtcOffset { get; init; }

    [JsonPropertyName("total_media_session_count")]
    public double? TotalMediaSessionCount { get; init; }

    [JsonPropertyName("in_vehicle")]
    public double? InVehicle { get; init; }

    [JsonPropertyName("on_foot")]
    public double? OnFoot { get; init; }

    [JsonPropertyName("unknown")]
    public double? Unknown { get; init; }

    [JsonPropertyName("walking")]
    public double? Walking { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("android.bigText")]
    public string? Android_bigText { get; init; }

    [JsonPropertyName("android.template")]
    public string? Android_template { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE")]
    public string? Androidx_core_app_extra_COMPATTEMPLATE { get; init; }

    [JsonPropertyName("carrier id")]
    public double? Carrierid { get; init; }

    [JsonPropertyName("carrier name")]
    public string? Carriername { get; init; }

    [JsonPropertyName("data roaming")]
    public string? Dataroaming { get; init; }

    [JsonPropertyName("is opportunistic")]
    public bool? Isopportunistic { get; init; }

    [JsonPropertyName("iso country code")]
    public string? Isocountrycode { get; init; }

    [JsonPropertyName("mcc")]
    public string? Mcc { get; init; }

    [JsonPropertyName("mnc")]
    public string? Mnc { get; init; }

    [JsonPropertyName("android.title.big")]
    public string? Android_title_big { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("engine")]
    public object? Engine { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public string? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }

    [JsonPropertyName("backups_local")]
    public string? BackupsLocal { get; init; }

    [JsonPropertyName("backups_remote")]
    public string? BackupsRemote { get; init; }

    [JsonPropertyName("total_backups_succeeded")]
    public string? TotalBackupsSucceeded { get; init; }

    [JsonPropertyName("total_backups_failed")]
    public string? TotalBackupsFailed { get; init; }

    [JsonPropertyName("current_price")]
    public double? CurrentPrice { get; init; }

    [JsonPropertyName("EV SOC")]
    public string? EVSOC { get; init; }

    [JsonPropertyName("EV target SOC")]
    public string? EVtargetSOC { get; init; }

    [JsonPropertyName("Charging status")]
    public string? Chargingstatus { get; init; }

    [JsonPropertyName("Charging is planned")]
    public bool? Chargingisplanned { get; init; }

    [JsonPropertyName("Charging start time")]
    public string? Chargingstarttime { get; init; }

    [JsonPropertyName("Charging stop time")]
    public string? Chargingstoptime { get; init; }

    [JsonPropertyName("Charging number of hours")]
    public double? Chargingnumberofhours { get; init; }

    [JsonPropertyName("raw_two_days")]
    public IReadOnlyList<object>? RawTwoDays { get; init; }

    [JsonPropertyName("charging_schedule")]
    public IReadOnlyList<object>? ChargingSchedule { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("data")]
    public IReadOnlyList<object>? Data_0 { get; init; }

    [JsonPropertyName("Data")]
    public IReadOnlyList<object>? Data_1 { get; init; }

    [JsonPropertyName("price_ct_per_kwh")]
    public double? PriceCtPerKwh { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("F")]
    public double? F { get; init; }

    [JsonPropertyName("PA")]
    public double? PA { get; init; }

    [JsonPropertyName("PB")]
    public double? PB { get; init; }

    [JsonPropertyName("PC")]
    public double? PC { get; init; }

    [JsonPropertyName("PT")]
    public double? PT { get; init; }

    [JsonPropertyName("EFAT")]
    public double? EFAT { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("temperature_valid")]
    public bool? TemperatureValid { get; init; }

    [JsonPropertyName("light_level")]
    public double? LightLevel { get; init; }

    [JsonPropertyName("light_level_valid")]
    public bool? LightLevelValid { get; init; }

    [JsonPropertyName("battery_state")]
    public string? BatteryState { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("station")]
    public string? Station { get; init; }

    [JsonPropertyName("updated")]
    public string? Updated_0 { get; init; }

    [JsonPropertyName("Updated")]
    public string? Updated_1 { get; init; }

    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    [JsonPropertyName("server_country")]
    public string? ServerCountry { get; init; }

    [JsonPropertyName("server_id")]
    public string? ServerId { get; init; }

    [JsonPropertyName("bytes_received")]
    public double? BytesReceived { get; init; }

    [JsonPropertyName("bytes_sent")]
    public double? BytesSent { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_period")]
    public string? LastPeriod { get; init; }

    [JsonPropertyName("meter_period")]
    public string? MeterPeriod { get; init; }

    [JsonPropertyName("cron pattern")]
    public string? Cronpattern { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("shows")]
    public double? Shows { get; init; }

    [JsonPropertyName("seasons")]
    public double? Seasons { get; init; }

    [JsonPropertyName("last_added_item")]
    public string? LastAddedItem { get; init; }

    [JsonPropertyName("last_added_timestamp")]
    public string? LastAddedTimestamp { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("LastUpdate")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("rf_link_level")]
    public double? RfLinkLevel { get; init; }

    [JsonPropertyName("rf_link_state")]
    public string? RfLinkState { get; init; }

    [JsonPropertyName("text")]
    public string? Text { get; init; }

    [JsonPropertyName("current")]
    public object? Current { get; init; }

    [JsonPropertyName("connected_not_paired_devices")]
    public object? ConnectedNotPairedDevices { get; init; }

    [JsonPropertyName("connected_paired_devices")]
    public object? ConnectedPairedDevices { get; init; }

    [JsonPropertyName("paired_devices")]
    public object? PairedDevices { get; init; }

    [JsonPropertyName("Free internal storage")]
    public string? Freeinternalstorage { get; init; }

    [JsonPropertyName("Total internal storage")]
    public string? Totalinternalstorage { get; init; }

    [JsonPropertyName("free_memory")]
    public double? FreeMemory { get; init; }

    [JsonPropertyName("total_memory")]
    public double? TotalMemory { get; init; }

    [JsonPropertyName("android.appInfo_at.atrust.tanapp")]
    public string? Android_appInfoAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.appInfo_at.billa.service")]
    public string? Android_appInfoAt_billa_service { get; init; }

    [JsonPropertyName("android.appInfo_at.ottoversand.shop")]
    public string? Android_appInfoAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.appInfo_at.payback.client.android")]
    public string? Android_appInfoAt_payback_client_android { get; init; }

    [JsonPropertyName("android.appInfo_at.willhaben")]
    public string? Android_appInfoAt_willhaben { get; init; }

    [JsonPropertyName("android.appInfo_ch.publisheria.bring")]
    public string? Android_appInfoCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.appInfo_com.amazon.dee.app")]
    public string? Android_appInfoCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.appInfo_com.amazon.mShop.android.shopping")]
    public string? Android_appInfoCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.appInfo_com.android.settings")]
    public string? Android_appInfoCom_android_settings { get; init; }

    [JsonPropertyName("android.appInfo_com.apalon.weatherlive.free")]
    public string? Android_appInfoCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.appInfo_com.audible.application")]
    public string? Android_appInfoCom_audible_application { get; init; }

    [JsonPropertyName("android.appInfo_com.azure.authenticator")]
    public string? Android_appInfoCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.appInfo_com.devexpert.weather")]
    public string? Android_appInfoCom_devexpert_weather { get; init; }

    [JsonPropertyName("android.appInfo_com.dietagespresse.tagespresse")]
    public string? Android_appInfoCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.appInfo_com.facebook.katana")]
    public string? Android_appInfoCom_facebook_katana { get; init; }

    [JsonPropertyName("android.appInfo_com.google.android.gms")]
    public string? Android_appInfoCom_google_android_gms { get; init; }

    [JsonPropertyName("android.appInfo_com.google.android.youtube")]
    public string? Android_appInfoCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.appInfo_com.instagram.android")]
    public string? Android_appInfoCom_instagram_android { get; init; }

    [JsonPropertyName("android.appInfo_com.linkedin.android")]
    public string? Android_appInfoCom_linkedin_android { get; init; }

    [JsonPropertyName("android.appInfo_com.microsoft.amp.apps.bingnews")]
    public string? Android_appInfoCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.appInfo_com.microsoft.office.outlook")]
    public string? Android_appInfoCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.appInfo_com.microsoft.skydrive")]
    public string? Android_appInfoCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.appInfo_com.samsung.android.gearoplugin")]
    public string? Android_appInfoCom_samsung_android_gearoplugin { get; init; }

    [JsonPropertyName("android.appInfo_com.samsung.android.messaging")]
    public string? Android_appInfoCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.appInfo_com.samsung.android.oneconnect")]
    public string? Android_appInfoCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.appInfo_com.sand.airdroid")]
    public string? Android_appInfoCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.appInfo_com.sec.android.app.shealth")]
    public string? Android_appInfoCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.appInfo_com.twitter.android")]
    public string? Android_appInfoCom_twitter_android { get; init; }

    [JsonPropertyName("android.appInfo_com.whatsapp")]
    public string? Android_appInfoCom_whatsapp { get; init; }

    [JsonPropertyName("android.appInfo_de.axelspringer.yana.zeropage")]
    public string? Android_appInfoDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.appInfo_de.tchibo.app")]
    public string? Android_appInfoDe_tchibo_app { get; init; }

    [JsonPropertyName("android.appInfo_derstandard.at.istandardx")]
    public string? Android_appInfoDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.bigText_at.atrust.tanapp")]
    public string? Android_bigTextAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.bigText_at.billa.service")]
    public string? Android_bigTextAt_billa_service { get; init; }

    [JsonPropertyName("android.bigText_at.ottoversand.shop")]
    public string? Android_bigTextAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.bigText_at.payback.client.android")]
    public string? Android_bigTextAt_payback_client_android { get; init; }

    [JsonPropertyName("android.bigText_at.willhaben")]
    public string? Android_bigTextAt_willhaben { get; init; }

    [JsonPropertyName("android.bigText_com.amazon.dee.app")]
    public string? Android_bigTextCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.bigText_com.android.settings")]
    public string? Android_bigTextCom_android_settings { get; init; }

    [JsonPropertyName("android.bigText_com.dietagespresse.tagespresse")]
    public string? Android_bigTextCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.bigText_com.facebook.katana")]
    public string? Android_bigTextCom_facebook_katana { get; init; }

    [JsonPropertyName("android.bigText_com.google.android.gms")]
    public string? Android_bigTextCom_google_android_gms { get; init; }

    [JsonPropertyName("android.bigText_com.instagram.android")]
    public string? Android_bigTextCom_instagram_android { get; init; }

    [JsonPropertyName("android.bigText_com.linkedin.android")]
    public string? Android_bigTextCom_linkedin_android { get; init; }

    [JsonPropertyName("android.bigText_com.microsoft.amp.apps.bingnews")]
    public string? Android_bigTextCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.bigText_com.microsoft.office.outlook")]
    public string? Android_bigTextCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.bigText_com.samsung.android.gearoplugin")]
    public string? Android_bigTextCom_samsung_android_gearoplugin { get; init; }

    [JsonPropertyName("android.bigText_com.samsung.android.oneconnect")]
    public string? Android_bigTextCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.bigText_com.sec.android.app.shealth")]
    public string? Android_bigTextCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.bigText_com.whatsapp")]
    public string? Android_bigTextCom_whatsapp { get; init; }

    [JsonPropertyName("android.bigText_de.axelspringer.yana.zeropage")]
    public string? Android_bigTextDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.bigText_derstandard.at.istandardx")]
    public string? Android_bigTextDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.car.EXTENSIONS_com.samsung.android.messaging")]
    public string? Android_car_EXTENSIONSCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.colorized_com.microsoft.skydrive")]
    public bool? Android_colorizedCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.contains.customView_com.apalon.weatherlive.free")]
    public bool? Android_contains_customViewCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.contains.customView_com.facebook.katana")]
    public bool? Android_contains_customViewCom_facebook_katana { get; init; }

    [JsonPropertyName("android.contains.customView_com.google.android.youtube")]
    public bool? Android_contains_customViewCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.contains.customView_com.twitter.android")]
    public bool? Android_contains_customViewCom_twitter_android { get; init; }

    [JsonPropertyName("android.contains.customView_de.axelspringer.yana.zeropage")]
    public bool? Android_contains_customViewDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.icon_at.atrust.tanapp")]
    public double? Android_iconAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.icon_at.billa.service")]
    public double? Android_iconAt_billa_service { get; init; }

    [JsonPropertyName("android.icon_at.ottoversand.shop")]
    public double? Android_iconAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.icon_at.payback.client.android")]
    public double? Android_iconAt_payback_client_android { get; init; }

    [JsonPropertyName("android.icon_at.willhaben")]
    public double? Android_iconAt_willhaben { get; init; }

    [JsonPropertyName("android.icon_ch.publisheria.bring")]
    public double? Android_iconCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.icon_com.amazon.dee.app")]
    public double? Android_iconCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.icon_com.amazon.mShop.android.shopping")]
    public double? Android_iconCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.icon_com.apalon.weatherlive.free")]
    public double? Android_iconCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.icon_com.audible.application")]
    public double? Android_iconCom_audible_application { get; init; }

    [JsonPropertyName("android.icon_com.azure.authenticator")]
    public double? Android_iconCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.icon_com.devexpert.weather")]
    public double? Android_iconCom_devexpert_weather { get; init; }

    [JsonPropertyName("android.icon_com.dietagespresse.tagespresse")]
    public double? Android_iconCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.icon_com.facebook.katana")]
    public double? Android_iconCom_facebook_katana { get; init; }

    [JsonPropertyName("android.icon_com.google.android.gms")]
    public double? Android_iconCom_google_android_gms { get; init; }

    [JsonPropertyName("android.icon_com.google.android.youtube")]
    public double? Android_iconCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.icon_com.instagram.android")]
    public double? Android_iconCom_instagram_android { get; init; }

    [JsonPropertyName("android.icon_com.linkedin.android")]
    public double? Android_iconCom_linkedin_android { get; init; }

    [JsonPropertyName("android.icon_com.microsoft.amp.apps.bingnews")]
    public double? Android_iconCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.icon_com.microsoft.office.outlook")]
    public double? Android_iconCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.icon_com.microsoft.skydrive")]
    public double? Android_iconCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.icon_com.samsung.android.gearoplugin")]
    public double? Android_iconCom_samsung_android_gearoplugin { get; init; }

    [JsonPropertyName("android.icon_com.samsung.android.messaging")]
    public double? Android_iconCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.icon_com.samsung.android.oneconnect")]
    public double? Android_iconCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.icon_com.sand.airdroid")]
    public double? Android_iconCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.icon_com.sec.android.app.shealth")]
    public double? Android_iconCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.icon_com.twitter.android")]
    public double? Android_iconCom_twitter_android { get; init; }

    [JsonPropertyName("android.icon_com.whatsapp")]
    public double? Android_iconCom_whatsapp { get; init; }

    [JsonPropertyName("android.icon_de.axelspringer.yana.zeropage")]
    public double? Android_iconDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.icon_de.tchibo.app")]
    public double? Android_iconDe_tchibo_app { get; init; }

    [JsonPropertyName("android.icon_derstandard.at.istandardx")]
    public double? Android_iconDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.infoText_at.atrust.tanapp")]
    public string? Android_infoTextAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.infoText_at.billa.service")]
    public string? Android_infoTextAt_billa_service { get; init; }

    [JsonPropertyName("android.infoText_at.ottoversand.shop")]
    public string? Android_infoTextAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.infoText_at.payback.client.android")]
    public string? Android_infoTextAt_payback_client_android { get; init; }

    [JsonPropertyName("android.infoText_at.willhaben")]
    public string? Android_infoTextAt_willhaben { get; init; }

    [JsonPropertyName("android.infoText_ch.publisheria.bring")]
    public string? Android_infoTextCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.infoText_com.amazon.dee.app")]
    public string? Android_infoTextCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.infoText_com.apalon.weatherlive.free")]
    public string? Android_infoTextCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.infoText_com.audible.application")]
    public string? Android_infoTextCom_audible_application { get; init; }

    [JsonPropertyName("android.infoText_com.azure.authenticator")]
    public string? Android_infoTextCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.infoText_com.dietagespresse.tagespresse")]
    public string? Android_infoTextCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.infoText_com.facebook.katana")]
    public string? Android_infoTextCom_facebook_katana { get; init; }

    [JsonPropertyName("android.infoText_com.google.android.gms")]
    public string? Android_infoTextCom_google_android_gms { get; init; }

    [JsonPropertyName("android.infoText_com.google.android.youtube")]
    public string? Android_infoTextCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.infoText_com.instagram.android")]
    public string? Android_infoTextCom_instagram_android { get; init; }

    [JsonPropertyName("android.infoText_com.linkedin.android")]
    public string? Android_infoTextCom_linkedin_android { get; init; }

    [JsonPropertyName("android.infoText_com.microsoft.amp.apps.bingnews")]
    public string? Android_infoTextCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.infoText_com.microsoft.office.outlook")]
    public string? Android_infoTextCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.infoText_com.microsoft.skydrive")]
    public string? Android_infoTextCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.infoText_com.samsung.android.oneconnect")]
    public string? Android_infoTextCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.infoText_com.sand.airdroid")]
    public string? Android_infoTextCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.infoText_com.twitter.android")]
    public string? Android_infoTextCom_twitter_android { get; init; }

    [JsonPropertyName("android.infoText_com.whatsapp")]
    public string? Android_infoTextCom_whatsapp { get; init; }

    [JsonPropertyName("android.infoText_de.axelspringer.yana.zeropage")]
    public string? Android_infoTextDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.infoText_de.tchibo.app")]
    public string? Android_infoTextDe_tchibo_app { get; init; }

    [JsonPropertyName("android.infoText_derstandard.at.istandardx")]
    public string? Android_infoTextDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.isGroupConversation_com.samsung.android.messaging")]
    public bool? Android_isGroupConversationCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.largeIcon.big_com.amazon.mShop.android.shopping")]
    public string? Android_largeIcon_bigCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.largeIcon.big_com.microsoft.skydrive")]
    public string? Android_largeIcon_bigCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.largeIcon.big_de.tchibo.app")]
    public string? Android_largeIcon_bigDe_tchibo_app { get; init; }

    [JsonPropertyName("android.largeIcon_at.atrust.tanapp")]
    public string? Android_largeIconAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.largeIcon_at.billa.service")]
    public string? Android_largeIconAt_billa_service { get; init; }

    [JsonPropertyName("android.largeIcon_at.ottoversand.shop")]
    public string? Android_largeIconAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.largeIcon_at.payback.client.android")]
    public string? Android_largeIconAt_payback_client_android { get; init; }

    [JsonPropertyName("android.largeIcon_at.willhaben")]
    public string? Android_largeIconAt_willhaben { get; init; }

    [JsonPropertyName("android.largeIcon_ch.publisheria.bring")]
    public string? Android_largeIconCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.largeIcon_com.amazon.dee.app")]
    public string? Android_largeIconCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.largeIcon_com.amazon.mShop.android.shopping")]
    public string? Android_largeIconCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.largeIcon_com.apalon.weatherlive.free")]
    public string? Android_largeIconCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.largeIcon_com.audible.application")]
    public string? Android_largeIconCom_audible_application { get; init; }

    [JsonPropertyName("android.largeIcon_com.azure.authenticator")]
    public string? Android_largeIconCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.largeIcon_com.devexpert.weather")]
    public string? Android_largeIconCom_devexpert_weather { get; init; }

    [JsonPropertyName("android.largeIcon_com.dietagespresse.tagespresse")]
    public string? Android_largeIconCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.largeIcon_com.facebook.katana")]
    public string? Android_largeIconCom_facebook_katana { get; init; }

    [JsonPropertyName("android.largeIcon_com.google.android.gms")]
    public string? Android_largeIconCom_google_android_gms { get; init; }

    [JsonPropertyName("android.largeIcon_com.google.android.youtube")]
    public string? Android_largeIconCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.largeIcon_com.instagram.android")]
    public string? Android_largeIconCom_instagram_android { get; init; }

    [JsonPropertyName("android.largeIcon_com.linkedin.android")]
    public string? Android_largeIconCom_linkedin_android { get; init; }

    [JsonPropertyName("android.largeIcon_com.microsoft.amp.apps.bingnews")]
    public string? Android_largeIconCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.largeIcon_com.microsoft.office.outlook")]
    public string? Android_largeIconCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.largeIcon_com.microsoft.skydrive")]
    public string? Android_largeIconCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.largeIcon_com.samsung.android.messaging")]
    public string? Android_largeIconCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.largeIcon_com.samsung.android.oneconnect")]
    public string? Android_largeIconCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.largeIcon_com.sand.airdroid")]
    public string? Android_largeIconCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.largeIcon_com.sec.android.app.shealth")]
    public string? Android_largeIconCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.largeIcon_com.twitter.android")]
    public string? Android_largeIconCom_twitter_android { get; init; }

    [JsonPropertyName("android.largeIcon_com.whatsapp")]
    public string? Android_largeIconCom_whatsapp { get; init; }

    [JsonPropertyName("android.largeIcon_de.axelspringer.yana.zeropage")]
    public string? Android_largeIconDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.largeIcon_de.tchibo.app")]
    public string? Android_largeIconDe_tchibo_app { get; init; }

    [JsonPropertyName("android.largeIcon_derstandard.at.istandardx")]
    public string? Android_largeIconDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.messages_com.samsung.android.messaging")]
    public IReadOnlyList<string>? Android_messagesCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.messagingUser_com.samsung.android.messaging")]
    public string? Android_messagingUserCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.people.list_com.samsung.android.messaging")]
    public IReadOnlyList<string>? Android_people_listCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.picture_ch.publisheria.bring")]
    public string? Android_pictureCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.picture_com.amazon.mShop.android.shopping")]
    public string? Android_pictureCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.picture_com.dietagespresse.tagespresse")]
    public string? Android_pictureCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.picture_com.google.android.youtube")]
    public string? Android_pictureCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.picture_com.microsoft.skydrive")]
    public string? Android_pictureCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.picture_de.tchibo.app")]
    public string? Android_pictureDe_tchibo_app { get; init; }

    [JsonPropertyName("android.picture_derstandard.at.istandardx")]
    public string? Android_pictureDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.progressIndeterminate_at.atrust.tanapp")]
    public bool? Android_progressIndeterminateAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.progressIndeterminate_at.billa.service")]
    public bool? Android_progressIndeterminateAt_billa_service { get; init; }

    [JsonPropertyName("android.progressIndeterminate_at.ottoversand.shop")]
    public bool? Android_progressIndeterminateAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.progressIndeterminate_at.payback.client.android")]
    public bool? Android_progressIndeterminateAt_payback_client_android { get; init; }

    [JsonPropertyName("android.progressIndeterminate_at.willhaben")]
    public bool? Android_progressIndeterminateAt_willhaben { get; init; }

    [JsonPropertyName("android.progressIndeterminate_ch.publisheria.bring")]
    public bool? Android_progressIndeterminateCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.amazon.dee.app")]
    public bool? Android_progressIndeterminateCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.android.settings")]
    public bool? Android_progressIndeterminateCom_android_settings { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.apalon.weatherlive.free")]
    public bool? Android_progressIndeterminateCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.audible.application")]
    public bool? Android_progressIndeterminateCom_audible_application { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.azure.authenticator")]
    public bool? Android_progressIndeterminateCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.dietagespresse.tagespresse")]
    public bool? Android_progressIndeterminateCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.facebook.katana")]
    public bool? Android_progressIndeterminateCom_facebook_katana { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.google.android.gms")]
    public bool? Android_progressIndeterminateCom_google_android_gms { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.google.android.youtube")]
    public bool? Android_progressIndeterminateCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.instagram.android")]
    public bool? Android_progressIndeterminateCom_instagram_android { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.linkedin.android")]
    public bool? Android_progressIndeterminateCom_linkedin_android { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.microsoft.amp.apps.bingnews")]
    public bool? Android_progressIndeterminateCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.microsoft.office.outlook")]
    public bool? Android_progressIndeterminateCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.microsoft.skydrive")]
    public bool? Android_progressIndeterminateCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.samsung.android.oneconnect")]
    public bool? Android_progressIndeterminateCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.sand.airdroid")]
    public bool? Android_progressIndeterminateCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.twitter.android")]
    public bool? Android_progressIndeterminateCom_twitter_android { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.whatsapp")]
    public bool? Android_progressIndeterminateCom_whatsapp { get; init; }

    [JsonPropertyName("android.progressIndeterminate_de.axelspringer.yana.zeropage")]
    public bool? Android_progressIndeterminateDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.progressIndeterminate_de.tchibo.app")]
    public bool? Android_progressIndeterminateDe_tchibo_app { get; init; }

    [JsonPropertyName("android.progressIndeterminate_derstandard.at.istandardx")]
    public bool? Android_progressIndeterminateDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.progressMax_at.atrust.tanapp")]
    public double? Android_progressMaxAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.progressMax_at.billa.service")]
    public double? Android_progressMaxAt_billa_service { get; init; }

    [JsonPropertyName("android.progressMax_at.ottoversand.shop")]
    public double? Android_progressMaxAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.progressMax_at.payback.client.android")]
    public double? Android_progressMaxAt_payback_client_android { get; init; }

    [JsonPropertyName("android.progressMax_at.willhaben")]
    public double? Android_progressMaxAt_willhaben { get; init; }

    [JsonPropertyName("android.progressMax_ch.publisheria.bring")]
    public double? Android_progressMaxCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.progressMax_com.amazon.dee.app")]
    public double? Android_progressMaxCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.progressMax_com.android.settings")]
    public double? Android_progressMaxCom_android_settings { get; init; }

    [JsonPropertyName("android.progressMax_com.apalon.weatherlive.free")]
    public double? Android_progressMaxCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.progressMax_com.audible.application")]
    public double? Android_progressMaxCom_audible_application { get; init; }

    [JsonPropertyName("android.progressMax_com.azure.authenticator")]
    public double? Android_progressMaxCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.progressMax_com.dietagespresse.tagespresse")]
    public double? Android_progressMaxCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.progressMax_com.facebook.katana")]
    public double? Android_progressMaxCom_facebook_katana { get; init; }

    [JsonPropertyName("android.progressMax_com.google.android.gms")]
    public double? Android_progressMaxCom_google_android_gms { get; init; }

    [JsonPropertyName("android.progressMax_com.google.android.youtube")]
    public double? Android_progressMaxCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.progressMax_com.instagram.android")]
    public double? Android_progressMaxCom_instagram_android { get; init; }

    [JsonPropertyName("android.progressMax_com.linkedin.android")]
    public double? Android_progressMaxCom_linkedin_android { get; init; }

    [JsonPropertyName("android.progressMax_com.microsoft.amp.apps.bingnews")]
    public double? Android_progressMaxCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.progressMax_com.microsoft.office.outlook")]
    public double? Android_progressMaxCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.progressMax_com.microsoft.skydrive")]
    public double? Android_progressMaxCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.progressMax_com.samsung.android.oneconnect")]
    public double? Android_progressMaxCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.progressMax_com.sand.airdroid")]
    public double? Android_progressMaxCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.progressMax_com.twitter.android")]
    public double? Android_progressMaxCom_twitter_android { get; init; }

    [JsonPropertyName("android.progressMax_com.whatsapp")]
    public double? Android_progressMaxCom_whatsapp { get; init; }

    [JsonPropertyName("android.progressMax_de.axelspringer.yana.zeropage")]
    public double? Android_progressMaxDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.progressMax_de.tchibo.app")]
    public double? Android_progressMaxDe_tchibo_app { get; init; }

    [JsonPropertyName("android.progressMax_derstandard.at.istandardx")]
    public double? Android_progressMaxDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.progress_at.atrust.tanapp")]
    public double? Android_progressAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.progress_at.billa.service")]
    public double? Android_progressAt_billa_service { get; init; }

    [JsonPropertyName("android.progress_at.ottoversand.shop")]
    public double? Android_progressAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.progress_at.payback.client.android")]
    public double? Android_progressAt_payback_client_android { get; init; }

    [JsonPropertyName("android.progress_at.willhaben")]
    public double? Android_progressAt_willhaben { get; init; }

    [JsonPropertyName("android.progress_ch.publisheria.bring")]
    public double? Android_progressCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.progress_com.amazon.dee.app")]
    public double? Android_progressCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.progress_com.android.settings")]
    public double? Android_progressCom_android_settings { get; init; }

    [JsonPropertyName("android.progress_com.apalon.weatherlive.free")]
    public double? Android_progressCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.progress_com.audible.application")]
    public double? Android_progressCom_audible_application { get; init; }

    [JsonPropertyName("android.progress_com.azure.authenticator")]
    public double? Android_progressCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.progress_com.dietagespresse.tagespresse")]
    public double? Android_progressCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.progress_com.facebook.katana")]
    public double? Android_progressCom_facebook_katana { get; init; }

    [JsonPropertyName("android.progress_com.google.android.gms")]
    public double? Android_progressCom_google_android_gms { get; init; }

    [JsonPropertyName("android.progress_com.google.android.youtube")]
    public double? Android_progressCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.progress_com.instagram.android")]
    public double? Android_progressCom_instagram_android { get; init; }

    [JsonPropertyName("android.progress_com.linkedin.android")]
    public double? Android_progressCom_linkedin_android { get; init; }

    [JsonPropertyName("android.progress_com.microsoft.amp.apps.bingnews")]
    public double? Android_progressCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.progress_com.microsoft.office.outlook")]
    public double? Android_progressCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.progress_com.microsoft.skydrive")]
    public double? Android_progressCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.progress_com.samsung.android.oneconnect")]
    public double? Android_progressCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.progress_com.sand.airdroid")]
    public double? Android_progressCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.progress_com.twitter.android")]
    public double? Android_progressCom_twitter_android { get; init; }

    [JsonPropertyName("android.progress_com.whatsapp")]
    public double? Android_progressCom_whatsapp { get; init; }

    [JsonPropertyName("android.progress_de.axelspringer.yana.zeropage")]
    public double? Android_progressDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.progress_de.tchibo.app")]
    public double? Android_progressDe_tchibo_app { get; init; }

    [JsonPropertyName("android.progress_derstandard.at.istandardx")]
    public double? Android_progressDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.reduced.images_at.atrust.tanapp")]
    public bool? Android_reduced_imagesAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.reduced.images_at.billa.service")]
    public bool? Android_reduced_imagesAt_billa_service { get; init; }

    [JsonPropertyName("android.reduced.images_at.ottoversand.shop")]
    public bool? Android_reduced_imagesAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.reduced.images_at.payback.client.android")]
    public bool? Android_reduced_imagesAt_payback_client_android { get; init; }

    [JsonPropertyName("android.reduced.images_at.willhaben")]
    public bool? Android_reduced_imagesAt_willhaben { get; init; }

    [JsonPropertyName("android.reduced.images_ch.publisheria.bring")]
    public bool? Android_reduced_imagesCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.reduced.images_com.amazon.dee.app")]
    public bool? Android_reduced_imagesCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.reduced.images_com.amazon.mShop.android.shopping")]
    public bool? Android_reduced_imagesCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.reduced.images_com.android.settings")]
    public bool? Android_reduced_imagesCom_android_settings { get; init; }

    [JsonPropertyName("android.reduced.images_com.apalon.weatherlive.free")]
    public bool? Android_reduced_imagesCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.reduced.images_com.audible.application")]
    public bool? Android_reduced_imagesCom_audible_application { get; init; }

    [JsonPropertyName("android.reduced.images_com.azure.authenticator")]
    public bool? Android_reduced_imagesCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.reduced.images_com.devexpert.weather")]
    public bool? Android_reduced_imagesCom_devexpert_weather { get; init; }

    [JsonPropertyName("android.reduced.images_com.dietagespresse.tagespresse")]
    public bool? Android_reduced_imagesCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.reduced.images_com.facebook.katana")]
    public bool? Android_reduced_imagesCom_facebook_katana { get; init; }

    [JsonPropertyName("android.reduced.images_com.google.android.gms")]
    public bool? Android_reduced_imagesCom_google_android_gms { get; init; }

    [JsonPropertyName("android.reduced.images_com.google.android.youtube")]
    public bool? Android_reduced_imagesCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.reduced.images_com.instagram.android")]
    public bool? Android_reduced_imagesCom_instagram_android { get; init; }

    [JsonPropertyName("android.reduced.images_com.linkedin.android")]
    public bool? Android_reduced_imagesCom_linkedin_android { get; init; }

    [JsonPropertyName("android.reduced.images_com.microsoft.amp.apps.bingnews")]
    public bool? Android_reduced_imagesCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.reduced.images_com.microsoft.office.outlook")]
    public bool? Android_reduced_imagesCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.reduced.images_com.microsoft.skydrive")]
    public bool? Android_reduced_imagesCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.reduced.images_com.samsung.android.gearoplugin")]
    public bool? Android_reduced_imagesCom_samsung_android_gearoplugin { get; init; }

    [JsonPropertyName("android.reduced.images_com.samsung.android.messaging")]
    public bool? Android_reduced_imagesCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.reduced.images_com.samsung.android.oneconnect")]
    public bool? Android_reduced_imagesCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.reduced.images_com.sand.airdroid")]
    public bool? Android_reduced_imagesCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.reduced.images_com.sec.android.app.shealth")]
    public bool? Android_reduced_imagesCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.reduced.images_com.twitter.android")]
    public bool? Android_reduced_imagesCom_twitter_android { get; init; }

    [JsonPropertyName("android.reduced.images_com.whatsapp")]
    public bool? Android_reduced_imagesCom_whatsapp { get; init; }

    [JsonPropertyName("android.reduced.images_de.axelspringer.yana.zeropage")]
    public bool? Android_reduced_imagesDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.reduced.images_de.tchibo.app")]
    public bool? Android_reduced_imagesDe_tchibo_app { get; init; }

    [JsonPropertyName("android.reduced.images_derstandard.at.istandardx")]
    public bool? Android_reduced_imagesDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.remoteInputHistory_at.atrust.tanapp")]
    public string? Android_remoteInputHistoryAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.remoteInputHistory_at.billa.service")]
    public string? Android_remoteInputHistoryAt_billa_service { get; init; }

    [JsonPropertyName("android.remoteInputHistory_at.ottoversand.shop")]
    public string? Android_remoteInputHistoryAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.remoteInputHistory_at.payback.client.android")]
    public string? Android_remoteInputHistoryAt_payback_client_android { get; init; }

    [JsonPropertyName("android.remoteInputHistory_at.willhaben")]
    public string? Android_remoteInputHistoryAt_willhaben { get; init; }

    [JsonPropertyName("android.remoteInputHistory_ch.publisheria.bring")]
    public string? Android_remoteInputHistoryCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.amazon.dee.app")]
    public string? Android_remoteInputHistoryCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.apalon.weatherlive.free")]
    public string? Android_remoteInputHistoryCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.audible.application")]
    public string? Android_remoteInputHistoryCom_audible_application { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.azure.authenticator")]
    public string? Android_remoteInputHistoryCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.dietagespresse.tagespresse")]
    public string? Android_remoteInputHistoryCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.facebook.katana")]
    public string? Android_remoteInputHistoryCom_facebook_katana { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.google.android.gms")]
    public string? Android_remoteInputHistoryCom_google_android_gms { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.google.android.youtube")]
    public string? Android_remoteInputHistoryCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.instagram.android")]
    public string? Android_remoteInputHistoryCom_instagram_android { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.linkedin.android")]
    public string? Android_remoteInputHistoryCom_linkedin_android { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.microsoft.amp.apps.bingnews")]
    public string? Android_remoteInputHistoryCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.microsoft.office.outlook")]
    public string? Android_remoteInputHistoryCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.microsoft.skydrive")]
    public string? Android_remoteInputHistoryCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.samsung.android.oneconnect")]
    public string? Android_remoteInputHistoryCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.sand.airdroid")]
    public string? Android_remoteInputHistoryCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.twitter.android")]
    public string? Android_remoteInputHistoryCom_twitter_android { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.whatsapp")]
    public string? Android_remoteInputHistoryCom_whatsapp { get; init; }

    [JsonPropertyName("android.remoteInputHistory_de.axelspringer.yana.zeropage")]
    public string? Android_remoteInputHistoryDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.remoteInputHistory_de.tchibo.app")]
    public string? Android_remoteInputHistoryDe_tchibo_app { get; init; }

    [JsonPropertyName("android.remoteInputHistory_derstandard.at.istandardx")]
    public string? Android_remoteInputHistoryDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.selfDisplayName_com.samsung.android.messaging")]
    public string? Android_selfDisplayNameCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.showChronometer_at.atrust.tanapp")]
    public bool? Android_showChronometerAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.showChronometer_at.billa.service")]
    public bool? Android_showChronometerAt_billa_service { get; init; }

    [JsonPropertyName("android.showChronometer_at.ottoversand.shop")]
    public bool? Android_showChronometerAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.showChronometer_at.payback.client.android")]
    public bool? Android_showChronometerAt_payback_client_android { get; init; }

    [JsonPropertyName("android.showChronometer_at.willhaben")]
    public bool? Android_showChronometerAt_willhaben { get; init; }

    [JsonPropertyName("android.showChronometer_ch.publisheria.bring")]
    public bool? Android_showChronometerCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.showChronometer_com.amazon.dee.app")]
    public bool? Android_showChronometerCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.showChronometer_com.apalon.weatherlive.free")]
    public bool? Android_showChronometerCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.showChronometer_com.audible.application")]
    public bool? Android_showChronometerCom_audible_application { get; init; }

    [JsonPropertyName("android.showChronometer_com.azure.authenticator")]
    public bool? Android_showChronometerCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.showChronometer_com.dietagespresse.tagespresse")]
    public bool? Android_showChronometerCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.showChronometer_com.facebook.katana")]
    public bool? Android_showChronometerCom_facebook_katana { get; init; }

    [JsonPropertyName("android.showChronometer_com.google.android.gms")]
    public bool? Android_showChronometerCom_google_android_gms { get; init; }

    [JsonPropertyName("android.showChronometer_com.google.android.youtube")]
    public bool? Android_showChronometerCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.showChronometer_com.instagram.android")]
    public bool? Android_showChronometerCom_instagram_android { get; init; }

    [JsonPropertyName("android.showChronometer_com.linkedin.android")]
    public bool? Android_showChronometerCom_linkedin_android { get; init; }

    [JsonPropertyName("android.showChronometer_com.microsoft.amp.apps.bingnews")]
    public bool? Android_showChronometerCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.showChronometer_com.microsoft.office.outlook")]
    public bool? Android_showChronometerCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.showChronometer_com.microsoft.skydrive")]
    public bool? Android_showChronometerCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.showChronometer_com.samsung.android.oneconnect")]
    public bool? Android_showChronometerCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.showChronometer_com.sand.airdroid")]
    public bool? Android_showChronometerCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.showChronometer_com.twitter.android")]
    public bool? Android_showChronometerCom_twitter_android { get; init; }

    [JsonPropertyName("android.showChronometer_com.whatsapp")]
    public bool? Android_showChronometerCom_whatsapp { get; init; }

    [JsonPropertyName("android.showChronometer_de.axelspringer.yana.zeropage")]
    public bool? Android_showChronometerDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.showChronometer_de.tchibo.app")]
    public bool? Android_showChronometerDe_tchibo_app { get; init; }

    [JsonPropertyName("android.showChronometer_derstandard.at.istandardx")]
    public bool? Android_showChronometerDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.showWhen_at.atrust.tanapp")]
    public bool? Android_showWhenAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.showWhen_at.billa.service")]
    public bool? Android_showWhenAt_billa_service { get; init; }

    [JsonPropertyName("android.showWhen_at.ottoversand.shop")]
    public bool? Android_showWhenAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.showWhen_at.payback.client.android")]
    public bool? Android_showWhenAt_payback_client_android { get; init; }

    [JsonPropertyName("android.showWhen_at.willhaben")]
    public bool? Android_showWhenAt_willhaben { get; init; }

    [JsonPropertyName("android.showWhen_ch.publisheria.bring")]
    public bool? Android_showWhenCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.showWhen_com.amazon.dee.app")]
    public bool? Android_showWhenCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.showWhen_com.android.settings")]
    public bool? Android_showWhenCom_android_settings { get; init; }

    [JsonPropertyName("android.showWhen_com.apalon.weatherlive.free")]
    public bool? Android_showWhenCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.showWhen_com.audible.application")]
    public bool? Android_showWhenCom_audible_application { get; init; }

    [JsonPropertyName("android.showWhen_com.azure.authenticator")]
    public bool? Android_showWhenCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.showWhen_com.dietagespresse.tagespresse")]
    public bool? Android_showWhenCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.showWhen_com.facebook.katana")]
    public bool? Android_showWhenCom_facebook_katana { get; init; }

    [JsonPropertyName("android.showWhen_com.google.android.gms")]
    public bool? Android_showWhenCom_google_android_gms { get; init; }

    [JsonPropertyName("android.showWhen_com.google.android.youtube")]
    public bool? Android_showWhenCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.showWhen_com.instagram.android")]
    public bool? Android_showWhenCom_instagram_android { get; init; }

    [JsonPropertyName("android.showWhen_com.linkedin.android")]
    public bool? Android_showWhenCom_linkedin_android { get; init; }

    [JsonPropertyName("android.showWhen_com.microsoft.amp.apps.bingnews")]
    public bool? Android_showWhenCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.showWhen_com.microsoft.office.outlook")]
    public bool? Android_showWhenCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.showWhen_com.microsoft.skydrive")]
    public bool? Android_showWhenCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.showWhen_com.samsung.android.gearoplugin")]
    public bool? Android_showWhenCom_samsung_android_gearoplugin { get; init; }

    [JsonPropertyName("android.showWhen_com.samsung.android.messaging")]
    public bool? Android_showWhenCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.showWhen_com.samsung.android.oneconnect")]
    public bool? Android_showWhenCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.showWhen_com.sand.airdroid")]
    public bool? Android_showWhenCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.showWhen_com.sec.android.app.shealth")]
    public bool? Android_showWhenCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.showWhen_com.twitter.android")]
    public bool? Android_showWhenCom_twitter_android { get; init; }

    [JsonPropertyName("android.showWhen_com.whatsapp")]
    public bool? Android_showWhenCom_whatsapp { get; init; }

    [JsonPropertyName("android.showWhen_de.axelspringer.yana.zeropage")]
    public bool? Android_showWhenDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.showWhen_de.tchibo.app")]
    public bool? Android_showWhenDe_tchibo_app { get; init; }

    [JsonPropertyName("android.showWhen_derstandard.at.istandardx")]
    public bool? Android_showWhenDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.subText_at.atrust.tanapp")]
    public string? Android_subTextAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.subText_at.billa.service")]
    public string? Android_subTextAt_billa_service { get; init; }

    [JsonPropertyName("android.subText_at.ottoversand.shop")]
    public string? Android_subTextAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.subText_at.payback.client.android")]
    public string? Android_subTextAt_payback_client_android { get; init; }

    [JsonPropertyName("android.subText_at.willhaben")]
    public string? Android_subTextAt_willhaben { get; init; }

    [JsonPropertyName("android.subText_ch.publisheria.bring")]
    public string? Android_subTextCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.subText_com.amazon.dee.app")]
    public string? Android_subTextCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.subText_com.amazon.mShop.android.shopping")]
    public string? Android_subTextCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.subText_com.apalon.weatherlive.free")]
    public string? Android_subTextCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.subText_com.audible.application")]
    public string? Android_subTextCom_audible_application { get; init; }

    [JsonPropertyName("android.subText_com.azure.authenticator")]
    public string? Android_subTextCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.subText_com.dietagespresse.tagespresse")]
    public string? Android_subTextCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.subText_com.facebook.katana")]
    public string? Android_subTextCom_facebook_katana { get; init; }

    [JsonPropertyName("android.subText_com.google.android.gms")]
    public string? Android_subTextCom_google_android_gms { get; init; }

    [JsonPropertyName("android.subText_com.google.android.youtube")]
    public string? Android_subTextCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.subText_com.instagram.android")]
    public string? Android_subTextCom_instagram_android { get; init; }

    [JsonPropertyName("android.subText_com.linkedin.android")]
    public string? Android_subTextCom_linkedin_android { get; init; }

    [JsonPropertyName("android.subText_com.microsoft.amp.apps.bingnews")]
    public string? Android_subTextCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.subText_com.microsoft.office.outlook")]
    public string? Android_subTextCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.subText_com.microsoft.skydrive")]
    public string? Android_subTextCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.subText_com.samsung.android.oneconnect")]
    public string? Android_subTextCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.subText_com.sand.airdroid")]
    public string? Android_subTextCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.subText_com.twitter.android")]
    public string? Android_subTextCom_twitter_android { get; init; }

    [JsonPropertyName("android.subText_com.whatsapp")]
    public string? Android_subTextCom_whatsapp { get; init; }

    [JsonPropertyName("android.subText_de.axelspringer.yana.zeropage")]
    public string? Android_subTextDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.subText_de.tchibo.app")]
    public string? Android_subTextDe_tchibo_app { get; init; }

    [JsonPropertyName("android.subText_derstandard.at.istandardx")]
    public string? Android_subTextDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.substName_com.android.settings")]
    public string? Android_substNameCom_android_settings { get; init; }

    [JsonPropertyName("android.summaryText_ch.publisheria.bring")]
    public string? Android_summaryTextCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.summaryText_com.amazon.mShop.android.shopping")]
    public string? Android_summaryTextCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.summaryText_com.dietagespresse.tagespresse")]
    public string? Android_summaryTextCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.summaryText_com.google.android.youtube")]
    public string? Android_summaryTextCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.summaryText_com.microsoft.office.outlook")]
    public string? Android_summaryTextCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.support.v4.app.extra.COMPAT_TEMPLATE_com.google.android.gms")]
    public string? Android_support_v4_app_extra_COMPATTEMPLATECom_google_android_gms { get; init; }

    [JsonPropertyName("android.support.v4.app.extra.COMPAT_TEMPLATE_com.google.android.youtube")]
    public string? Android_support_v4_app_extra_COMPATTEMPLATECom_google_android_youtube { get; init; }

    [JsonPropertyName("android.template_at.atrust.tanapp")]
    public string? Android_templateAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.template_at.billa.service")]
    public string? Android_templateAt_billa_service { get; init; }

    [JsonPropertyName("android.template_at.ottoversand.shop")]
    public string? Android_templateAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.template_at.payback.client.android")]
    public string? Android_templateAt_payback_client_android { get; init; }

    [JsonPropertyName("android.template_at.willhaben")]
    public string? Android_templateAt_willhaben { get; init; }

    [JsonPropertyName("android.template_ch.publisheria.bring")]
    public string? Android_templateCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.template_com.amazon.dee.app")]
    public string? Android_templateCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.template_com.amazon.mShop.android.shopping")]
    public string? Android_templateCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.template_com.android.settings")]
    public string? Android_templateCom_android_settings { get; init; }

    [JsonPropertyName("android.template_com.dietagespresse.tagespresse")]
    public string? Android_templateCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.template_com.facebook.katana")]
    public string? Android_templateCom_facebook_katana { get; init; }

    [JsonPropertyName("android.template_com.google.android.gms")]
    public string? Android_templateCom_google_android_gms { get; init; }

    [JsonPropertyName("android.template_com.google.android.youtube")]
    public string? Android_templateCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.template_com.instagram.android")]
    public string? Android_templateCom_instagram_android { get; init; }

    [JsonPropertyName("android.template_com.linkedin.android")]
    public string? Android_templateCom_linkedin_android { get; init; }

    [JsonPropertyName("android.template_com.microsoft.amp.apps.bingnews")]
    public string? Android_templateCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.template_com.microsoft.office.outlook")]
    public string? Android_templateCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.template_com.microsoft.skydrive")]
    public string? Android_templateCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.template_com.samsung.android.gearoplugin")]
    public string? Android_templateCom_samsung_android_gearoplugin { get; init; }

    [JsonPropertyName("android.template_com.samsung.android.messaging")]
    public string? Android_templateCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.template_com.samsung.android.oneconnect")]
    public string? Android_templateCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.template_com.sec.android.app.shealth")]
    public string? Android_templateCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.template_com.twitter.android")]
    public string? Android_templateCom_twitter_android { get; init; }

    [JsonPropertyName("android.template_com.whatsapp")]
    public string? Android_templateCom_whatsapp { get; init; }

    [JsonPropertyName("android.template_de.axelspringer.yana.zeropage")]
    public string? Android_templateDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.template_de.tchibo.app")]
    public string? Android_templateDe_tchibo_app { get; init; }

    [JsonPropertyName("android.template_derstandard.at.istandardx")]
    public string? Android_templateDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.textLines_com.microsoft.office.outlook")]
    public IReadOnlyList<string>? Android_textLinesCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.text_at.atrust.tanapp")]
    public string? Android_textAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.text_at.billa.service")]
    public string? Android_textAt_billa_service { get; init; }

    [JsonPropertyName("android.text_at.ottoversand.shop")]
    public string? Android_textAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.text_at.payback.client.android")]
    public string? Android_textAt_payback_client_android { get; init; }

    [JsonPropertyName("android.text_at.willhaben")]
    public string? Android_textAt_willhaben { get; init; }

    [JsonPropertyName("android.text_ch.publisheria.bring")]
    public string? Android_textCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.text_com.amazon.dee.app")]
    public string? Android_textCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.text_com.amazon.mShop.android.shopping")]
    public string? Android_textCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.text_com.android.settings")]
    public string? Android_textCom_android_settings { get; init; }

    [JsonPropertyName("android.text_com.apalon.weatherlive.free")]
    public string? Android_textCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.text_com.audible.application")]
    public string? Android_textCom_audible_application { get; init; }

    [JsonPropertyName("android.text_com.azure.authenticator")]
    public string? Android_textCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.text_com.devexpert.weather")]
    public string? Android_textCom_devexpert_weather { get; init; }

    [JsonPropertyName("android.text_com.dietagespresse.tagespresse")]
    public string? Android_textCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.text_com.facebook.katana")]
    public string? Android_textCom_facebook_katana { get; init; }

    [JsonPropertyName("android.text_com.google.android.gms")]
    public string? Android_textCom_google_android_gms { get; init; }

    [JsonPropertyName("android.text_com.google.android.youtube")]
    public string? Android_textCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.text_com.instagram.android")]
    public string? Android_textCom_instagram_android { get; init; }

    [JsonPropertyName("android.text_com.linkedin.android")]
    public string? Android_textCom_linkedin_android { get; init; }

    [JsonPropertyName("android.text_com.microsoft.amp.apps.bingnews")]
    public string? Android_textCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.text_com.microsoft.office.outlook")]
    public string? Android_textCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.text_com.microsoft.skydrive")]
    public string? Android_textCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.text_com.samsung.android.gearoplugin")]
    public string? Android_textCom_samsung_android_gearoplugin { get; init; }

    [JsonPropertyName("android.text_com.samsung.android.messaging")]
    public string? Android_textCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.text_com.samsung.android.oneconnect")]
    public string? Android_textCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.text_com.sand.airdroid")]
    public string? Android_textCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.text_com.sec.android.app.shealth")]
    public string? Android_textCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.text_com.twitter.android")]
    public string? Android_textCom_twitter_android { get; init; }

    [JsonPropertyName("android.text_com.whatsapp")]
    public string? Android_textCom_whatsapp { get; init; }

    [JsonPropertyName("android.text_de.axelspringer.yana.zeropage")]
    public string? Android_textDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.text_de.tchibo.app")]
    public string? Android_textDe_tchibo_app { get; init; }

    [JsonPropertyName("android.text_derstandard.at.istandardx")]
    public string? Android_textDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("android.title.big_ch.publisheria.bring")]
    public string? Android_title_bigCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.title.big_com.amazon.mShop.android.shopping")]
    public string? Android_title_bigCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.title.big_com.google.android.gms")]
    public string? Android_title_bigCom_google_android_gms { get; init; }

    [JsonPropertyName("android.title.big_com.google.android.youtube")]
    public string? Android_title_bigCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.title.big_com.microsoft.office.outlook")]
    public string? Android_title_bigCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.title.big_com.sec.android.app.shealth")]
    public string? Android_title_bigCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.title_at.atrust.tanapp")]
    public string? Android_titleAt_atrust_tanapp { get; init; }

    [JsonPropertyName("android.title_at.billa.service")]
    public string? Android_titleAt_billa_service { get; init; }

    [JsonPropertyName("android.title_at.ottoversand.shop")]
    public string? Android_titleAt_ottoversand_shop { get; init; }

    [JsonPropertyName("android.title_at.payback.client.android")]
    public string? Android_titleAt_payback_client_android { get; init; }

    [JsonPropertyName("android.title_at.willhaben")]
    public string? Android_titleAt_willhaben { get; init; }

    [JsonPropertyName("android.title_ch.publisheria.bring")]
    public string? Android_titleCh_publisheria_bring { get; init; }

    [JsonPropertyName("android.title_com.amazon.dee.app")]
    public string? Android_titleCom_amazon_dee_app { get; init; }

    [JsonPropertyName("android.title_com.amazon.mShop.android.shopping")]
    public string? Android_titleCom_amazon_mShop_android_shopping { get; init; }

    [JsonPropertyName("android.title_com.android.settings")]
    public string? Android_titleCom_android_settings { get; init; }

    [JsonPropertyName("android.title_com.apalon.weatherlive.free")]
    public string? Android_titleCom_apalon_weatherlive_free { get; init; }

    [JsonPropertyName("android.title_com.audible.application")]
    public string? Android_titleCom_audible_application { get; init; }

    [JsonPropertyName("android.title_com.azure.authenticator")]
    public string? Android_titleCom_azure_authenticator { get; init; }

    [JsonPropertyName("android.title_com.devexpert.weather")]
    public string? Android_titleCom_devexpert_weather { get; init; }

    [JsonPropertyName("android.title_com.dietagespresse.tagespresse")]
    public string? Android_titleCom_dietagespresse_tagespresse { get; init; }

    [JsonPropertyName("android.title_com.facebook.katana")]
    public string? Android_titleCom_facebook_katana { get; init; }

    [JsonPropertyName("android.title_com.google.android.gms")]
    public string? Android_titleCom_google_android_gms { get; init; }

    [JsonPropertyName("android.title_com.google.android.youtube")]
    public string? Android_titleCom_google_android_youtube { get; init; }

    [JsonPropertyName("android.title_com.instagram.android")]
    public string? Android_titleCom_instagram_android { get; init; }

    [JsonPropertyName("android.title_com.linkedin.android")]
    public string? Android_titleCom_linkedin_android { get; init; }

    [JsonPropertyName("android.title_com.microsoft.amp.apps.bingnews")]
    public string? Android_titleCom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("android.title_com.microsoft.office.outlook")]
    public string? Android_titleCom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("android.title_com.microsoft.skydrive")]
    public string? Android_titleCom_microsoft_skydrive { get; init; }

    [JsonPropertyName("android.title_com.samsung.android.gearoplugin")]
    public string? Android_titleCom_samsung_android_gearoplugin { get; init; }

    [JsonPropertyName("android.title_com.samsung.android.messaging")]
    public string? Android_titleCom_samsung_android_messaging { get; init; }

    [JsonPropertyName("android.title_com.samsung.android.oneconnect")]
    public string? Android_titleCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("android.title_com.sand.airdroid")]
    public string? Android_titleCom_sand_airdroid { get; init; }

    [JsonPropertyName("android.title_com.sec.android.app.shealth")]
    public string? Android_titleCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("android.title_com.twitter.android")]
    public string? Android_titleCom_twitter_android { get; init; }

    [JsonPropertyName("android.title_com.whatsapp")]
    public string? Android_titleCom_whatsapp { get; init; }

    [JsonPropertyName("android.title_de.axelspringer.yana.zeropage")]
    public string? Android_titleDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("android.title_de.tchibo.app")]
    public string? Android_titleDe_tchibo_app { get; init; }

    [JsonPropertyName("android.title_derstandard.at.istandardx")]
    public string? Android_titleDerstandard_at_istandardx { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_at.ottoversand.shop")]
    public string? Androidx_core_app_extra_COMPATTEMPLATEAt_ottoversand_shop { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_at.payback.client.android")]
    public string? Androidx_core_app_extra_COMPATTEMPLATEAt_payback_client_android { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_at.willhaben")]
    public string? Androidx_core_app_extra_COMPATTEMPLATEAt_willhaben { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_ch.publisheria.bring")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECh_publisheria_bring { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.facebook.katana")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_facebook_katana { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.instagram.android")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_instagram_android { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.linkedin.android")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_linkedin_android { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.microsoft.amp.apps.bingnews")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_microsoft_amp_apps_bingnews { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.microsoft.office.outlook")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_microsoft_office_outlook { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.microsoft.skydrive")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_microsoft_skydrive { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.samsung.android.oneconnect")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.twitter.android")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_twitter_android { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.whatsapp")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_whatsapp { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_de.axelspringer.yana.zeropage")]
    public string? Androidx_core_app_extra_COMPATTEMPLATEDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_de.tchibo.app")]
    public string? Androidx_core_app_extra_COMPATTEMPLATEDe_tchibo_app { get; init; }

    [JsonPropertyName("at.atrust.tanapp_0_is_clearable")]
    public bool? At_atrust_tanapp0IsClearable { get; init; }

    [JsonPropertyName("at.atrust.tanapp_0_is_ongoing")]
    public bool? At_atrust_tanapp0IsOngoing { get; init; }

    [JsonPropertyName("at.atrust.tanapp_0_post_time")]
    public double? At_atrust_tanapp0PostTime { get; init; }

    [JsonPropertyName("at.billa.service_1790299386_is_clearable")]
    public bool? At_billa_service1790299386IsClearable { get; init; }

    [JsonPropertyName("at.billa.service_1790299386_is_ongoing")]
    public bool? At_billa_service1790299386IsOngoing { get; init; }

    [JsonPropertyName("at.billa.service_1790299386_post_time")]
    public double? At_billa_service1790299386PostTime { get; init; }

    [JsonPropertyName("at.billa.service_1900045382_is_clearable")]
    public bool? At_billa_service1900045382IsClearable { get; init; }

    [JsonPropertyName("at.billa.service_1900045382_is_ongoing")]
    public bool? At_billa_service1900045382IsOngoing { get; init; }

    [JsonPropertyName("at.billa.service_1900045382_post_time")]
    public double? At_billa_service1900045382PostTime { get; init; }

    [JsonPropertyName("at.ottoversand.shop_1006_is_clearable")]
    public bool? At_ottoversand_shop1006IsClearable { get; init; }

    [JsonPropertyName("at.ottoversand.shop_1006_is_ongoing")]
    public bool? At_ottoversand_shop1006IsOngoing { get; init; }

    [JsonPropertyName("at.ottoversand.shop_1006_post_time")]
    public double? At_ottoversand_shop1006PostTime { get; init; }

    [JsonPropertyName("at.payback.client.android_0_is_clearable")]
    public bool? At_payback_client_android0IsClearable { get; init; }

    [JsonPropertyName("at.payback.client.android_0_is_ongoing")]
    public bool? At_payback_client_android0IsOngoing { get; init; }

    [JsonPropertyName("at.payback.client.android_0_post_time")]
    public double? At_payback_client_android0PostTime { get; init; }

    [JsonPropertyName("at.willhaben_1536829687_is_clearable")]
    public bool? At_willhaben1536829687IsClearable { get; init; }

    [JsonPropertyName("at.willhaben_1536829687_is_ongoing")]
    public bool? At_willhaben1536829687IsOngoing { get; init; }

    [JsonPropertyName("at.willhaben_1536829687_post_time")]
    public double? At_willhaben1536829687PostTime { get; init; }

    [JsonPropertyName("ch.publisheria.bring_1_is_clearable")]
    public bool? Ch_publisheria_bring1IsClearable { get; init; }

    [JsonPropertyName("ch.publisheria.bring_1_is_ongoing")]
    public bool? Ch_publisheria_bring1IsOngoing { get; init; }

    [JsonPropertyName("ch.publisheria.bring_1_post_time")]
    public double? Ch_publisheria_bring1PostTime { get; init; }

    [JsonPropertyName("channel_id_com.sec.android.app.shealth")]
    public string? ChannelIdCom_sec_android_app_shealth { get; init; }

    [JsonPropertyName("client_id_com.google.android.youtube")]
    public string? ClientIdCom_google_android_youtube { get; init; }

    [JsonPropertyName("com.amazon.dee.app_1_is_clearable")]
    public bool? Com_amazon_dee_app1IsClearable { get; init; }

    [JsonPropertyName("com.amazon.dee.app_1_is_ongoing")]
    public bool? Com_amazon_dee_app1IsOngoing { get; init; }

    [JsonPropertyName("com.amazon.dee.app_1_post_time")]
    public double? Com_amazon_dee_app1PostTime { get; init; }

    [JsonPropertyName("com.amazon.mShop.android.shopping_1_is_clearable")]
    public bool? Com_amazon_mShop_android_shopping1IsClearable { get; init; }

    [JsonPropertyName("com.amazon.mShop.android.shopping_1_is_ongoing")]
    public bool? Com_amazon_mShop_android_shopping1IsOngoing { get; init; }

    [JsonPropertyName("com.amazon.mShop.android.shopping_1_post_time")]
    public double? Com_amazon_mShop_android_shopping1PostTime { get; init; }

    [JsonPropertyName("com.android.settings_1004_is_clearable")]
    public bool? Com_android_settings1004IsClearable { get; init; }

    [JsonPropertyName("com.android.settings_1004_is_ongoing")]
    public bool? Com_android_settings1004IsOngoing { get; init; }

    [JsonPropertyName("com.android.settings_1004_post_time")]
    public double? Com_android_settings1004PostTime { get; init; }

    [JsonPropertyName("com.apalon.weatherlive.free_-1012245645_is_clearable")]
    public bool? Com_apalon_weatherlive_free1012245645IsClearable { get; init; }

    [JsonPropertyName("com.apalon.weatherlive.free_-1012245645_is_ongoing")]
    public bool? Com_apalon_weatherlive_free1012245645IsOngoing { get; init; }

    [JsonPropertyName("com.apalon.weatherlive.free_-1012245645_post_time")]
    public double? Com_apalon_weatherlive_free1012245645PostTime { get; init; }

    [JsonPropertyName("com.audible.application_1520196174_is_clearable")]
    public bool? Com_audible_application1520196174IsClearable { get; init; }

    [JsonPropertyName("com.audible.application_1520196174_is_ongoing")]
    public bool? Com_audible_application1520196174IsOngoing { get; init; }

    [JsonPropertyName("com.audible.application_1520196174_post_time")]
    public double? Com_audible_application1520196174PostTime { get; init; }

    [JsonPropertyName("com.azure.authenticator_2_is_clearable")]
    public bool? Com_azure_authenticator2IsClearable { get; init; }

    [JsonPropertyName("com.azure.authenticator_2_is_ongoing")]
    public bool? Com_azure_authenticator2IsOngoing { get; init; }

    [JsonPropertyName("com.azure.authenticator_2_post_time")]
    public double? Com_azure_authenticator2PostTime { get; init; }

    [JsonPropertyName("com.devexpert.weather_13_is_clearable")]
    public bool? Com_devexpert_weather13IsClearable { get; init; }

    [JsonPropertyName("com.devexpert.weather_13_is_ongoing")]
    public bool? Com_devexpert_weather13IsOngoing { get; init; }

    [JsonPropertyName("com.devexpert.weather_13_post_time")]
    public double? Com_devexpert_weather13PostTime { get; init; }

    [JsonPropertyName("com.devexpert.weather_3_is_clearable")]
    public bool? Com_devexpert_weather3IsClearable { get; init; }

    [JsonPropertyName("com.devexpert.weather_3_is_ongoing")]
    public bool? Com_devexpert_weather3IsOngoing { get; init; }

    [JsonPropertyName("com.devexpert.weather_3_post_time")]
    public double? Com_devexpert_weather3PostTime { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-1883532359_is_clearable")]
    public bool? Com_dietagespresse_tagespresse1883532359IsClearable { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-1883532359_is_ongoing")]
    public bool? Com_dietagespresse_tagespresse1883532359IsOngoing { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-1883532359_post_time")]
    public double? Com_dietagespresse_tagespresse1883532359PostTime { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-265038904_is_clearable")]
    public bool? Com_dietagespresse_tagespresse265038904IsClearable { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-265038904_is_ongoing")]
    public bool? Com_dietagespresse_tagespresse265038904IsOngoing { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-265038904_post_time")]
    public double? Com_dietagespresse_tagespresse265038904PostTime { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-491276595_is_clearable")]
    public bool? Com_dietagespresse_tagespresse491276595IsClearable { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-491276595_is_ongoing")]
    public bool? Com_dietagespresse_tagespresse491276595IsOngoing { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-491276595_post_time")]
    public double? Com_dietagespresse_tagespresse491276595PostTime { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-574481407_is_clearable")]
    public bool? Com_dietagespresse_tagespresse574481407IsClearable { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-574481407_is_ongoing")]
    public bool? Com_dietagespresse_tagespresse574481407IsOngoing { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_-574481407_post_time")]
    public double? Com_dietagespresse_tagespresse574481407PostTime { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_1274353155_is_clearable")]
    public bool? Com_dietagespresse_tagespresse1274353155IsClearable { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_1274353155_is_ongoing")]
    public bool? Com_dietagespresse_tagespresse1274353155IsOngoing { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_1274353155_post_time")]
    public double? Com_dietagespresse_tagespresse1274353155PostTime { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_1759330398_is_clearable")]
    public bool? Com_dietagespresse_tagespresse1759330398IsClearable { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_1759330398_is_ongoing")]
    public bool? Com_dietagespresse_tagespresse1759330398IsOngoing { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_1759330398_post_time")]
    public double? Com_dietagespresse_tagespresse1759330398PostTime { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_2147483647_is_clearable")]
    public bool? Com_dietagespresse_tagespresse2147483647IsClearable { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_2147483647_is_ongoing")]
    public bool? Com_dietagespresse_tagespresse2147483647IsOngoing { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_2147483647_post_time")]
    public double? Com_dietagespresse_tagespresse2147483647PostTime { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_740053469_is_clearable")]
    public bool? Com_dietagespresse_tagespresse740053469IsClearable { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_740053469_is_ongoing")]
    public bool? Com_dietagespresse_tagespresse740053469IsOngoing { get; init; }

    [JsonPropertyName("com.dietagespresse.tagespresse_740053469_post_time")]
    public double? Com_dietagespresse_tagespresse740053469PostTime { get; init; }

    [JsonPropertyName("com.facebook.katana_-807246506_is_clearable")]
    public bool? Com_facebook_katana807246506IsClearable { get; init; }

    [JsonPropertyName("com.facebook.katana_-807246506_is_ongoing")]
    public bool? Com_facebook_katana807246506IsOngoing { get; init; }

    [JsonPropertyName("com.facebook.katana_-807246506_post_time")]
    public double? Com_facebook_katana807246506PostTime { get; init; }

    [JsonPropertyName("com.facebook.katana_0_is_clearable")]
    public bool? Com_facebook_katana0IsClearable { get; init; }

    [JsonPropertyName("com.facebook.katana_0_is_ongoing")]
    public bool? Com_facebook_katana0IsOngoing { get; init; }

    [JsonPropertyName("com.facebook.katana_0_post_time")]
    public double? Com_facebook_katana0PostTime { get; init; }

    [JsonPropertyName("com.google.android.gms_1000_is_clearable")]
    public bool? Com_google_android_gms1000IsClearable { get; init; }

    [JsonPropertyName("com.google.android.gms_1000_is_ongoing")]
    public bool? Com_google_android_gms1000IsOngoing { get; init; }

    [JsonPropertyName("com.google.android.gms_1000_post_time")]
    public double? Com_google_android_gms1000PostTime { get; init; }

    [JsonPropertyName("com.google.android.gms_2147483647_is_clearable")]
    public bool? Com_google_android_gms2147483647IsClearable { get; init; }

    [JsonPropertyName("com.google.android.gms_2147483647_is_ongoing")]
    public bool? Com_google_android_gms2147483647IsOngoing { get; init; }

    [JsonPropertyName("com.google.android.gms_2147483647_post_time")]
    public double? Com_google_android_gms2147483647PostTime { get; init; }

    [JsonPropertyName("com.google.android.youtube_99_is_clearable")]
    public bool? Com_google_android_youtube99IsClearable { get; init; }

    [JsonPropertyName("com.google.android.youtube_99_is_ongoing")]
    public bool? Com_google_android_youtube99IsOngoing { get; init; }

    [JsonPropertyName("com.google.android.youtube_99_post_time")]
    public double? Com_google_android_youtube99PostTime { get; init; }

    [JsonPropertyName("com.instagram.android_64278_is_clearable")]
    public bool? Com_instagram_android64278IsClearable { get; init; }

    [JsonPropertyName("com.instagram.android_64278_is_ongoing")]
    public bool? Com_instagram_android64278IsOngoing { get; init; }

    [JsonPropertyName("com.instagram.android_64278_post_time")]
    public double? Com_instagram_android64278PostTime { get; init; }

    [JsonPropertyName("com.linkedin.android_87382020_is_clearable")]
    public bool? Com_linkedin_android87382020IsClearable { get; init; }

    [JsonPropertyName("com.linkedin.android_87382020_is_ongoing")]
    public bool? Com_linkedin_android87382020IsOngoing { get; init; }

    [JsonPropertyName("com.linkedin.android_87382020_post_time")]
    public double? Com_linkedin_android87382020PostTime { get; init; }

    [JsonPropertyName("com.microsoft.amp.apps.bingnews_0_is_clearable")]
    public bool? Com_microsoft_amp_apps_bingnews0IsClearable { get; init; }

    [JsonPropertyName("com.microsoft.amp.apps.bingnews_0_is_ongoing")]
    public bool? Com_microsoft_amp_apps_bingnews0IsOngoing { get; init; }

    [JsonPropertyName("com.microsoft.amp.apps.bingnews_0_post_time")]
    public double? Com_microsoft_amp_apps_bingnews0PostTime { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_1_is_clearable")]
    public bool? Com_microsoft_office_outlook1IsClearable { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_1_is_ongoing")]
    public bool? Com_microsoft_office_outlook1IsOngoing { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_1_post_time")]
    public double? Com_microsoft_office_outlook1PostTime { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_2_is_clearable")]
    public bool? Com_microsoft_office_outlook2IsClearable { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_2_is_ongoing")]
    public bool? Com_microsoft_office_outlook2IsOngoing { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_2_post_time")]
    public double? Com_microsoft_office_outlook2PostTime { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72768_is_clearable")]
    public bool? Com_microsoft_office_outlook72768IsClearable { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72768_is_ongoing")]
    public bool? Com_microsoft_office_outlook72768IsOngoing { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72768_post_time")]
    public double? Com_microsoft_office_outlook72768PostTime { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72769_is_clearable")]
    public bool? Com_microsoft_office_outlook72769IsClearable { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72769_is_ongoing")]
    public bool? Com_microsoft_office_outlook72769IsOngoing { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72769_post_time")]
    public double? Com_microsoft_office_outlook72769PostTime { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72770_is_clearable")]
    public bool? Com_microsoft_office_outlook72770IsClearable { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72770_is_ongoing")]
    public bool? Com_microsoft_office_outlook72770IsOngoing { get; init; }

    [JsonPropertyName("com.microsoft.office.outlook_72770_post_time")]
    public double? Com_microsoft_office_outlook72770PostTime { get; init; }

    [JsonPropertyName("com.microsoft.skydrive_2147483647_is_clearable")]
    public bool? Com_microsoft_skydrive2147483647IsClearable { get; init; }

    [JsonPropertyName("com.microsoft.skydrive_2147483647_is_ongoing")]
    public bool? Com_microsoft_skydrive2147483647IsOngoing { get; init; }

    [JsonPropertyName("com.microsoft.skydrive_2147483647_post_time")]
    public double? Com_microsoft_skydrive2147483647PostTime { get; init; }

    [JsonPropertyName("com.microsoft.skydrive_2888_is_clearable")]
    public bool? Com_microsoft_skydrive2888IsClearable { get; init; }

    [JsonPropertyName("com.microsoft.skydrive_2888_is_ongoing")]
    public bool? Com_microsoft_skydrive2888IsOngoing { get; init; }

    [JsonPropertyName("com.microsoft.skydrive_2888_post_time")]
    public double? Com_microsoft_skydrive2888PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.gearoplugin_721_is_clearable")]
    public bool? Com_samsung_android_gearoplugin721IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.gearoplugin_721_is_ongoing")]
    public bool? Com_samsung_android_gearoplugin721IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.gearoplugin_721_post_time")]
    public double? Com_samsung_android_gearoplugin721PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.messaging_123_is_clearable")]
    public bool? Com_samsung_android_messaging123IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.messaging_123_is_ongoing")]
    public bool? Com_samsung_android_messaging123IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.messaging_123_post_time")]
    public double? Com_samsung_android_messaging123PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-276623521_is_clearable")]
    public bool? Com_samsung_android_oneconnect276623521IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-276623521_is_ongoing")]
    public bool? Com_samsung_android_oneconnect276623521IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-276623521_post_time")]
    public double? Com_samsung_android_oneconnect276623521PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-305462319_is_clearable")]
    public bool? Com_samsung_android_oneconnect305462319IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-305462319_is_ongoing")]
    public bool? Com_samsung_android_oneconnect305462319IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-305462319_post_time")]
    public double? Com_samsung_android_oneconnect305462319PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-315857247_is_clearable")]
    public bool? Com_samsung_android_oneconnect315857247IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-315857247_is_ongoing")]
    public bool? Com_samsung_android_oneconnect315857247IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-315857247_post_time")]
    public double? Com_samsung_android_oneconnect315857247PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-385854032_is_clearable")]
    public bool? Com_samsung_android_oneconnect385854032IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-385854032_is_ongoing")]
    public bool? Com_samsung_android_oneconnect385854032IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-385854032_post_time")]
    public double? Com_samsung_android_oneconnect385854032PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-416144917_is_clearable")]
    public bool? Com_samsung_android_oneconnect416144917IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-416144917_is_ongoing")]
    public bool? Com_samsung_android_oneconnect416144917IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-416144917_post_time")]
    public double? Com_samsung_android_oneconnect416144917PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-456980224_is_clearable")]
    public bool? Com_samsung_android_oneconnect456980224IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-456980224_is_ongoing")]
    public bool? Com_samsung_android_oneconnect456980224IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-456980224_post_time")]
    public double? Com_samsung_android_oneconnect456980224PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-542126015_is_clearable")]
    public bool? Com_samsung_android_oneconnect542126015IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-542126015_is_ongoing")]
    public bool? Com_samsung_android_oneconnect542126015IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-542126015_post_time")]
    public double? Com_samsung_android_oneconnect542126015PostTime { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-542126029_is_clearable")]
    public bool? Com_samsung_android_oneconnect542126029IsClearable { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-542126029_is_ongoing")]
    public bool? Com_samsung_android_oneconnect542126029IsOngoing { get; init; }

    [JsonPropertyName("com.samsung.android.oneconnect_-542126029_post_time")]
    public double? Com_samsung_android_oneconnect542126029PostTime { get; init; }

    [JsonPropertyName("com.sand.airdroid_100_is_clearable")]
    public bool? Com_sand_airdroid100IsClearable { get; init; }

    [JsonPropertyName("com.sand.airdroid_100_is_ongoing")]
    public bool? Com_sand_airdroid100IsOngoing { get; init; }

    [JsonPropertyName("com.sand.airdroid_100_post_time")]
    public double? Com_sand_airdroid100PostTime { get; init; }

    [JsonPropertyName("com.sec.android.app.shealth_105_is_clearable")]
    public bool? Com_sec_android_app_shealth105IsClearable { get; init; }

    [JsonPropertyName("com.sec.android.app.shealth_105_is_ongoing")]
    public bool? Com_sec_android_app_shealth105IsOngoing { get; init; }

    [JsonPropertyName("com.sec.android.app.shealth_105_post_time")]
    public double? Com_sec_android_app_shealth105PostTime { get; init; }

    [JsonPropertyName("com.sec.android.app.shealth_1_is_clearable")]
    public bool? Com_sec_android_app_shealth1IsClearable { get; init; }

    [JsonPropertyName("com.sec.android.app.shealth_1_is_ongoing")]
    public bool? Com_sec_android_app_shealth1IsOngoing { get; init; }

    [JsonPropertyName("com.sec.android.app.shealth_1_post_time")]
    public double? Com_sec_android_app_shealth1PostTime { get; init; }

    [JsonPropertyName("com.twitter.android_1157_is_clearable")]
    public bool? Com_twitter_android1157IsClearable { get; init; }

    [JsonPropertyName("com.twitter.android_1157_is_ongoing")]
    public bool? Com_twitter_android1157IsOngoing { get; init; }

    [JsonPropertyName("com.twitter.android_1157_post_time")]
    public double? Com_twitter_android1157PostTime { get; init; }

    [JsonPropertyName("com.whatsapp_20_is_clearable")]
    public bool? Com_whatsapp20IsClearable { get; init; }

    [JsonPropertyName("com.whatsapp_20_is_ongoing")]
    public bool? Com_whatsapp20IsOngoing { get; init; }

    [JsonPropertyName("com.whatsapp_20_post_time")]
    public double? Com_whatsapp20PostTime { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_2147483647_is_clearable")]
    public bool? De_axelspringer_yana_zeropage2147483647IsClearable { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_2147483647_is_ongoing")]
    public bool? De_axelspringer_yana_zeropage2147483647IsOngoing { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_2147483647_post_time")]
    public double? De_axelspringer_yana_zeropage2147483647PostTime { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_2_is_clearable")]
    public bool? De_axelspringer_yana_zeropage2IsClearable { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_2_is_ongoing")]
    public bool? De_axelspringer_yana_zeropage2IsOngoing { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_2_post_time")]
    public double? De_axelspringer_yana_zeropage2PostTime { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_3_is_clearable")]
    public bool? De_axelspringer_yana_zeropage3IsClearable { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_3_is_ongoing")]
    public bool? De_axelspringer_yana_zeropage3IsOngoing { get; init; }

    [JsonPropertyName("de.axelspringer.yana.zeropage_3_post_time")]
    public double? De_axelspringer_yana_zeropage3PostTime { get; init; }

    [JsonPropertyName("de.tchibo.app_0_is_clearable")]
    public bool? De_tchibo_app0IsClearable { get; init; }

    [JsonPropertyName("de.tchibo.app_0_is_ongoing")]
    public bool? De_tchibo_app0IsOngoing { get; init; }

    [JsonPropertyName("de.tchibo.app_0_post_time")]
    public double? De_tchibo_app0PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232059943_is_clearable")]
    public bool? Derstandard_at_istandardx232059943IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232059943_is_ongoing")]
    public bool? Derstandard_at_istandardx232059943IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232059943_post_time")]
    public double? Derstandard_at_istandardx232059943PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232060992_is_clearable")]
    public bool? Derstandard_at_istandardx232060992IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232060992_is_ongoing")]
    public bool? Derstandard_at_istandardx232060992IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232060992_post_time")]
    public double? Derstandard_at_istandardx232060992PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232089879_is_clearable")]
    public bool? Derstandard_at_istandardx232089879IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232089879_is_ongoing")]
    public bool? Derstandard_at_istandardx232089879IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-232089879_post_time")]
    public double? Derstandard_at_istandardx232089879PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-236734447_is_clearable")]
    public bool? Derstandard_at_istandardx236734447IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-236734447_is_ongoing")]
    public bool? Derstandard_at_istandardx236734447IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-236734447_post_time")]
    public double? Derstandard_at_istandardx236734447PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246730302_is_clearable")]
    public bool? Derstandard_at_istandardx246730302IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246730302_is_ongoing")]
    public bool? Derstandard_at_istandardx246730302IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246730302_post_time")]
    public double? Derstandard_at_istandardx246730302PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246731504_is_clearable")]
    public bool? Derstandard_at_istandardx246731504IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246731504_is_ongoing")]
    public bool? Derstandard_at_istandardx246731504IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246731504_post_time")]
    public double? Derstandard_at_istandardx246731504PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246732837_is_clearable")]
    public bool? Derstandard_at_istandardx246732837IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246732837_is_ongoing")]
    public bool? Derstandard_at_istandardx246732837IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-246732837_post_time")]
    public double? Derstandard_at_istandardx246732837PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-288995805_is_clearable")]
    public bool? Derstandard_at_istandardx288995805IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-288995805_is_ongoing")]
    public bool? Derstandard_at_istandardx288995805IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-288995805_post_time")]
    public double? Derstandard_at_istandardx288995805PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-295187987_is_clearable")]
    public bool? Derstandard_at_istandardx295187987IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-295187987_is_ongoing")]
    public bool? Derstandard_at_istandardx295187987IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-295187987_post_time")]
    public double? Derstandard_at_istandardx295187987PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-295845210_is_clearable")]
    public bool? Derstandard_at_istandardx295845210IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-295845210_is_ongoing")]
    public bool? Derstandard_at_istandardx295845210IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-295845210_post_time")]
    public double? Derstandard_at_istandardx295845210PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-306308610_is_clearable")]
    public bool? Derstandard_at_istandardx306308610IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-306308610_is_ongoing")]
    public bool? Derstandard_at_istandardx306308610IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-306308610_post_time")]
    public double? Derstandard_at_istandardx306308610PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-309065302_is_clearable")]
    public bool? Derstandard_at_istandardx309065302IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-309065302_is_ongoing")]
    public bool? Derstandard_at_istandardx309065302IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-309065302_post_time")]
    public double? Derstandard_at_istandardx309065302PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-319321338_is_clearable")]
    public bool? Derstandard_at_istandardx319321338IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-319321338_is_ongoing")]
    public bool? Derstandard_at_istandardx319321338IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-319321338_post_time")]
    public double? Derstandard_at_istandardx319321338PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-322622035_is_clearable")]
    public bool? Derstandard_at_istandardx322622035IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-322622035_is_ongoing")]
    public bool? Derstandard_at_istandardx322622035IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-322622035_post_time")]
    public double? Derstandard_at_istandardx322622035PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-323289136_is_clearable")]
    public bool? Derstandard_at_istandardx323289136IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-323289136_is_ongoing")]
    public bool? Derstandard_at_istandardx323289136IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-323289136_post_time")]
    public double? Derstandard_at_istandardx323289136PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-326720098_is_clearable")]
    public bool? Derstandard_at_istandardx326720098IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-326720098_is_ongoing")]
    public bool? Derstandard_at_istandardx326720098IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-326720098_post_time")]
    public double? Derstandard_at_istandardx326720098PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-333654048_is_clearable")]
    public bool? Derstandard_at_istandardx333654048IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-333654048_is_ongoing")]
    public bool? Derstandard_at_istandardx333654048IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-333654048_post_time")]
    public double? Derstandard_at_istandardx333654048PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-333656172_is_clearable")]
    public bool? Derstandard_at_istandardx333656172IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-333656172_is_ongoing")]
    public bool? Derstandard_at_istandardx333656172IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-333656172_post_time")]
    public double? Derstandard_at_istandardx333656172PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-339828912_is_clearable")]
    public bool? Derstandard_at_istandardx339828912IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-339828912_is_ongoing")]
    public bool? Derstandard_at_istandardx339828912IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-339828912_post_time")]
    public double? Derstandard_at_istandardx339828912PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-342821349_is_clearable")]
    public bool? Derstandard_at_istandardx342821349IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-342821349_is_ongoing")]
    public bool? Derstandard_at_istandardx342821349IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-342821349_post_time")]
    public double? Derstandard_at_istandardx342821349PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-383542356_is_clearable")]
    public bool? Derstandard_at_istandardx383542356IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-383542356_is_ongoing")]
    public bool? Derstandard_at_istandardx383542356IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-383542356_post_time")]
    public double? Derstandard_at_istandardx383542356PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-387678398_is_clearable")]
    public bool? Derstandard_at_istandardx387678398IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-387678398_is_ongoing")]
    public bool? Derstandard_at_istandardx387678398IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-387678398_post_time")]
    public double? Derstandard_at_istandardx387678398PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-393875385_is_clearable")]
    public bool? Derstandard_at_istandardx393875385IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-393875385_is_ongoing")]
    public bool? Derstandard_at_istandardx393875385IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-393875385_post_time")]
    public double? Derstandard_at_istandardx393875385PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411164824_is_clearable")]
    public bool? Derstandard_at_istandardx411164824IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411164824_is_ongoing")]
    public bool? Derstandard_at_istandardx411164824IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411164824_post_time")]
    public double? Derstandard_at_istandardx411164824PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411165208_is_clearable")]
    public bool? Derstandard_at_istandardx411165208IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411165208_is_ongoing")]
    public bool? Derstandard_at_istandardx411165208IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411165208_post_time")]
    public double? Derstandard_at_istandardx411165208PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411403517_is_clearable")]
    public bool? Derstandard_at_istandardx411403517IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411403517_is_ongoing")]
    public bool? Derstandard_at_istandardx411403517IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-411403517_post_time")]
    public double? Derstandard_at_istandardx411403517PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-425046324_is_clearable")]
    public bool? Derstandard_at_istandardx425046324IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-425046324_is_ongoing")]
    public bool? Derstandard_at_istandardx425046324IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-425046324_post_time")]
    public double? Derstandard_at_istandardx425046324PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-470212372_is_clearable")]
    public bool? Derstandard_at_istandardx470212372IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-470212372_is_ongoing")]
    public bool? Derstandard_at_istandardx470212372IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-470212372_post_time")]
    public double? Derstandard_at_istandardx470212372PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-476028854_is_clearable")]
    public bool? Derstandard_at_istandardx476028854IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-476028854_is_ongoing")]
    public bool? Derstandard_at_istandardx476028854IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-476028854_post_time")]
    public double? Derstandard_at_istandardx476028854PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478216971_is_clearable")]
    public bool? Derstandard_at_istandardx478216971IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478216971_is_ongoing")]
    public bool? Derstandard_at_istandardx478216971IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478216971_post_time")]
    public double? Derstandard_at_istandardx478216971PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478464071_is_clearable")]
    public bool? Derstandard_at_istandardx478464071IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478464071_is_ongoing")]
    public bool? Derstandard_at_istandardx478464071IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478464071_post_time")]
    public double? Derstandard_at_istandardx478464071PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478473385_is_clearable")]
    public bool? Derstandard_at_istandardx478473385IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478473385_is_ongoing")]
    public bool? Derstandard_at_istandardx478473385IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-478473385_post_time")]
    public double? Derstandard_at_istandardx478473385PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-485686355_is_clearable")]
    public bool? Derstandard_at_istandardx485686355IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-485686355_is_ongoing")]
    public bool? Derstandard_at_istandardx485686355IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-485686355_post_time")]
    public double? Derstandard_at_istandardx485686355PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-489181448_is_clearable")]
    public bool? Derstandard_at_istandardx489181448IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-489181448_is_ongoing")]
    public bool? Derstandard_at_istandardx489181448IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-489181448_post_time")]
    public double? Derstandard_at_istandardx489181448PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-496124409_is_clearable")]
    public bool? Derstandard_at_istandardx496124409IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-496124409_is_ongoing")]
    public bool? Derstandard_at_istandardx496124409IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-496124409_post_time")]
    public double? Derstandard_at_istandardx496124409PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-503595382_is_clearable")]
    public bool? Derstandard_at_istandardx503595382IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-503595382_is_ongoing")]
    public bool? Derstandard_at_istandardx503595382IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-503595382_post_time")]
    public double? Derstandard_at_istandardx503595382PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-509166281_is_clearable")]
    public bool? Derstandard_at_istandardx509166281IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-509166281_is_ongoing")]
    public bool? Derstandard_at_istandardx509166281IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-509166281_post_time")]
    public double? Derstandard_at_istandardx509166281PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-512328708_is_clearable")]
    public bool? Derstandard_at_istandardx512328708IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-512328708_is_ongoing")]
    public bool? Derstandard_at_istandardx512328708IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-512328708_post_time")]
    public double? Derstandard_at_istandardx512328708PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-514346367_is_clearable")]
    public bool? Derstandard_at_istandardx514346367IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-514346367_is_ongoing")]
    public bool? Derstandard_at_istandardx514346367IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-514346367_post_time")]
    public double? Derstandard_at_istandardx514346367PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-541118945_is_clearable")]
    public bool? Derstandard_at_istandardx541118945IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-541118945_is_ongoing")]
    public bool? Derstandard_at_istandardx541118945IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_-541118945_post_time")]
    public double? Derstandard_at_istandardx541118945PostTime { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_2147483647_is_clearable")]
    public bool? Derstandard_at_istandardx2147483647IsClearable { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_2147483647_is_ongoing")]
    public bool? Derstandard_at_istandardx2147483647IsOngoing { get; init; }

    [JsonPropertyName("derstandard.at.istandardx_2147483647_post_time")]
    public double? Derstandard_at_istandardx2147483647PostTime { get; init; }

    [JsonPropertyName("extras_ndid_com.facebook.katana")]
    public string? ExtrasNdidCom_facebook_katana { get; init; }

    [JsonPropertyName("extras_notification_type_com.facebook.katana")]
    public string? ExtrasNotificationTypeCom_facebook_katana { get; init; }

    [JsonPropertyName("interaction_screen_bundle_extra_com.google.android.youtube")]
    public string? InteractionScreenBundleExtraCom_google_android_youtube { get; init; }

    [JsonPropertyName("is_rich_push_de.axelspringer.yana.zeropage")]
    public bool? IsRichPushDe_axelspringer_yana_zeropage { get; init; }

    [JsonPropertyName("logging_directive_com.google.android.youtube")]
    public IReadOnlyList<double>? LoggingDirectiveCom_google_android_youtube { get; init; }

    [JsonPropertyName("push_message_com.samsung.android.oneconnect")]
    public IReadOnlyList<double>? PushMessageCom_samsung_android_oneconnect { get; init; }

    [JsonPropertyName("light")]
    public double? Light { get; init; }

    [JsonPropertyName("motion")]
    public double? Motion { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("free_external_storage")]
    public string? FreeExternalStorage { get; init; }

    [JsonPropertyName("total_external_storage")]
    public string? TotalExternalStorage { get; init; }

    [JsonPropertyName("end")]
    public double? End { get; init; }

    [JsonPropertyName("start")]
    public double? Start { get; init; }

    [JsonPropertyName("android.appInfo_com.chess")]
    public string? Android_appInfoCom_chess { get; init; }

    [JsonPropertyName("android.appInfo_com.grupet.web.app")]
    public string? Android_appInfoCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.appInfo_com.nytimes.android")]
    public string? Android_appInfoCom_nytimes_android { get; init; }

    [JsonPropertyName("android.appInfo_com.oneplus.screenshot")]
    public string? Android_appInfoCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.appInfo_tv.twitch.android.app")]
    public string? Android_appInfoTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.bigText_com.chess")]
    public string? Android_bigTextCom_chess { get; init; }

    [JsonPropertyName("android.bigText_com.nytimes.android")]
    public string? Android_bigTextCom_nytimes_android { get; init; }

    [JsonPropertyName("android.bigText_tv.twitch.android.app")]
    public string? Android_bigTextTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.contains.customView_com.grupet.web.app")]
    public bool? Android_contains_customViewCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.conversationTitle_com.whatsapp")]
    public string? Android_conversationTitleCom_whatsapp { get; init; }

    [JsonPropertyName("android.conversationUnreadMessageCount_com.whatsapp")]
    public double? Android_conversationUnreadMessageCountCom_whatsapp { get; init; }

    [JsonPropertyName("android.hiddenConversationTitle_com.whatsapp")]
    public string? Android_hiddenConversationTitleCom_whatsapp { get; init; }

    [JsonPropertyName("android.infoText_com.chess")]
    public string? Android_infoTextCom_chess { get; init; }

    [JsonPropertyName("android.infoText_com.grupet.web.app")]
    public string? Android_infoTextCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.infoText_com.nytimes.android")]
    public string? Android_infoTextCom_nytimes_android { get; init; }

    [JsonPropertyName("android.infoText_tv.twitch.android.app")]
    public string? Android_infoTextTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.isGroupConversation_com.whatsapp")]
    public bool? Android_isGroupConversationCom_whatsapp { get; init; }

    [JsonPropertyName("android.largeIcon.big_com.oneplus.screenshot")]
    public string? Android_largeIcon_bigCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.largeIcon_com.chess")]
    public string? Android_largeIconCom_chess { get; init; }

    [JsonPropertyName("android.largeIcon_com.grupet.web.app")]
    public string? Android_largeIconCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.largeIcon_com.nytimes.android")]
    public string? Android_largeIconCom_nytimes_android { get; init; }

    [JsonPropertyName("android.largeIcon_com.oneplus.screenshot")]
    public string? Android_largeIconCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.largeIcon_tv.twitch.android.app")]
    public string? Android_largeIconTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.messages_com.whatsapp")]
    public string? Android_messagesCom_whatsapp { get; init; }

    [JsonPropertyName("android.messagingStyleUser_com.whatsapp")]
    public string? Android_messagingStyleUserCom_whatsapp { get; init; }

    [JsonPropertyName("android.messagingUser_com.whatsapp")]
    public string? Android_messagingUserCom_whatsapp { get; init; }

    [JsonPropertyName("android.people.list_com.whatsapp")]
    public string? Android_people_listCom_whatsapp { get; init; }

    [JsonPropertyName("android.picture_com.oneplus.screenshot")]
    public string? Android_pictureCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.chess")]
    public bool? Android_progressIndeterminateCom_chess { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.grupet.web.app")]
    public bool? Android_progressIndeterminateCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.nytimes.android")]
    public bool? Android_progressIndeterminateCom_nytimes_android { get; init; }

    [JsonPropertyName("android.progressIndeterminate_tv.twitch.android.app")]
    public bool? Android_progressIndeterminateTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.progressMax_com.chess")]
    public double? Android_progressMaxCom_chess { get; init; }

    [JsonPropertyName("android.progressMax_com.grupet.web.app")]
    public double? Android_progressMaxCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.progressMax_com.nytimes.android")]
    public double? Android_progressMaxCom_nytimes_android { get; init; }

    [JsonPropertyName("android.progressMax_tv.twitch.android.app")]
    public double? Android_progressMaxTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.progress_com.chess")]
    public double? Android_progressCom_chess { get; init; }

    [JsonPropertyName("android.progress_com.grupet.web.app")]
    public double? Android_progressCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.progress_com.nytimes.android")]
    public double? Android_progressCom_nytimes_android { get; init; }

    [JsonPropertyName("android.progress_tv.twitch.android.app")]
    public double? Android_progressTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.reduced.images_com.chess")]
    public bool? Android_reduced_imagesCom_chess { get; init; }

    [JsonPropertyName("android.reduced.images_com.grupet.web.app")]
    public bool? Android_reduced_imagesCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.reduced.images_com.nytimes.android")]
    public bool? Android_reduced_imagesCom_nytimes_android { get; init; }

    [JsonPropertyName("android.reduced.images_com.oneplus.screenshot")]
    public bool? Android_reduced_imagesCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.reduced.images_tv.twitch.android.app")]
    public bool? Android_reduced_imagesTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.chess")]
    public string? Android_remoteInputHistoryCom_chess { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.grupet.web.app")]
    public string? Android_remoteInputHistoryCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.nytimes.android")]
    public string? Android_remoteInputHistoryCom_nytimes_android { get; init; }

    [JsonPropertyName("android.remoteInputHistory_tv.twitch.android.app")]
    public string? Android_remoteInputHistoryTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.selfDisplayName_com.whatsapp")]
    public string? Android_selfDisplayNameCom_whatsapp { get; init; }

    [JsonPropertyName("android.showChronometer_com.chess")]
    public bool? Android_showChronometerCom_chess { get; init; }

    [JsonPropertyName("android.showChronometer_com.grupet.web.app")]
    public bool? Android_showChronometerCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.showChronometer_com.nytimes.android")]
    public bool? Android_showChronometerCom_nytimes_android { get; init; }

    [JsonPropertyName("android.showChronometer_tv.twitch.android.app")]
    public bool? Android_showChronometerTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.showWhen_com.chess")]
    public bool? Android_showWhenCom_chess { get; init; }

    [JsonPropertyName("android.showWhen_com.grupet.web.app")]
    public bool? Android_showWhenCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.showWhen_com.nytimes.android")]
    public bool? Android_showWhenCom_nytimes_android { get; init; }

    [JsonPropertyName("android.showWhen_com.oneplus.screenshot")]
    public bool? Android_showWhenCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.showWhen_tv.twitch.android.app")]
    public bool? Android_showWhenTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.subText_com.chess")]
    public string? Android_subTextCom_chess { get; init; }

    [JsonPropertyName("android.subText_com.grupet.web.app")]
    public string? Android_subTextCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.subText_com.nytimes.android")]
    public string? Android_subTextCom_nytimes_android { get; init; }

    [JsonPropertyName("android.subText_tv.twitch.android.app")]
    public string? Android_subTextTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.template_com.chess")]
    public string? Android_templateCom_chess { get; init; }

    [JsonPropertyName("android.template_com.nytimes.android")]
    public string? Android_templateCom_nytimes_android { get; init; }

    [JsonPropertyName("android.template_com.oneplus.screenshot")]
    public string? Android_templateCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.template_tv.twitch.android.app")]
    public string? Android_templateTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.text_com.chess")]
    public string? Android_textCom_chess { get; init; }

    [JsonPropertyName("android.text_com.grupet.web.app")]
    public string? Android_textCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.text_com.nytimes.android")]
    public string? Android_textCom_nytimes_android { get; init; }

    [JsonPropertyName("android.text_com.oneplus.screenshot")]
    public string? Android_textCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.text_tv.twitch.android.app")]
    public string? Android_textTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.title.big_com.nytimes.android")]
    public string? Android_title_bigCom_nytimes_android { get; init; }

    [JsonPropertyName("android.title_com.chess")]
    public string? Android_titleCom_chess { get; init; }

    [JsonPropertyName("android.title_com.grupet.web.app")]
    public string? Android_titleCom_grupet_web_app { get; init; }

    [JsonPropertyName("android.title_com.nytimes.android")]
    public string? Android_titleCom_nytimes_android { get; init; }

    [JsonPropertyName("android.title_com.oneplus.screenshot")]
    public string? Android_titleCom_oneplus_screenshot { get; init; }

    [JsonPropertyName("android.title_tv.twitch.android.app")]
    public string? Android_titleTv_twitch_android_app { get; init; }

    [JsonPropertyName("android.wearable.EXTENSIONS_com.whatsapp")]
    public string? Android_wearable_EXTENSIONSCom_whatsapp { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.chess")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_chess { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.nytimes.android")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_nytimes_android { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_tv.twitch.android.app")]
    public string? Androidx_core_app_extra_COMPATTEMPLATETv_twitch_android_app { get; init; }

    [JsonPropertyName("com.chess_1035448251_is_clearable")]
    public bool? Com_chess1035448251IsClearable { get; init; }

    [JsonPropertyName("com.chess_1035448251_is_ongoing")]
    public bool? Com_chess1035448251IsOngoing { get; init; }

    [JsonPropertyName("com.chess_1035448251_post_time")]
    public double? Com_chess1035448251PostTime { get; init; }

    [JsonPropertyName("com.grupet.web.app_988320_is_clearable")]
    public bool? Com_grupet_web_app988320IsClearable { get; init; }

    [JsonPropertyName("com.grupet.web.app_988320_is_ongoing")]
    public bool? Com_grupet_web_app988320IsOngoing { get; init; }

    [JsonPropertyName("com.grupet.web.app_988320_post_time")]
    public double? Com_grupet_web_app988320PostTime { get; init; }

    [JsonPropertyName("com.nytimes.android_-265594644_is_clearable")]
    public bool? Com_nytimes_android265594644IsClearable { get; init; }

    [JsonPropertyName("com.nytimes.android_-265594644_is_ongoing")]
    public bool? Com_nytimes_android265594644IsOngoing { get; init; }

    [JsonPropertyName("com.nytimes.android_-265594644_post_time")]
    public double? Com_nytimes_android265594644PostTime { get; init; }

    [JsonPropertyName("com.oneplus.screenshot_1_is_clearable")]
    public bool? Com_oneplus_screenshot1IsClearable { get; init; }

    [JsonPropertyName("com.oneplus.screenshot_1_is_ongoing")]
    public bool? Com_oneplus_screenshot1IsOngoing { get; init; }

    [JsonPropertyName("com.oneplus.screenshot_1_post_time")]
    public double? Com_oneplus_screenshot1PostTime { get; init; }

    [JsonPropertyName("com.whatsapp_1_is_clearable")]
    public bool? Com_whatsapp1IsClearable { get; init; }

    [JsonPropertyName("com.whatsapp_1_is_ongoing")]
    public bool? Com_whatsapp1IsOngoing { get; init; }

    [JsonPropertyName("com.whatsapp_1_post_time")]
    public double? Com_whatsapp1PostTime { get; init; }

    [JsonPropertyName("last_row_id_com.whatsapp")]
    public double? LastRowIdCom_whatsapp { get; init; }

    [JsonPropertyName("tv.twitch.android.app_12700_is_clearable")]
    public bool? Tv_twitch_android_app12700IsClearable { get; init; }

    [JsonPropertyName("tv.twitch.android.app_12700_is_ongoing")]
    public bool? Tv_twitch_android_app12700IsOngoing { get; init; }

    [JsonPropertyName("tv.twitch.android.app_12700_post_time")]
    public double? Tv_twitch_android_app12700PostTime { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("power_consumption_start")]
    public string? PowerConsumptionStart { get; init; }

    [JsonPropertyName("power_consumption_end")]
    public string? PowerConsumptionEnd { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("max_power")]
    public double? MaxPower { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("type")]
    public object? Type { get; init; }

    [JsonPropertyName("level")]
    public string? Level { get; init; }

    [JsonPropertyName("average")]
    public double? Average { get; init; }

    [JsonPropertyName("off_peak_1")]
    public double? OffPeak1 { get; init; }

    [JsonPropertyName("off_peak_2")]
    public double? OffPeak2 { get; init; }

    [JsonPropertyName("peak")]
    public double? Peak { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("mean")]
    public double? Mean { get; init; }

    [JsonPropertyName("unit")]
    public string? Unit { get; init; }

    [JsonPropertyName("currency")]
    public string? Currency { get; init; }

    [JsonPropertyName("country")]
    public string? Country { get; init; }

    [JsonPropertyName("region")]
    public string? Region { get; init; }

    [JsonPropertyName("low_price")]
    public bool? LowPrice { get; init; }

    [JsonPropertyName("price_percent_to_average")]
    public double? PricePercentToAverage { get; init; }

    [JsonPropertyName("today")]
    public IReadOnlyList<double>? Today { get; init; }

    [JsonPropertyName("tomorrow")]
    public IReadOnlyList<double>? Tomorrow { get; init; }

    [JsonPropertyName("tomorrow_valid")]
    public bool? TomorrowValid { get; init; }

    [JsonPropertyName("raw_today")]
    public IReadOnlyList<object>? RawToday { get; init; }

    [JsonPropertyName("raw_tomorrow")]
    public IReadOnlyList<object>? RawTomorrow { get; init; }

    [JsonPropertyName("current_price")]
    public double? CurrentPrice { get; init; }

    [JsonPropertyName("additional_costs_current_hour")]
    public double? AdditionalCostsCurrentHour { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("target")]
    public string? Target { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("runtime_info")]
    public object? RuntimeInfo { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("last_result")]
    public string? LastResult { get; init; }

    [JsonPropertyName("last_timestamp")]
    public string? LastTimestamp { get; init; }

    [JsonPropertyName("model")]
    public string? Model { get; init; }

    [JsonPropertyName("Front")]
    public string? Front { get; init; }

    [JsonPropertyName("Rear")]
    public string? Rear { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("charge_current")]
    public string? ChargeCurrent { get; init; }

    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("time")]
    public string? Time { get; init; }

    [JsonPropertyName("date")]
    public string? Date { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TimerEntity : Entity<TimerEntity, EntityState<TimerAttributes>, TimerAttributes>
{
    public TimerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record TimerAttributes
{
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(Entity entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record VacuumEntity : Entity<VacuumEntity, EntityState<VacuumAttributes>, VacuumAttributes>
{
    public VacuumEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VacuumEntity(Entity entity) : base(entity)
    {
    }
}

public partial record VacuumAttributes
{
    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("battery_icon")]
    public string? BatteryIcon { get; init; }

    [JsonPropertyName("activity")]
    public string? Activity { get; init; }

    [JsonPropertyName("battery_state")]
    public string? BatteryState { get; init; }

    [JsonPropertyName("rf_link_level")]
    public double? RfLinkLevel { get; init; }

    [JsonPropertyName("rf_link_state")]
    public string? RfLinkState { get; init; }

    [JsonPropertyName("operating_hours")]
    public double? OperatingHours { get; init; }

    [JsonPropertyName("last_error")]
    public string? LastError { get; init; }

    [JsonPropertyName("error")]
    public string? Error { get; init; }

    [JsonPropertyName("state")]
    public string? State { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("fan_speed_list")]
    public IReadOnlyList<string>? FanSpeedList { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(Entity entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    BrowserModServices BrowserMod { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    DwainsDashboardServices DwainsDashboard { get; }

    ElgatoServices Elgato { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GoechargerServices Goecharger { get; }

    GoechargerMqttServices GoechargerMqtt { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    HueServices Hue { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PlexServices Plex { get; }

    ProfilerServices Profiler { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RestServices Rest { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    ShoppingListServices ShoppingList { get; }

    SirenServices Siren { get; }

    SkodaconnectServices Skodaconnect { get; }

    SonosServices Sonos { get; }

    SwitchServices Switch { get; }

    SynologyDsmServices SynologyDsm { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    UtilityMeterServices UtilityMeter { get; }

    VacuumServices Vacuum { get; }

    WasteCollectionScheduleServices WasteCollectionSchedule { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BrowserModServices BrowserMod => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public DwainsDashboardServices DwainsDashboard => new(_haContext);
    public ElgatoServices Elgato => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GoechargerServices Goecharger => new(_haContext);
    public GoechargerMqttServices GoechargerMqtt => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HueServices Hue => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PlexServices Plex => new(_haContext);
    public ProfilerServices Profiler => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RestServices Rest => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public ShoppingListServices ShoppingList => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SkodaconnectServices Skodaconnect => new(_haContext);
    public SonosServices Sonos => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SynologyDsmServices SynologyDsm => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public UtilityMeterServices UtilityMeter => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WasteCollectionScheduleServices WasteCollectionSchedule => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm away the alarm control panel with. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm custom bypass the alarm control panel with. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm home the alarm control panel with. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm night the alarm control panel with. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm vacation the alarm control panel with. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to disarm the alarm control panel with. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to trigger the alarm control panel with. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>An optional code to arm away the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>An optional code to arm custom bypass the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>An optional code to arm home the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>An optional code to arm night the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>An optional code to arm vacation the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>An optional code to disarm the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>An optional code to trigger the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggle (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stop currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BrowserModServices
{
    private readonly IHaContext _haContext;
    public BrowserModServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close a popup</summary>
    ///<param name="target">The target for this service call</param>
    public void ClosePopup(ServiceTarget target)
    {
        _haContext.CallService("browser_mod", "close_popup", target);
    }

    ///<summary>Print text to browser console</summary>
    ///<param name="target">The target for this service call</param>
    public void Console(ServiceTarget target, BrowserModConsoleParameters data)
    {
        _haContext.CallService("browser_mod", "console", target, data);
    }

    ///<summary>Print text to browser console</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Text to print</param>
    public void Console(ServiceTarget target, string? message = null)
    {
        _haContext.CallService("browser_mod", "console", target, new BrowserModConsoleParameters { Message = message });
    }

    ///<summary>Wait for a time</summary>
    ///<param name="target">The target for this service call</param>
    public void Delay(ServiceTarget target, BrowserModDelayParameters data)
    {
        _haContext.CallService("browser_mod", "delay", target, data);
    }

    ///<summary>Wait for a time</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="time">Time to wait (ms)</param>
    public void Delay(ServiceTarget target, long? time = null)
    {
        _haContext.CallService("browser_mod", "delay", target, new BrowserModDelayParameters { Time = time });
    }

    ///<summary>Run arbitrary JavaScript code</summary>
    ///<param name="target">The target for this service call</param>
    public void Javascript(ServiceTarget target, BrowserModJavascriptParameters data)
    {
        _haContext.CallService("browser_mod", "javascript", target, data);
    }

    ///<summary>Run arbitrary JavaScript code</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">JavaScript code to run</param>
    public void Javascript(ServiceTarget target, object? code = null)
    {
        _haContext.CallService("browser_mod", "javascript", target, new BrowserModJavascriptParameters { Code = code });
    }

    ///<summary>Show more-info dialog</summary>
    ///<param name="target">The target for this service call</param>
    public void MoreInfo(ServiceTarget target, BrowserModMoreInfoParameters data)
    {
        _haContext.CallService("browser_mod", "more_info", target, data);
    }

    ///<summary>Show more-info dialog</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entity"></param>
    ///<param name="large"></param>
    ///<param name="ignorePopupCard"></param>
    public void MoreInfo(ServiceTarget target, string entity, bool? large = null, bool? ignorePopupCard = null)
    {
        _haContext.CallService("browser_mod", "more_info", target, new BrowserModMoreInfoParameters { Entity = entity, Large = large, IgnorePopupCard = ignorePopupCard });
    }

    ///<summary>Navigate browser to a different page</summary>
    ///<param name="target">The target for this service call</param>
    public void Navigate(ServiceTarget target, BrowserModNavigateParameters data)
    {
        _haContext.CallService("browser_mod", "navigate", target, data);
    }

    ///<summary>Navigate browser to a different page</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="path">Target path</param>
    public void Navigate(ServiceTarget target, string? path = null)
    {
        _haContext.CallService("browser_mod", "navigate", target, new BrowserModNavigateParameters { Path = path });
    }

    ///<summary>Display a short notification</summary>
    ///<param name="target">The target for this service call</param>
    public void Notification(ServiceTarget target, BrowserModNotificationParameters data)
    {
        _haContext.CallService("browser_mod", "notification", target, data);
    }

    ///<summary>Display a short notification</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Message to display</param>
    ///<param name="duration">Time before closing (ms)</param>
    ///<param name="actionText">Text of optional action button</param>
    ///<param name="action">Action to perform when the action button is pressed</param>
    public void Notification(ServiceTarget target, string message, long? duration = null, string? actionText = null, object? action = null)
    {
        _haContext.CallService("browser_mod", "notification", target, new BrowserModNotificationParameters { Message = message, Duration = duration, ActionText = actionText, Action = action });
    }

    ///<summary>Display a popup</summary>
    ///<param name="target">The target for this service call</param>
    public void Popup(ServiceTarget target, BrowserModPopupParameters data)
    {
        _haContext.CallService("browser_mod", "popup", target, data);
    }

    ///<summary>Display a popup</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="title">Popup title</param>
    ///<param name="content">Popup content (Test or lovelace card configuration)</param>
    ///<param name="size"></param>
    ///<param name="rightButton">Text of the right button</param>
    ///<param name="rightButtonAction">Action to perform when the right button is pressed</param>
    ///<param name="leftButton">Text of the left button</param>
    ///<param name="leftButtonAction">Action to perform when left button is pressed</param>
    ///<param name="dismissable">Whether the popup can be closed by the user without action</param>
    ///<param name="dismissAction">Action to perform when popup is dismissed</param>
    ///<param name="autoclose">Close the popup automatically on mouse, pointer or keyboard activity</param>
    ///<param name="timeout">Time before closing (ms)</param>
    ///<param name="timeoutAction">Action to perform when popup is closed by timeout</param>
    ///<param name="style">CSS code to apply to the popup window</param>
    public void Popup(ServiceTarget target, object content, string? title = null, object? size = null, string? rightButton = null, object? rightButtonAction = null, string? leftButton = null, object? leftButtonAction = null, bool? dismissable = null, object? dismissAction = null, bool? autoclose = null, long? timeout = null, object? timeoutAction = null, string? style = null)
    {
        _haContext.CallService("browser_mod", "popup", target, new BrowserModPopupParameters { Title = title, Content = content, Size = size, RightButton = rightButton, RightButtonAction = rightButtonAction, LeftButton = leftButton, LeftButtonAction = leftButtonAction, Dismissable = dismissable, DismissAction = dismissAction, Autoclose = autoclose, Timeout = timeout, TimeoutAction = timeoutAction, Style = style });
    }

    ///<summary>Refresh page</summary>
    ///<param name="target">The target for this service call</param>
    public void Refresh(ServiceTarget target)
    {
        _haContext.CallService("browser_mod", "refresh", target);
    }

    ///<summary>Run a sequence of services</summary>
    ///<param name="target">The target for this service call</param>
    public void Sequence(ServiceTarget target, BrowserModSequenceParameters data)
    {
        _haContext.CallService("browser_mod", "sequence", target, data);
    }

    ///<summary>Run a sequence of services</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sequence">List of services to run</param>
    public void Sequence(ServiceTarget target, object? sequence = null)
    {
        _haContext.CallService("browser_mod", "sequence", target, new BrowserModSequenceParameters { Sequence = sequence });
    }

    ///<summary>Change the current theme</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTheme(ServiceTarget target, BrowserModSetThemeParameters data)
    {
        _haContext.CallService("browser_mod", "set_theme", target, data);
    }

    ///<summary>Change the current theme</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="theme">Name of theme or &apos;auto&apos;</param>
    ///<param name="dark">Dark/light mode</param>
    ///<param name="primaryColor">Primary theme color</param>
    ///<param name="accentColor">Accent theme color</param>
    public void SetTheme(ServiceTarget target, string? theme = null, object? dark = null, object? primaryColor = null, object? accentColor = null)
    {
        _haContext.CallService("browser_mod", "set_theme", target, new BrowserModSetThemeParameters { Theme = theme, Dark = dark, PrimaryColor = primaryColor, AccentColor = accentColor });
    }
}

public partial record BrowserModConsoleParameters
{
    ///<summary>Text to print</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record BrowserModDelayParameters
{
    ///<summary>Time to wait (ms)</summary>
    [JsonPropertyName("time")]
    public long? Time { get; init; }
}

public partial record BrowserModJavascriptParameters
{
    ///<summary>JavaScript code to run</summary>
    [JsonPropertyName("code")]
    public object? Code { get; init; }
}

public partial record BrowserModMoreInfoParameters
{
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }

    [JsonPropertyName("large")]
    public bool? Large { get; init; }

    [JsonPropertyName("ignore_popup_card")]
    public bool? IgnorePopupCard { get; init; }
}

public partial record BrowserModNavigateParameters
{
    ///<summary>Target path</summary>
    [JsonPropertyName("path")]
    public string? Path { get; init; }
}

public partial record BrowserModNotificationParameters
{
    ///<summary>Message to display</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Time before closing (ms)</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Text of optional action button</summary>
    [JsonPropertyName("action_text")]
    public string? ActionText { get; init; }

    ///<summary>Action to perform when the action button is pressed</summary>
    [JsonPropertyName("action")]
    public object? Action { get; init; }
}

public partial record BrowserModPopupParameters
{
    ///<summary>Popup title</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Popup content (Test or lovelace card configuration)</summary>
    [JsonPropertyName("content")]
    public object? Content { get; init; }

    [JsonPropertyName("size")]
    public object? Size { get; init; }

    ///<summary>Text of the right button</summary>
    [JsonPropertyName("right_button")]
    public string? RightButton { get; init; }

    ///<summary>Action to perform when the right button is pressed</summary>
    [JsonPropertyName("right_button_action")]
    public object? RightButtonAction { get; init; }

    ///<summary>Text of the left button</summary>
    [JsonPropertyName("left_button")]
    public string? LeftButton { get; init; }

    ///<summary>Action to perform when left button is pressed</summary>
    [JsonPropertyName("left_button_action")]
    public object? LeftButtonAction { get; init; }

    ///<summary>Whether the popup can be closed by the user without action</summary>
    [JsonPropertyName("dismissable")]
    public bool? Dismissable { get; init; }

    ///<summary>Action to perform when popup is dismissed</summary>
    [JsonPropertyName("dismiss_action")]
    public object? DismissAction { get; init; }

    ///<summary>Close the popup automatically on mouse, pointer or keyboard activity</summary>
    [JsonPropertyName("autoclose")]
    public bool? Autoclose { get; init; }

    ///<summary>Time before closing (ms)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>Action to perform when popup is closed by timeout</summary>
    [JsonPropertyName("timeout_action")]
    public object? TimeoutAction { get; init; }

    ///<summary>CSS code to apply to the popup window</summary>
    [JsonPropertyName("style")]
    public string? Style { get; init; }
}

public partial record BrowserModSequenceParameters
{
    ///<summary>List of services to run</summary>
    [JsonPropertyName("sequence")]
    public object? Sequence { get; init; }
}

public partial record BrowserModSetThemeParameters
{
    ///<summary>Name of theme or &apos;auto&apos;</summary>
    [JsonPropertyName("theme")]
    public string? Theme { get; init; }

    ///<summary>Dark/light mode</summary>
    [JsonPropertyName("dark")]
    public object? Dark { get; init; }

    ///<summary>Primary theme color</summary>
    [JsonPropertyName("primaryColor")]
    public object? PrimaryColor { get; init; }

    ///<summary>Accent theme color</summary>
    [JsonPropertyName("accentColor")]
    public object? AccentColor { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event eg: Department Party</param>
    ///<param name="description">A more complete description of the event than that provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than that provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disable the motion detection in a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enable the motion detection in a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Name(s) of media player to stream to.</param>
    ///<param name="format">Stream format supported by media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Target recording length.</param>
    ///<param name="lookback">Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turn off camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turn on camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Name(s) of media player to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Target recording length.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Show a Lovelace view on a Chromecast.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Show a Lovelace view on a Chromecast.</summary>
    ///<param name="entityId">Media Player entity to show the Lovelace view on.</param>
    ///<param name="dashboardPath">The URL path of the Lovelace dashboard to show. eg: lovelace-cast</param>
    ///<param name="viewPath">The path of the Lovelace view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string dashboardPath, string? viewPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media Player entity to show the Lovelace view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the Lovelace dashboard to show. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The path of the Lovelace view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">New value of fan mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">New target humidity for climate device.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">New value of operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">New value of preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">New value of swing mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for HVAC.</param>
    ///<param name="targetTempHigh">New target high temperature for HVAC.</param>
    ///<param name="targetTempLow">New target low temperature for HVAC.</param>
    ///<param name="hvacMode">HVAC operation mode to set temperature to.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turn climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turn climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>New value of fan mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>New target humidity for climate device.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>New value of operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>New value of preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>New value of swing mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>New target temperature for HVAC.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New target high temperature for HVAC.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>New target low temperature for HVAC.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode to set temperature to.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Make instance UI available outside over NabuCasa cloud</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnect UI from NabuCasa cloud</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launch a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launch a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language eg: NL</param>
    ///<param name="agentId">Assist engine to process your request eg: homeassistant</param>
    public void Process(string? text = null, string? language = null, string? agentId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId });
    }

    public void Reload()
    {
        _haContext.CallService("conversation", "reload", null);
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Assist engine to process your request eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public string? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Change counter parameters.</summary>
    ///<param name="target">The target for this service call</param>
    public void Configure(ServiceTarget target, CounterConfigureParameters data)
    {
        _haContext.CallService("counter", "configure", target, data);
    }

    ///<summary>Change counter parameters.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="minimum">New minimum value for the counter or None to remove minimum.</param>
    ///<param name="maximum">New maximum value for the counter or None to remove maximum.</param>
    ///<param name="step">New value for step.</param>
    ///<param name="initial">New value for initial.</param>
    ///<param name="value">New state value.</param>
    public void Configure(ServiceTarget target, long? minimum = null, long? maximum = null, long? step = null, long? initial = null, long? value = null)
    {
        _haContext.CallService("counter", "configure", target, new CounterConfigureParameters { Minimum = minimum, Maximum = maximum, Step = step, Initial = initial, Value = value });
    }

    ///<summary>Decrement a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increment a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Reset a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }
}

public partial record CounterConfigureParameters
{
    ///<summary>New minimum value for the counter or None to remove minimum.</summary>
    [JsonPropertyName("minimum")]
    public long? Minimum { get; init; }

    ///<summary>New maximum value for the counter or None to remove maximum.</summary>
    [JsonPropertyName("maximum")]
    public long? Maximum { get; init; }

    ///<summary>New value for step.</summary>
    [JsonPropertyName("step")]
    public long? Step { get; init; }

    ///<summary>New value for initial.</summary>
    [JsonPropertyName("initial")]
    public long? Initial { get; init; }

    ///<summary>New state value.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Close all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Open all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Open all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Position of the cover</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Tilt position of the cover.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stop all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stop all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggle a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggle a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Position of the cover</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Tilt position of the cover.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Control tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Control tracked device.</summary>
    ///<param name="mac">MAC address of device eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">Id of device (find id in known_devices.yaml). eg: phonedave</param>
    ///<param name="hostName">Hostname of device eg: Dave</param>
    ///<param name="locationName">Name of location where device is located (not_home is away). eg: home</param>
    ///<param name="gps">GPS coordinates where device is located (latitude, longitude). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of GPS coordinates.</param>
    ///<param name="battery">Battery level of device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of device eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>Id of device (find id in known_devices.yaml). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of device eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of location where device is located (not_home is away). eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where device is located (latitude, longitude). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class DwainsDashboardServices
{
    private readonly IHaContext _haContext;
    public DwainsDashboardServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Show a notification in the frontend.</summary>
    public void NotificationCreate(DwainsDashboardNotificationCreateParameters data)
    {
        _haContext.CallService("dwains_dashboard", "notification_create", null, data);
    }

    ///<summary>Show a notification in the frontend.</summary>
    ///<param name="message">Message body of the notification. [Templates accepted] eg: Dishwasher is done! :D</param>
    ///<param name="notificationId">Target ID of the notification, will replace a notification with the same Id. [Optional] eg: 1234</param>
    public void NotificationCreate(object? message = null, object? notificationId = null)
    {
        _haContext.CallService("dwains_dashboard", "notification_create", null, new DwainsDashboardNotificationCreateParameters { Message = message, NotificationId = notificationId });
    }

    ///<summary>Remove a notification from the frontend.</summary>
    public void NotificationDismiss(DwainsDashboardNotificationDismissParameters data)
    {
        _haContext.CallService("dwains_dashboard", "notification_dismiss", null, data);
    }

    ///<summary>Remove a notification from the frontend.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be removed. [Required] eg: 1234</param>
    public void NotificationDismiss(object? notificationId = null)
    {
        _haContext.CallService("dwains_dashboard", "notification_dismiss", null, new DwainsDashboardNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Mark a notification read.</summary>
    public void NotificationMarkRead(DwainsDashboardNotificationMarkReadParameters data)
    {
        _haContext.CallService("dwains_dashboard", "notification_mark_read", null, data);
    }

    ///<summary>Mark a notification read.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be mark read. [Required] eg: 1234</param>
    public void NotificationMarkRead(object? notificationId = null)
    {
        _haContext.CallService("dwains_dashboard", "notification_mark_read", null, new DwainsDashboardNotificationMarkReadParameters { NotificationId = notificationId });
    }

    ///<summary>Reload dashboard configuration from Dwains dashboard</summary>
    public void Reload()
    {
        _haContext.CallService("dwains_dashboard", "reload", null);
    }
}

public partial record DwainsDashboardNotificationCreateParameters
{
    ///<summary>Message body of the notification. [Templates accepted] eg: Dishwasher is done! :D</summary>
    [JsonPropertyName("message")]
    public object? Message { get; init; }

    ///<summary>Target ID of the notification, will replace a notification with the same Id. [Optional] eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public object? NotificationId { get; init; }
}

public partial record DwainsDashboardNotificationDismissParameters
{
    ///<summary>Target ID of the notification, which should be removed. [Required] eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public object? NotificationId { get; init; }
}

public partial record DwainsDashboardNotificationMarkReadParameters
{
    ///<summary>Target ID of the notification, which should be mark read. [Required] eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public object? NotificationId { get; init; }
}

public partial class ElgatoServices
{
    private readonly IHaContext _haContext;
    public ElgatoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Identify an Elgato Light. Blinks the light, which can be useful for, e.g., a visual notification.</summary>
    ///<param name="target">The target for this service call</param>
    public void Identify(ServiceTarget target)
    {
        _haContext.CallService("elgato", "identify", target);
    }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decrease speed by a percentage.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increase speed by a percentage.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Oscillate the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Oscillate the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Flag to turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Set the fan rotation.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Set the fan rotation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">The direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Set fan speed percentage.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Set fan speed percentage.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Percentage speed setting.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Set preset mode for a fan device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Set preset mode for a fan device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">New value of preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggle the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turn fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turn fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turn fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="speed">Speed setting. eg: high</param>
    ///<param name="percentage">Percentage speed setting.</param>
    ///<param name="presetMode">Preset mode setting. eg: auto</param>
    public void TurnOn(ServiceTarget target, string? speed = null, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Speed = speed, Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decrease speed by a percentage.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increase speed by a percentage.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Flag to turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>The direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Percentage speed setting.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>New value of preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed setting. eg: high</summary>
    [JsonPropertyName("speed")]
    public string? Speed { get; init; }

    ///<summary>Percentage speed setting.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode setting. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Send a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Send a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Send a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Send a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Send a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload themes from YAML configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Set a theme unless the client selected per-device theme.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Set a theme unless the client selected per-device theme.</summary>
    ///<param name="name">Name of a predefined theme eg: default</param>
    ///<param name="mode">The mode the theme is for.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a predefined theme eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>The mode the theme is for.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GoechargerServices
{
    private readonly IHaContext _haContext;
    public GoechargerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the absolute maximum current in Ampere of the Charger.</summary>
    public void SetAbsoluteMaxCurrent(GoechargerSetAbsoluteMaxCurrentParameters data)
    {
        _haContext.CallService("goecharger", "set_absolute_max_current", null, data);
    }

    ///<summary>Sets the absolute maximum current in Ampere of the Charger.</summary>
    ///<param name="chargerName">name of the charger to update (if not specified all chargers will be changed) eg: charger1</param>
    ///<param name="chargerAbsoluteMaxCurrent">absolute maximum current to be set (6-32) eg: 16</param>
    public void SetAbsoluteMaxCurrent(object? chargerName = null, object? chargerAbsoluteMaxCurrent = null)
    {
        _haContext.CallService("goecharger", "set_absolute_max_current", null, new GoechargerSetAbsoluteMaxCurrentParameters { ChargerName = chargerName, ChargerAbsoluteMaxCurrent = chargerAbsoluteMaxCurrent });
    }

    ///<summary>Sets the cable lock mode of the Charger.</summary>
    public void SetCableLockMode(GoechargerSetCableLockModeParameters data)
    {
        _haContext.CallService("goecharger", "set_cable_lock_mode", null, data);
    }

    ///<summary>Sets the cable lock mode of the Charger.</summary>
    ///<param name="chargerName">name of the charger to update (if not specified all chargers will be changed) eg: charger1</param>
    ///<param name="cableLockMode">lock mode for the cable connected to the charger (0=locked while car connected, 1=unlock after charging finished, 2=always locked) eg: 0</param>
    public void SetCableLockMode(object? chargerName = null, object? cableLockMode = null)
    {
        _haContext.CallService("goecharger", "set_cable_lock_mode", null, new GoechargerSetCableLockModeParameters { ChargerName = chargerName, CableLockMode = cableLockMode });
    }

    ///<summary>Sets the charge limit in kWh of the Charger.</summary>
    public void SetChargeLimit(GoechargerSetChargeLimitParameters data)
    {
        _haContext.CallService("goecharger", "set_charge_limit", null, data);
    }

    ///<summary>Sets the charge limit in kWh of the Charger.</summary>
    ///<param name="chargerName">name of the charger to update (if not specified all chargers will be changed) eg: charger1</param>
    ///<param name="chargeLimit">charge limit in kWh example &apos;2.5&apos; eg: 2.5</param>
    public void SetChargeLimit(object? chargerName = null, object? chargeLimit = null)
    {
        _haContext.CallService("goecharger", "set_charge_limit", null, new GoechargerSetChargeLimitParameters { ChargerName = chargerName, ChargeLimit = chargeLimit });
    }

    ///<summary>Sets the maximum current in Ampere of the Charger.</summary>
    public void SetMaxCurrent(GoechargerSetMaxCurrentParameters data)
    {
        _haContext.CallService("goecharger", "set_max_current", null, data);
    }

    ///<summary>Sets the maximum current in Ampere of the Charger.</summary>
    ///<param name="chargerName">name of the charger to update (if not specified all chargers will be changed) eg: charger1</param>
    ///<param name="maxCurrent">current to be set (6-32) eg: 16</param>
    public void SetMaxCurrent(object? chargerName = null, object? maxCurrent = null)
    {
        _haContext.CallService("goecharger", "set_max_current", null, new GoechargerSetMaxCurrentParameters { ChargerName = chargerName, MaxCurrent = maxCurrent });
    }
}

public partial record GoechargerSetAbsoluteMaxCurrentParameters
{
    ///<summary>name of the charger to update (if not specified all chargers will be changed) eg: charger1</summary>
    [JsonPropertyName("charger_name")]
    public object? ChargerName { get; init; }

    ///<summary>absolute maximum current to be set (6-32) eg: 16</summary>
    [JsonPropertyName("charger_absolute_max_current")]
    public object? ChargerAbsoluteMaxCurrent { get; init; }
}

public partial record GoechargerSetCableLockModeParameters
{
    ///<summary>name of the charger to update (if not specified all chargers will be changed) eg: charger1</summary>
    [JsonPropertyName("charger_name")]
    public object? ChargerName { get; init; }

    ///<summary>lock mode for the cable connected to the charger (0=locked while car connected, 1=unlock after charging finished, 2=always locked) eg: 0</summary>
    [JsonPropertyName("cable_lock_mode")]
    public object? CableLockMode { get; init; }
}

public partial record GoechargerSetChargeLimitParameters
{
    ///<summary>name of the charger to update (if not specified all chargers will be changed) eg: charger1</summary>
    [JsonPropertyName("charger_name")]
    public object? ChargerName { get; init; }

    ///<summary>charge limit in kWh example &apos;2.5&apos; eg: 2.5</summary>
    [JsonPropertyName("charge_limit")]
    public object? ChargeLimit { get; init; }
}

public partial record GoechargerSetMaxCurrentParameters
{
    ///<summary>name of the charger to update (if not specified all chargers will be changed) eg: charger1</summary>
    [JsonPropertyName("charger_name")]
    public object? ChargerName { get; init; }

    ///<summary>current to be set (6-32) eg: 16</summary>
    [JsonPropertyName("max_current")]
    public object? MaxCurrent { get; init; }
}

public partial class GoechargerMqttServices
{
    private readonly IHaContext _haContext;
    public GoechargerMqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets a config key to a provided value.</summary>
    public void SetConfigKey(GoechargerMqttSetConfigKeyParameters data)
    {
        _haContext.CallService("goecharger_mqtt", "set_config_key", null, data);
    }

    ///<summary>Sets a config key to a provided value.</summary>
    ///<param name="serialNumber">The serial number of the go-e device. eg: 5349</param>
    ///<param name="key">The key of the config parameter you want to change. eg: fna</param>
    ///<param name="value">The new value to set for this config parameter. eg: go-e</param>
    public void SetConfigKey(string serialNumber, object key, string value)
    {
        _haContext.CallService("goecharger_mqtt", "set_config_key", null, new GoechargerMqttSetConfigKeyParameters { SerialNumber = serialNumber, Key = key, Value = value });
    }
}

public partial record GoechargerMqttSetConfigKeyParameters
{
    ///<summary>The serial number of the go-e device. eg: 5349</summary>
    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    ///<summary>The key of the config parameter you want to change. eg: fna</summary>
    [JsonPropertyName("key")]
    public object? Key { get; init; }

    ///<summary>The new value to set for this config parameter. eg: go-e</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload group configuration, entities, and notify services.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Remove a user group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Remove a user group.</summary>
    ///<param name="objectId">Group id and part of entity id. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Create/Update a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Create/Update a user group.</summary>
    ///<param name="objectId">Group id and part of entity id. eg: test_group</param>
    ///<param name="name">Name of group eg: My test group</param>
    ///<param name="icon">Name of icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Not compatible with &apos;delta&apos;. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members that will change on group listening. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members that will be removed from group listening. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only turn on when all entities are on.</param>
    public void Set(string objectId, string? name = null, object? icon = null, object? entities = null, object? addEntities = null, object? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Group id and part of entity id. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Group id and part of entity id. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of group eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Not compatible with &apos;delta&apos;. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of members that will change on group listening. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public object? AddEntities { get; init; }

    ///<summary>List of members that will be removed from group listening. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public object? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only turn on when all entities are on.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restart add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restart add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Start add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Start add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Write data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Write data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stop add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stop add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Update add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Update add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Create a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Create a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Optional password. eg: password</param>
    ///<param name="compressed">Use compressed archives</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed });
    }

    ///<summary>Create a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Create a partial backup.</summary>
    ///<param name="homeassistant">Backup Home Assistant settings</param>
    ///<param name="addons">Optional list of add-on slugs. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">Optional list of directories. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Optional password. eg: password</param>
    ///<param name="compressed">Use compressed archives</param>
    public void BackupPartial(bool? homeassistant = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed });
    }

    ///<summary>Reboot the host system.</summary>
    public void HostReboot()
    {
        _haContext.CallService("hassio", "host_reboot", null);
    }

    ///<summary>Poweroff the host system.</summary>
    public void HostShutdown()
    {
        _haContext.CallService("hassio", "host_shutdown", null);
    }

    ///<summary>Restore from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restore from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restore from partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restore from partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restore Home Assistant</param>
    ///<param name="folders">Optional list of directories. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">Optional list of add-on slugs. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Use compressed archives</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Backup Home Assistant settings</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Optional list of add-on slugs. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional list of directories. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Use compressed archives</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restore Home Assistant</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Optional list of directories. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional list of add-on slugs. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Check the Home Assistant configuration files for errors. Errors will be displayed in the Home Assistant log.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    public void ReloadAll()
    {
        _haContext.CallService("homeassistant", "reload_all", null);
    }

    ///<summary>Reload a config entry that matches a target.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reload a config entry that matches a target.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">A configuration entry id eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reload the core configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Restart the Home Assistant service.</summary>
    public void Restart()
    {
        _haContext.CallService("homeassistant", "restart", null);
    }

    ///<summary>Save the persistent states (for entities derived from RestoreEntity) immediately. Maintain the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Update the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Update the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    public void SetLocation(string latitude, string longitude)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude });
    }

    ///<summary>Stop the Home Assistant service.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic service to toggle devices on/off under any domain</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic service to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic service to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Force one or more entities to update its data</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateEntity(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "update_entity", target);
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>A configuration entry id eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public string? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public string? Longitude { get; init; }
}

public partial class HueServices
{
    private readonly IHaContext _haContext;
    public HueServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activate a Hue scene with more control over the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivateScene(ServiceTarget target, HueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "activate_scene", target, data);
    }

    ///<summary>Activate a Hue scene with more control over the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public void ActivateScene(ServiceTarget target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        _haContext.CallService("hue", "activate_scene", target, new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activate a hue scene stored in the hue hub.</summary>
    public void HueActivateScene(HueHueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, data);
    }

    ///<summary>Activate a hue scene stored in the hue hub.</summary>
    ///<param name="groupName">Name of hue group/room from the hue app. eg: Living Room</param>
    ///<param name="sceneName">Name of hue scene from the hue app. eg: Energize</param>
    ///<param name="dynamic">Enable dynamic mode of the scene (V2 bridges and supported scenes only).</param>
    public void HueActivateScene(string? groupName = null, string? sceneName = null, bool? dynamic = null)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, new HueHueActivateSceneParameters { GroupName = groupName, SceneName = sceneName, Dynamic = dynamic });
    }
}

public partial record HueActivateSceneParameters
{
    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Enable dynamic mode of the scene.</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }

    ///<summary>Speed of dynamic palette for this scene</summary>
    [JsonPropertyName("speed")]
    public long? Speed { get; init; }

    ///<summary>Set brightness for the scene.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record HueHueActivateSceneParameters
{
    ///<summary>Name of hue group/room from the hue app. eg: Living Room</summary>
    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    ///<summary>Name of hue scene from the hue app. eg: Energize</summary>
    [JsonPropertyName("scene_name")]
    public string? SceneName { get; init; }

    ///<summary>Enable dynamic mode of the scene (V2 bridges and supported scenes only).</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set target humidity of humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Set target humidity of humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">New target humidity for humidifier device.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Set mode for humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Set mode for humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">New mode eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles a humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turn humidifier device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turn humidifier device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>New target humidity for humidifier device.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>New mode eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_boolean configuration</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggle an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turn off an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turn on an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the input button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_datetime configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date the entity should be set to. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time the entity should be set to. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time the entity should be set to. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time the entity should be set to as expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date the entity should be set to. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time the entity should be set to. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time the entity should be set to. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time the entity should be set to as expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrement the value of an input number entity by its stepping.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increment the value of an input number entity by its stepping.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reload the input_number configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_select configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Select the first option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Select the last option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">Options for the input select entity. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>Options for the input select entity. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_text configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value the entity should be set to. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode and change its brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, long? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Color for the light in RGB-format. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color for the light in XY-format. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature for the light in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature for the light in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color for the light (based on RGB - red, green, blue).</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color for the light in XY-format. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature for the light in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature for the light in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode and change its brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("white")]
    public long? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to lock the lock with. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to open the lock with. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to unlock the lock with. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>An optional code to lock the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>An optional code to open the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>An optional code to unlock the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a custom entry in your logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Create a custom entry in your logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced with entity_id. eg: Kitchen</param>
    ///<param name="message">Message of the custom logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in custom logbook entry.</param>
    ///<param name="domain">Icon of domain to display in custom logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced with entity_id. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the custom logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in custom logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Icon of domain to display in custom logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Set the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Set log level for integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send the media player the command to clear players playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, string groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Send the media player the command for next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Send the media player the command for pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Send the media player the command for play.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggle media player play/pause state.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Send the media player the command for previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Send the media player the stop command.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player power state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turn a media player power off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turn a media player power on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turn a media player volume down.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turn a media player volume up.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public string? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Position to seek to. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>True/false for enabling/disabling shuffle.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>True/false for mute/unmute.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>Volume level to set as float.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dump messages on a topic selector to the &apos;mqtt_dump.txt&apos; file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Dump messages on a topic selector to the &apos;mqtt_dump.txt&apos; file in your configuration folder.</summary>
    ///<param name="topic">topic to listen to eg: OpenZWave/#</param>
    ///<param name="duration">how long we should listen for messages in seconds</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publish a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publish a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish payload. eg: /homeassistant/hello</param>
    ///<param name="payload">Payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as payload value. Ignored if payload given. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use.</param>
    ///<param name="retain">If message should have the retain flag set.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reload all MQTT entities from YAML.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>topic to listen to eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>how long we should listen for messages in seconds</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish payload. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>Payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as payload value. Ignored if payload given. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If message should have the retain flag set.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_elias_oneplus integration.</summary>
    public void MobileAppEliasOneplus(NotifyMobileAppEliasOneplusParameters data)
    {
        _haContext.CallService("notify", "mobile_app_elias_oneplus", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_elias_oneplus integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppEliasOneplus(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_elias_oneplus", null, new NotifyMobileAppEliasOneplusParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_galaxy_watch4_classic integration.</summary>
    public void MobileAppGalaxyWatch4Classic(NotifyMobileAppGalaxyWatch4ClassicParameters data)
    {
        _haContext.CallService("notify", "mobile_app_galaxy_watch4_classic", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_galaxy_watch4_classic integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppGalaxyWatch4Classic(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_galaxy_watch4_classic", null, new NotifyMobileAppGalaxyWatch4ClassicParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_gm1913 integration.</summary>
    public void MobileAppGm1913(NotifyMobileAppGm1913Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_gm1913", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_gm1913 integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppGm1913(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_gm1913", null, new NotifyMobileAppGm1913Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_s22_ultra integration.</summary>
    public void MobileAppS22Ultra(NotifyMobileAppS22UltraParameters data)
    {
        _haContext.CallService("notify", "mobile_app_s22_ultra", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_s22_ultra integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppS22Ultra(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_s22_ultra", null, new NotifyMobileAppS22UltraParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_thomas_handy integration.</summary>
    public void MobileAppThomasHandy(NotifyMobileAppThomasHandyParameters data)
    {
        _haContext.CallService("notify", "mobile_app_thomas_handy", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_thomas_handy integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppThomasHandy(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_thomas_handy", null, new NotifyMobileAppThomasHandyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the front-end.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the front-end.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    public void PersistentNotification(string message, string? title = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title });
    }
}

public partial record NotifyMobileAppEliasOneplusParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppGalaxyWatch4ClassicParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppGm1913Parameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppS22UltraParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppThomasHandyParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value the entity should be set to. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Show a notification in the frontend.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Show a notification in the frontend.</summary>
    ///<param name="message">Message body of the notification. [Templates accepted] eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title for your notification. [Templates accepted] eg: Test notification</param>
    ///<param name="notificationId">Target ID of the notification, will replace a notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Remove a notification from the frontend.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Remove a notification from the frontend.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Mark a notification read.</summary>
    public void MarkRead(PersistentNotificationMarkReadParameters data)
    {
        _haContext.CallService("persistent_notification", "mark_read", null, data);
    }

    ///<summary>Mark a notification read.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be mark read. eg: 1234</param>
    public void MarkRead(string notificationId)
    {
        _haContext.CallService("persistent_notification", "mark_read", null, new PersistentNotificationMarkReadParameters { NotificationId = notificationId });
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. [Templates accepted] eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title for your notification. [Templates accepted] eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Target ID of the notification, will replace a notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>Target ID of the notification, which should be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationMarkReadParameters
{
    ///<summary>Target ID of the notification, which should be mark read. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the person configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class PlexServices
{
    private readonly IHaContext _haContext;
    public PlexServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Refresh a Plex library to scan for new and updated media.</summary>
    public void RefreshLibrary(PlexRefreshLibraryParameters data)
    {
        _haContext.CallService("plex", "refresh_library", null, data);
    }

    ///<summary>Refresh a Plex library to scan for new and updated media.</summary>
    ///<param name="serverName">Name of a Plex server if multiple Plex servers configured. eg: My Plex Server</param>
    ///<param name="libraryName">Name of the Plex library to refresh. eg: TV Shows</param>
    public void RefreshLibrary(string libraryName, string? serverName = null)
    {
        _haContext.CallService("plex", "refresh_library", null, new PlexRefreshLibraryParameters { ServerName = serverName, LibraryName = libraryName });
    }

    ///<summary>Scan for available clients from the Plex server(s), local network, and plex.tv.</summary>
    public void ScanForClients()
    {
        _haContext.CallService("plex", "scan_for_clients", null);
    }
}

public partial record PlexRefreshLibraryParameters
{
    ///<summary>Name of a Plex server if multiple Plex servers configured. eg: My Plex Server</summary>
    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    ///<summary>Name of the Plex library to refresh. eg: TV Shows</summary>
    [JsonPropertyName("library_name")]
    public string? LibraryName { get; init; }
}

public partial class ProfilerServices
{
    private readonly IHaContext _haContext;
    public ProfilerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dump the repr of all matching objects to the log.</summary>
    public void DumpLogObjects(ProfilerDumpLogObjectsParameters data)
    {
        _haContext.CallService("profiler", "dump_log_objects", null, data);
    }

    ///<summary>Dump the repr of all matching objects to the log.</summary>
    ///<param name="type">The type of objects to dump to the log. eg: State</param>
    public void DumpLogObjects(string @type)
    {
        _haContext.CallService("profiler", "dump_log_objects", null, new ProfilerDumpLogObjectsParameters { Type = @type });
    }

    ///<summary>Log what is scheduled in the event loop.</summary>
    public void LogEventLoopScheduled()
    {
        _haContext.CallService("profiler", "log_event_loop_scheduled", null);
    }

    ///<summary>Log the current frames for all threads.</summary>
    public void LogThreadFrames()
    {
        _haContext.CallService("profiler", "log_thread_frames", null);
    }

    ///<summary>Start the Memory Profiler</summary>
    public void Memory(ProfilerMemoryParameters data)
    {
        _haContext.CallService("profiler", "memory", null, data);
    }

    ///<summary>Start the Memory Profiler</summary>
    ///<param name="seconds">The number of seconds to run the memory profiler.</param>
    public void Memory(long? seconds = null)
    {
        _haContext.CallService("profiler", "memory", null, new ProfilerMemoryParameters { Seconds = seconds });
    }

    ///<summary>Start the Profiler</summary>
    public void Start(ProfilerStartParameters data)
    {
        _haContext.CallService("profiler", "start", null, data);
    }

    ///<summary>Start the Profiler</summary>
    ///<param name="seconds">The number of seconds to run the profiler.</param>
    public void Start(long? seconds = null)
    {
        _haContext.CallService("profiler", "start", null, new ProfilerStartParameters { Seconds = seconds });
    }

    ///<summary>Start logging growth of objects in memory</summary>
    public void StartLogObjects(ProfilerStartLogObjectsParameters data)
    {
        _haContext.CallService("profiler", "start_log_objects", null, data);
    }

    ///<summary>Start logging growth of objects in memory</summary>
    ///<param name="scanInterval">The number of seconds between logging objects.</param>
    public void StartLogObjects(long? scanInterval = null)
    {
        _haContext.CallService("profiler", "start_log_objects", null, new ProfilerStartLogObjectsParameters { ScanInterval = scanInterval });
    }

    ///<summary>Stop logging growth of objects in memory.</summary>
    public void StopLogObjects()
    {
        _haContext.CallService("profiler", "stop_log_objects", null);
    }
}

public partial record ProfilerDumpLogObjectsParameters
{
    ///<summary>The type of objects to dump to the log. eg: State</summary>
    [JsonPropertyName("type")]
    public string? Type { get; init; }
}

public partial record ProfilerMemoryParameters
{
    ///<summary>The number of seconds to run the memory profiler.</summary>
    [JsonPropertyName("seconds")]
    public long? Seconds { get; init; }
}

public partial record ProfilerStartParameters
{
    ///<summary>The number of seconds to run the profiler.</summary>
    [JsonPropertyName("seconds")]
    public long? Seconds { get; init; }
}

public partial record ProfilerStartLogObjectsParameters
{
    ///<summary>The number of seconds between logging objects.</summary>
    [JsonPropertyName("scan_interval")]
    public long? ScanInterval { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stop the recording of events and state changes</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Start the recording of events and state changes</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Start purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Start purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of history days to keep in database after purge.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply entity_id and event_type filter in addition to time based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Start purge task to remove specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Start purge task to remove specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List the domains that need to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List the glob patterns to select entities for removal from the recorder database. eg: domain*.object_id*</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters { Domains = domains, EntityGlobs = entityGlobs });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of history days to keep in database after purge.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply entity_id and event_type filter in addition to time based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List the domains that need to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List the glob patterns to select entities for removal from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Name of the device from which commands will be deleted. eg: television</param>
    ///<param name="command">A single command or a list of commands to delete. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as alternative (useful for discrete remotes).</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the command(s).</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Sends the Power Off Command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or Activity Name to start. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Name of the device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to delete. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as alternative (useful for discrete remotes).</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the command(s).</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or Activity Name to start. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RestServices
{
    private readonly IHaContext _haContext;
    public RestServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all rest entities and notify services</summary>
    public void Reload()
    {
        _haContext.CallService("rest", "reload", null);
    }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activate a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activate a scene with configuration.</summary>
    ///<param name="entities">The entities and the state that they need to be. eg: {&quot;light.kitchen&quot;:&quot;on&quot;,&quot;light.ceiling&quot;:{&quot;state&quot;:&quot;on&quot;,&quot;brightness&quot;:80}}</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity_id of the new scene. eg: all_lights</param>
    ///<param name="entities">The entities to control with the scene. eg: {&quot;light.tv_back_light&quot;:&quot;on&quot;,&quot;light.ceiling&quot;:{&quot;state&quot;:&quot;on&quot;,&quot;brightness&quot;:200}}</param>
    ///<param name="snapshotEntities">The entities of which a snapshot is to be taken eg: [&quot;light.ceiling&quot;,&quot;light.kitchen&quot;]</param>
    public void Create(string sceneId, object? entities = null, object? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Reload the scene configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>The entities and the state that they need to be. eg: {&quot;light.kitchen&quot;:&quot;on&quot;,&quot;light.ceiling&quot;:{&quot;state&quot;:&quot;on&quot;,&quot;brightness&quot;:80}}</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity_id of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>The entities to control with the scene. eg: {&quot;light.tv_back_light&quot;:&quot;on&quot;,&quot;light.ceiling&quot;:{&quot;state&quot;:&quot;on&quot;,&quot;brightness&quot;:200}}</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>The entities of which a snapshot is to be taken eg: [&quot;light.ceiling&quot;,&quot;light.kitchen&quot;]</summary>
    [JsonPropertyName("snapshot_entities")]
    public object? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the schedule configuration</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void BuroCall()
    {
        _haContext.CallService("script", "buro_call", null);
    }

    public void BuroFancy()
    {
        _haContext.CallService("script", "buro_fancy", null);
    }

    public void BuroHell()
    {
        _haContext.CallService("script", "buro_hell", null);
    }

    public void BuroNacht()
    {
        _haContext.CallService("script", "buro_nacht", null);
    }

    public void BuroNormal()
    {
        _haContext.CallService("script", "buro_normal", null);
    }

    public void BuroOff()
    {
        _haContext.CallService("script", "buro_off", null);
    }

    public void GoodEvening()
    {
        _haContext.CallService("script", "good_evening", null);
    }

    public void GoodNight()
    {
        _haContext.CallService("script", "good_night", null);
    }

    public void KucheAus()
    {
        _haContext.CallService("script", "kuche_aus", null);
    }

    public void KucheDimmed()
    {
        _haContext.CallService("script", "kuche_dimmed", null);
    }

    public void KucheDunstabzug()
    {
        _haContext.CallService("script", "kuche_dunstabzug", null);
    }

    public void KucheHell()
    {
        _haContext.CallService("script", "kuche_hell", null);
    }

    public void KucheNacht()
    {
        _haContext.CallService("script", "kuche_nacht", null);
    }

    public void KucheNormal()
    {
        _haContext.CallService("script", "kuche_normal", null);
    }

    public void KucheWaschbecken()
    {
        _haContext.CallService("script", "kuche_waschbecken", null);
    }

    public void Kuchenradio()
    {
        _haContext.CallService("script", "kuchenradio", null);
    }

    public void MasterBedroomOff()
    {
        _haContext.CallService("script", "master_bedroom_off", null);
    }

    ///<summary>Reload all the available scripts</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    public void SetEnyaqChargingLimit()
    {
        _haContext.CallService("script", "set_enyaq_charging_limit", null);
    }

    public void SetTimerDuration()
    {
        _haContext.CallService("script", "set_timer_duration", null);
    }

    public void SetWallboxMaxCurrent()
    {
        _haContext.CallService("script", "set_wallbox_max_current", null);
    }

    public void TimerNachricht()
    {
        _haContext.CallService("script", "timer_nachricht", null);
    }

    ///<summary>Toggle script</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    public void ToggleKuchenradio()
    {
        _haContext.CallService("script", "toggle_kuchenradio", null);
    }

    public void TuneInRadio()
    {
        _haContext.CallService("script", "tune_in_radio", null);
    }

    ///<summary>Turn off script</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Turn on script</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }

    public void TvMute()
    {
        _haContext.CallService("script", "tv_mute", null);
    }

    public void TvOff()
    {
        _haContext.CallService("script", "tv_off", null);
    }

    public void TvOrf1()
    {
        _haContext.CallService("script", "tv_orf1", null);
    }

    public void TvOrf2()
    {
        _haContext.CallService("script", "tv_orf2", null);
    }

    public void TvVolumeDown()
    {
        _haContext.CallService("script", "tv_volume_down", null);
    }

    public void TvVolumeUp()
    {
        _haContext.CallService("script", "tv_volume_up", null);
    }

    public void Tvguideinpopup()
    {
        _haContext.CallService("script", "tvguideinpopup", null);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select the first option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Select the last option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class ShoppingListServices
{
    private readonly IHaContext _haContext;
    public ShoppingListServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add an item to the shopping list.</summary>
    public void AddItem(ShoppingListAddItemParameters data)
    {
        _haContext.CallService("shopping_list", "add_item", null, data);
    }

    ///<summary>Add an item to the shopping list.</summary>
    ///<param name="name">The name of the item to add. eg: Beer</param>
    public void AddItem(string name)
    {
        _haContext.CallService("shopping_list", "add_item", null, new ShoppingListAddItemParameters { Name = name });
    }

    ///<summary>Clear completed items from the shopping list.</summary>
    public void ClearCompletedItems()
    {
        _haContext.CallService("shopping_list", "clear_completed_items", null);
    }

    ///<summary>Mark all items as completed in the shopping list (without removing them from the list).</summary>
    public void CompleteAll()
    {
        _haContext.CallService("shopping_list", "complete_all", null);
    }

    ///<summary>Mark the first item with matching name as completed in the shopping list.</summary>
    public void CompleteItem(ShoppingListCompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "complete_item", null, data);
    }

    ///<summary>Mark the first item with matching name as completed in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as completed (without removing). eg: Beer</param>
    public void CompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "complete_item", null, new ShoppingListCompleteItemParameters { Name = name });
    }

    ///<summary>Mark all items as incomplete in the shopping list.</summary>
    public void IncompleteAll()
    {
        _haContext.CallService("shopping_list", "incomplete_all", null);
    }

    ///<summary>Mark the first item with matching name as incomplete in the shopping list.</summary>
    public void IncompleteItem(ShoppingListIncompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, data);
    }

    ///<summary>Mark the first item with matching name as incomplete in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as incomplete. eg: Beer</param>
    public void IncompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, new ShoppingListIncompleteItemParameters { Name = name });
    }

    ///<summary>Remove the first item with matching name from the shopping list.</summary>
    public void RemoveItem(ShoppingListRemoveItemParameters data)
    {
        _haContext.CallService("shopping_list", "remove_item", null, data);
    }

    ///<summary>Remove the first item with matching name from the shopping list.</summary>
    ///<param name="name">The name of the item to remove. eg: Beer</param>
    public void RemoveItem(string name)
    {
        _haContext.CallService("shopping_list", "remove_item", null, new ShoppingListRemoveItemParameters { Name = name });
    }
}

public partial record ShoppingListAddItemParameters
{
    ///<summary>The name of the item to add. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListCompleteItemParameters
{
    ///<summary>The name of the item to mark as completed (without removing). eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListIncompleteItemParameters
{
    ///<summary>The name of the item to mark as incomplete. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListRemoveItemParameters
{
    ///<summary>The name of the item to remove. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a siren.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turn siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turn siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turn siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit when turning the siren on. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume level of the noise to emit when turning the siren on. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit when turning the siren on. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume level of the noise to emit when turning the siren on. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SkodaconnectServices
{
    private readonly IHaContext _haContext;
    public SkodaconnectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set the limit that the charger will charge directly to when a departure timer is active. </summary>
    public void SetChargeLimit(SkodaconnectSetChargeLimitParameters data)
    {
        _haContext.CallService("skodaconnect", "set_charge_limit", null, data);
    }

    ///<summary>Set the limit that the charger will charge directly to when a departure timer is active. </summary>
    ///<param name="deviceId">The vehicle to set charge limit for</param>
    ///<param name="limit">The charging upper limit eg: 50</param>
    public void SetChargeLimit(string deviceId, long? limit = null)
    {
        _haContext.CallService("skodaconnect", "set_charge_limit", null, new SkodaconnectSetChargeLimitParameters { DeviceId = deviceId, Limit = limit });
    }

    ///<summary>Set the global maximum charging current. </summary>
    public void SetChargerMaxCurrent(SkodaconnectSetChargerMaxCurrentParameters data)
    {
        _haContext.CallService("skodaconnect", "set_charger_max_current", null, data);
    }

    ///<summary>Set the global maximum charging current. </summary>
    ///<param name="deviceId">The vehicle to set maximum current for</param>
    ///<param name="current">Maximum current. String (Maximum or Reduced/Minimum) or int 1-255 (1-32 = Amps, 252 = Reduced, 254 = Maximum).  eg: 16</param>
    public void SetChargerMaxCurrent(string deviceId, long? current = null)
    {
        _haContext.CallService("skodaconnect", "set_charger_max_current", null, new SkodaconnectSetChargerMaxCurrentParameters { DeviceId = deviceId, Current = current });
    }

    ///<summary>Start/stop climatisation with optional parameters</summary>
    public void SetClimater(SkodaconnectSetClimaterParameters data)
    {
        _haContext.CallService("skodaconnect", "set_climater", null, data);
    }

    ///<summary>Start/stop climatisation with optional parameters</summary>
    ///<param name="deviceId">The vehicle to set climatisation settings for</param>
    ///<param name="enabled">Start or stop the climatisation eg: True</param>
    ///<param name="temp">The target temperature for climatisation (unselect to use vehicles stored setting) eg: 20</param>
    ///<param name="batteryPower">Allow the use of battery power to run electric climatisation (unselect to use vehicles stored setting)  eg: True</param>
    ///<param name="auxHeater">Use the auxiliary heater for climatisation (disable to use electric), requires S-PIN and car with aux heater  eg: False</param>
    ///<param name="spin">The S-PIN for the vehicle  eg: 1234</param>
    public void SetClimater(string deviceId, bool? enabled = null, double? temp = null, bool? batteryPower = null, bool? auxHeater = null, string? spin = null)
    {
        _haContext.CallService("skodaconnect", "set_climater", null, new SkodaconnectSetClimaterParameters { DeviceId = deviceId, Enabled = enabled, Temp = temp, BatteryPower = batteryPower, AuxHeater = auxHeater, Spin = spin });
    }

    ///<summary>Set the departure for one of the departure schedules. </summary>
    public void SetDepartureSchedule(SkodaconnectSetDepartureScheduleParameters data)
    {
        _haContext.CallService("skodaconnect", "set_departure_schedule", null, data);
    }

    ///<summary>Set the departure for one of the departure schedules. </summary>
    ///<param name="deviceId">[Required] The vehicle to set departure schedule for.</param>
    ///<param name="id">[Required] Which departure schedule to change. eg: 1</param>
    ///<param name="time">[Required] The time for departure, 24h HH:MM. eg: 17:00</param>
    ///<param name="enabled">[Required] If the departure schedule should be activated. eg: True</param>
    ///<param name="recurring">[Required] Wether the schedule should be recurring or one off. eg: False</param>
    ///<param name="date">The date for departure (required for single schedule, not recurring). eg: 2021-06-31</param>
    ///<param name="days">Weekday mask for recurring schedule, mon-sun - (required for recurring schedule, not single). eg: yyynnnn</param>
    ///<param name="temp">[Optional] Target temperature for climatisation. Global setting and affects all climatisation actions and schedules. eg: 20</param>
    ///<param name="climatisation">[Optional] Wether or not to enable climatisation for this departure. eg: True</param>
    ///<param name="charging">[Optional] Wether or not to enable charging for this departure. eg: True</param>
    ///<param name="chargeCurrent">[Optional] Maximum charging current for this departure. (1-254 or maximum/reduced) eg: Maximum</param>
    ///<param name="chargeTarget">[Optional] The target charge level for departure. eg: 100</param>
    ///<param name="heaterSource">[Optional] Enable allow use of aux heater for next departure eg: True</param>
    ///<param name="spin">[Optional] Security PIN, required if enabling Auxiliary heater.  eg: 1234</param>
    ///<param name="offPeakActive">[Optional] Enable off-peak hours eg: False</param>
    ///<param name="offPeakStart">[Optional] The time when off-peak hours for electric price start, 24h HH:MM. eg: 00:00</param>
    ///<param name="offPeakEnd">[Optional] The time when off-peak hours for electric price end, 24h HH:MM. eg: 06:00</param>
    public void SetDepartureSchedule(string deviceId, long id, string time, bool enabled, bool recurring, string? date = null, string? days = null, double? temp = null, bool? climatisation = null, bool? charging = null, string? chargeCurrent = null, long? chargeTarget = null, bool? heaterSource = null, string? spin = null, bool? offPeakActive = null, string? offPeakStart = null, string? offPeakEnd = null)
    {
        _haContext.CallService("skodaconnect", "set_departure_schedule", null, new SkodaconnectSetDepartureScheduleParameters { DeviceId = deviceId, Id = id, Time = time, Enabled = enabled, Recurring = recurring, Date = date, Days = days, Temp = temp, Climatisation = climatisation, Charging = charging, ChargeCurrent = chargeCurrent, ChargeTarget = chargeTarget, HeaterSource = heaterSource, Spin = spin, OffPeakActive = offPeakActive, OffPeakStart = offPeakStart, OffPeakEnd = offPeakEnd });
    }

    ///<summary>Set the runtime of the parking heater on supported cars. </summary>
    public void SetPheaterDuration(SkodaconnectSetPheaterDurationParameters data)
    {
        _haContext.CallService("skodaconnect", "set_pheater_duration", null, data);
    }

    ///<summary>Set the runtime of the parking heater on supported cars. </summary>
    ///<param name="deviceId">The vehicle to set parking heater duration for</param>
    ///<param name="duration">Runtime for heating or ventilation of the parking heater. eg: 20</param>
    public void SetPheaterDuration(string deviceId, long duration)
    {
        _haContext.CallService("skodaconnect", "set_pheater_duration", null, new SkodaconnectSetPheaterDurationParameters { DeviceId = deviceId, Duration = duration });
    }
}

public partial record SkodaconnectSetChargeLimitParameters
{
    ///<summary>The vehicle to set charge limit for</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>The charging upper limit eg: 50</summary>
    [JsonPropertyName("limit")]
    public long? Limit { get; init; }
}

public partial record SkodaconnectSetChargerMaxCurrentParameters
{
    ///<summary>The vehicle to set maximum current for</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Maximum current. String (Maximum or Reduced/Minimum) or int 1-255 (1-32 = Amps, 252 = Reduced, 254 = Maximum).  eg: 16</summary>
    [JsonPropertyName("current")]
    public long? Current { get; init; }
}

public partial record SkodaconnectSetClimaterParameters
{
    ///<summary>The vehicle to set climatisation settings for</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Start or stop the climatisation eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }

    ///<summary>The target temperature for climatisation (unselect to use vehicles stored setting) eg: 20</summary>
    [JsonPropertyName("temp")]
    public double? Temp { get; init; }

    ///<summary>Allow the use of battery power to run electric climatisation (unselect to use vehicles stored setting)  eg: True</summary>
    [JsonPropertyName("battery_power")]
    public bool? BatteryPower { get; init; }

    ///<summary>Use the auxiliary heater for climatisation (disable to use electric), requires S-PIN and car with aux heater  eg: False</summary>
    [JsonPropertyName("aux_heater")]
    public bool? AuxHeater { get; init; }

    ///<summary>The S-PIN for the vehicle  eg: 1234</summary>
    [JsonPropertyName("spin")]
    public string? Spin { get; init; }
}

public partial record SkodaconnectSetDepartureScheduleParameters
{
    ///<summary>[Required] The vehicle to set departure schedule for.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>[Required] Which departure schedule to change. eg: 1</summary>
    [JsonPropertyName("id")]
    public long? Id { get; init; }

    ///<summary>[Required] The time for departure, 24h HH:MM. eg: 17:00</summary>
    [JsonPropertyName("time")]
    public string? Time { get; init; }

    ///<summary>[Required] If the departure schedule should be activated. eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }

    ///<summary>[Required] Wether the schedule should be recurring or one off. eg: False</summary>
    [JsonPropertyName("recurring")]
    public bool? Recurring { get; init; }

    ///<summary>The date for departure (required for single schedule, not recurring). eg: 2021-06-31</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>Weekday mask for recurring schedule, mon-sun - (required for recurring schedule, not single). eg: yyynnnn</summary>
    [JsonPropertyName("days")]
    public string? Days { get; init; }

    ///<summary>[Optional] Target temperature for climatisation. Global setting and affects all climatisation actions and schedules. eg: 20</summary>
    [JsonPropertyName("temp")]
    public double? Temp { get; init; }

    ///<summary>[Optional] Wether or not to enable climatisation for this departure. eg: True</summary>
    [JsonPropertyName("climatisation")]
    public bool? Climatisation { get; init; }

    ///<summary>[Optional] Wether or not to enable charging for this departure. eg: True</summary>
    [JsonPropertyName("charging")]
    public bool? Charging { get; init; }

    ///<summary>[Optional] Maximum charging current for this departure. (1-254 or maximum/reduced) eg: Maximum</summary>
    [JsonPropertyName("charge_current")]
    public string? ChargeCurrent { get; init; }

    ///<summary>[Optional] The target charge level for departure. eg: 100</summary>
    [JsonPropertyName("charge_target")]
    public long? ChargeTarget { get; init; }

    ///<summary>[Optional] Enable allow use of aux heater for next departure eg: True</summary>
    [JsonPropertyName("heater_source")]
    public bool? HeaterSource { get; init; }

    ///<summary>[Optional] Security PIN, required if enabling Auxiliary heater.  eg: 1234</summary>
    [JsonPropertyName("spin")]
    public string? Spin { get; init; }

    ///<summary>[Optional] Enable off-peak hours eg: False</summary>
    [JsonPropertyName("off_peak_active")]
    public bool? OffPeakActive { get; init; }

    ///<summary>[Optional] The time when off-peak hours for electric price start, 24h HH:MM. eg: 00:00</summary>
    [JsonPropertyName("off_peak_start")]
    public string? OffPeakStart { get; init; }

    ///<summary>[Optional] The time when off-peak hours for electric price end, 24h HH:MM. eg: 06:00</summary>
    [JsonPropertyName("off_peak_end")]
    public string? OffPeakEnd { get; init; }
}

public partial record SkodaconnectSetPheaterDurationParameters
{
    ///<summary>The vehicle to set parking heater duration for</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Runtime for heating or ventilation of the parking heater. eg: 20</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial class SonosServices
{
    private readonly IHaContext _haContext;
    public SonosServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSleepTimer(ServiceTarget target)
    {
        _haContext.CallService("sonos", "clear_sleep_timer", target);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayQueue(ServiceTarget target, SonosPlayQueueParameters data)
    {
        _haContext.CallService("sonos", "play_queue", target, data);
    }

    ///<summary>Start playing the queue from the first item.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="queuePosition">Position of the song in the queue to start playing from.</param>
    public void PlayQueue(ServiceTarget target, long? queuePosition = null)
    {
        _haContext.CallService("sonos", "play_queue", target, new SonosPlayQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveFromQueue(ServiceTarget target, SonosRemoveFromQueueParameters data)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, data);
    }

    ///<summary>Removes an item from the queue.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="queuePosition">Position in the queue to remove.</param>
    public void RemoveFromQueue(ServiceTarget target, long? queuePosition = null)
    {
        _haContext.CallService("sonos", "remove_from_queue", target, new SonosRemoveFromQueueParameters { QueuePosition = queuePosition });
    }

    ///<summary>Restore a snapshot of the media player.</summary>
    public void Restore(SonosRestoreParameters data)
    {
        _haContext.CallService("sonos", "restore", null, data);
    }

    ///<summary>Restore a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be restored.</param>
    ///<param name="withGroup">True or False. Also restore the group layout.</param>
    public void Restore(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "restore", null, new SonosRestoreParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Set a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSleepTimer(ServiceTarget target, SonosSetSleepTimerParameters data)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, data);
    }

    ///<summary>Set a Sonos timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sleepTime">Number of seconds to set the timer.</param>
    public void SetSleepTimer(ServiceTarget target, long? sleepTime = null)
    {
        _haContext.CallService("sonos", "set_sleep_timer", target, new SonosSetSleepTimerParameters { SleepTime = sleepTime });
    }

    ///<summary>Take a snapshot of the media player.</summary>
    public void Snapshot(SonosSnapshotParameters data)
    {
        _haContext.CallService("sonos", "snapshot", null, data);
    }

    ///<summary>Take a snapshot of the media player.</summary>
    ///<param name="entityId">Name of entity that will be snapshot.</param>
    ///<param name="withGroup">True or False. Also snapshot the group layout.</param>
    public void Snapshot(string? entityId = null, bool? withGroup = null)
    {
        _haContext.CallService("sonos", "snapshot", null, new SonosSnapshotParameters { EntityId = entityId, WithGroup = withGroup });
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateAlarm(ServiceTarget target, SonosUpdateAlarmParameters data)
    {
        _haContext.CallService("sonos", "update_alarm", target, data);
    }

    ///<summary>Updates an alarm with new time and volume settings.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="alarmId">ID for the alarm to be updated.</param>
    ///<param name="time">Set time for the alarm. eg: 07:00</param>
    ///<param name="volume">Set alarm volume level.</param>
    ///<param name="enabled">Enable or disable the alarm.</param>
    ///<param name="includeLinkedZones">Enable or disable including grouped rooms.</param>
    public void UpdateAlarm(ServiceTarget target, long alarmId, DateTime? time = null, double? volume = null, bool? enabled = null, bool? includeLinkedZones = null)
    {
        _haContext.CallService("sonos", "update_alarm", target, new SonosUpdateAlarmParameters { AlarmId = alarmId, Time = time, Volume = volume, Enabled = enabled, IncludeLinkedZones = includeLinkedZones });
    }
}

public partial record SonosPlayQueueParameters
{
    ///<summary>Position of the song in the queue to start playing from.</summary>
    [JsonPropertyName("queue_position")]
    public long? QueuePosition { get; init; }
}

public partial record SonosRemoveFromQueueParameters
{
    ///<summary>Position in the queue to remove.</summary>
    [JsonPropertyName("queue_position")]
    public long? QueuePosition { get; init; }
}

public partial record SonosRestoreParameters
{
    ///<summary>Name of entity that will be restored.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also restore the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosSetSleepTimerParameters
{
    ///<summary>Number of seconds to set the timer.</summary>
    [JsonPropertyName("sleep_time")]
    public long? SleepTime { get; init; }
}

public partial record SonosSnapshotParameters
{
    ///<summary>Name of entity that will be snapshot.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>True or False. Also snapshot the group layout.</summary>
    [JsonPropertyName("with_group")]
    public bool? WithGroup { get; init; }
}

public partial record SonosUpdateAlarmParameters
{
    ///<summary>ID for the alarm to be updated.</summary>
    [JsonPropertyName("alarm_id")]
    public long? AlarmId { get; init; }

    ///<summary>Set time for the alarm. eg: 07:00</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>Set alarm volume level.</summary>
    [JsonPropertyName("volume")]
    public double? Volume { get; init; }

    ///<summary>Enable or disable the alarm.</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }

    ///<summary>Enable or disable including grouped rooms.</summary>
    [JsonPropertyName("include_linked_zones")]
    public bool? IncludeLinkedZones { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch state</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turn a switch off</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turn a switch on</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SynologyDsmServices
{
    private readonly IHaContext _haContext;
    public SynologyDsmServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reboot the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    public void Reboot(SynologyDsmRebootParameters data)
    {
        _haContext.CallService("synology_dsm", "reboot", null, data);
    }

    ///<summary>Reboot the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    ///<param name="serial">serial of the NAS to reboot; required when multiple NAS are configured. eg: 1NDVC86409</param>
    public void Reboot(string? serial = null)
    {
        _haContext.CallService("synology_dsm", "reboot", null, new SynologyDsmRebootParameters { Serial = serial });
    }

    ///<summary>Shutdown the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    public void Shutdown(SynologyDsmShutdownParameters data)
    {
        _haContext.CallService("synology_dsm", "shutdown", null, data);
    }

    ///<summary>Shutdown the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    ///<param name="serial">serial of the NAS to shutdown; required when multiple NAS are configured. eg: 1NDVC86409</param>
    public void Shutdown(string? serial = null)
    {
        _haContext.CallService("synology_dsm", "shutdown", null, new SynologyDsmShutdownParameters { Serial = serial });
    }
}

public partial record SynologyDsmRebootParameters
{
    ///<summary>serial of the NAS to reboot; required when multiple NAS are configured. eg: 1NDVC86409</summary>
    [JsonPropertyName("serial")]
    public string? Serial { get; init; }
}

public partial record SynologyDsmShutdownParameters
{
    ///<summary>serial of the NAS to shutdown; required when multiple NAS are configured. eg: 1NDVC86409</summary>
    [JsonPropertyName("serial")]
    public string? Serial { get; init; }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to &apos;system_log.external&apos;. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to &apos;system_log.external&apos;. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all template entities.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set value of a text entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Set value of a text entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to set. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Value to set. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancel a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Finish a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pause a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Remove all text-to-speech cache files and RAM cache.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId">Name(s) of media player entities.</param>
    ///<param name="message">Text to speak on devices. eg: My name is hanna</param>
    ///<param name="cache">Control file cache of this message.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId">Name(s) of media player entities.</param>
    ///<param name="message">Text to speak on devices. eg: My name is hanna</param>
    ///<param name="cache">Control file cache of this message.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    ///<summary>Name(s) of media player entities.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Text to speak on devices. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Control file cache of this message.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    ///<summary>Name(s) of media player entities.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Text to speak on devices. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Control file cache of this message.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Mark currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>Version to install, if omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>Backup before installing the update, if supported by the integration.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class UtilityMeterServices
{
    private readonly IHaContext _haContext;
    public UtilityMeterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void Calibrate(ServiceTarget target, UtilityMeterCalibrateParameters data)
    {
        _haContext.CallService("utility_meter", "calibrate", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public void Calibrate(ServiceTarget target, string value)
    {
        _haContext.CallService("utility_meter", "calibrate", target, new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("utility_meter", "reset", target);
    }
}

public partial record UtilityMeterCalibrateParameters
{
    ///<summary>Value to which set the meter eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tell the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locate the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pause the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tell the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Platform dependent vacuum cleaner fan speed, with speed steps, like &apos;medium&apos; or by percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Start or resume the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Start, pause, or resume the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartPause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start_pause", target);
    }

    ///<summary>Stop the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }

    public void Toggle()
    {
        _haContext.CallService("vacuum", "toggle", null);
    }

    ///<summary>Stop the current cleaning task and return to home.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_off", target);
    }

    ///<summary>Start a new cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_on", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Platform dependent vacuum cleaner fan speed, with speed steps, like &apos;medium&apos; or by percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WasteCollectionScheduleServices
{
    private readonly IHaContext _haContext;
    public WasteCollectionScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Fetch data from all sources.</summary>
    public void FetchData()
    {
        _haContext.CallService("waste_collection_schedule", "fetch_data", null);
    }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear a user code from a lock</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clear a user code from a lock</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to clear code from eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disable a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disable a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to disable eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enable a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enable a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to enable eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issue command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint id for the cluster</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for</param>
    ///<param name="clusterType">type of the cluster</param>
    ///<param name="command">id of the command to execute</param>
    ///<param name="commandType">type of the command to execute</param>
    ///<param name="args">args to pass to the command eg: [arg1, arg2, argN]</param>
    ///<param name="params">parameters to pass to the command</param>
    ///<param name="manufacturer">manufacturer code eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, long endpointId, long clusterId, long command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to</param>
    ///<param name="clusterType">type of the cluster</param>
    ///<param name="command">id of the command to execute</param>
    ///<param name="args">args to pass to the command eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">manufacturer code eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, long clusterId, long command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allow nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allow nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins, in seconds</param>
    ///<param name="ieee">IEEE address of the node permitting new joins eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be used with install code) eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be used with source_ieee) eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">value of the QR install code (different between vendors) eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(long? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Remove a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Remove a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Set a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Set a user code on a lock</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to set the code in eg: 1</param>
    ///<param name="userCode">Code to set eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Set attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Set attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint id for the cluster</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for</param>
    ///<param name="clusterType">type of the cluster</param>
    ///<param name="attribute">id of the attribute to set eg: 0</param>
    ///<param name="value">value to write to the attribute eg: 1</param>
    ///<param name="manufacturer">manufacturer code eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, long endpointId, long clusterId, long attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This service uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This service uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, long? mode = null, long? strobe = null, long? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This service starts the WD operation. The WD alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This service starts the WD operation. The WD alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as an 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the WD device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”) then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field SHALL be ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This provides a means of varying the flash duration for different alarm types (e.g., fire, police, burglar). Valid range is 0-100 in increments of 10. All other values SHALL be rounded to the nearest valid value. Strobe SHALL calculate duty cycle over a duration of one second. The ON state SHALL precede the OFF state. For example, if Strobe Duty Cycle Field specifies “40,” then the strobe SHALL flash ON for 4/10ths of a second and then turn OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, long? mode = null, long? strobe = null, long? level = null, long? duration = null, long? dutyCycle = null, long? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint id for the cluster</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>type of the cluster</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>id of the command to execute</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>type of the command to execute</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>args to pass to the command eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>parameters to pass to the command</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>manufacturer code eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>type of the cluster</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>id of the command to execute</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>args to pass to the command eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>manufacturer code eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins, in seconds</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be used with install code) eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be used with source_ieee) eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>value of the QR install code (different between vendors) eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint id for the cluster</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>type of the cluster</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>id of the attribute to set eg: 0</summary>
    [JsonPropertyName("attribute")]
    public long? Attribute { get; init; }

    ///<summary>value to write to the attribute eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>manufacturer code eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as an 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the WD device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”) then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field SHALL be ignored.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This provides a means of varying the flash duration for different alarm types (e.g., fire, police, burglar). Valid range is 0-100 in increments of 10. All other values SHALL be rounded to the nearest valid value. Strobe SHALL calculate duty cycle over a duration of one second. The ON state SHALL precede the OFF state. For example, if Strobe Duty Cycle Field specifies “40,” then the strobe SHALL flash ON for 4/10ths of a second and then turn OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public long? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the YAML-based zone configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Send the alarm the command for arm away.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm away the alarm control panel with. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm away the alarm control panel with. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Send arm custom bypass command.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Send arm custom bypass command.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm custom bypass the alarm control panel with. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm custom bypass the alarm control panel with. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm home the alarm control panel with. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm home the alarm control panel with. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm night the alarm control panel with. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm night the alarm control panel with. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to arm vacation the alarm control panel with. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to arm vacation the alarm control panel with. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to disarm the alarm control panel with. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to disarm the alarm control panel with. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">An optional code to trigger the alarm control panel with. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to trigger the alarm control panel with. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggle (enable / disable) an automation.</summary>
    public static void Toggle(this AutomationEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Trigger the actions of an automation.</summary>
    public static void Trigger(this AutomationEntity target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<AutomationEntity> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public static void Trigger(this AutomationEntity target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;AutomationEntity&gt; to call this service for</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<AutomationEntity> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disable an automation.</summary>
    public static void TurnOff(this AutomationEntity target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disable an automation.</summary>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public static void TurnOff(this AutomationEntity target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The IEnumerable&lt;AutomationEntity&gt; to call this service for</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enable an automation.</summary>
    public static void TurnOn(this AutomationEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enable an automation.</summary>
    public static void TurnOn(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this ButtonEntity target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<ButtonEntity> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this CalendarEntity target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The CalendarEntity to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event eg: Department Party</param>
    ///<param name="description">A more complete description of the event than that provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    public static void CreateEvent(this CalendarEntity target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in });
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;CalendarEntity&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event eg: Department Party</param>
    ///<param name="description">A more complete description of the event than that provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    public static void CreateEvent(this IEnumerable<CalendarEntity> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disable the motion detection in a camera.</summary>
    public static void DisableMotionDetection(this CameraEntity target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disable the motion detection in a camera.</summary>
    public static void DisableMotionDetection(this IEnumerable<CameraEntity> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enable the motion detection in a camera.</summary>
    public static void EnableMotionDetection(this CameraEntity target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enable the motion detection in a camera.</summary>
    public static void EnableMotionDetection(this IEnumerable<CameraEntity> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Play camera stream on supported media player.</summary>
    public static void PlayStream(this CameraEntity target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    public static void PlayStream(this IEnumerable<CameraEntity> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="mediaPlayer">Name(s) of media player to stream to.</param>
    ///<param name="format">Stream format supported by media player.</param>
    public static void PlayStream(this CameraEntity target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="mediaPlayer">Name(s) of media player to stream to.</param>
    ///<param name="format">Stream format supported by media player.</param>
    public static void PlayStream(this IEnumerable<CameraEntity> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Record live camera feed.</summary>
    public static void Record(this CameraEntity target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Record live camera feed.</summary>
    public static void Record(this IEnumerable<CameraEntity> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Target recording length.</param>
    ///<param name="lookback">Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</param>
    public static void Record(this CameraEntity target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Target recording length.</param>
    ///<param name="lookback">Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</param>
    public static void Record(this IEnumerable<CameraEntity> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Take a snapshot from a camera.</summary>
    public static void Snapshot(this CameraEntity target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Take a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<CameraEntity> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The CameraEntity to call this service for</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this CameraEntity target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;CameraEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<CameraEntity> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turn off camera.</summary>
    public static void TurnOff(this CameraEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn off camera.</summary>
    public static void TurnOff(this IEnumerable<CameraEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn on camera.</summary>
    public static void TurnOn(this CameraEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn on camera.</summary>
    public static void TurnOn(this IEnumerable<CameraEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ElgatoEntityExtensionMethods
{
    ///<summary>Identify an Elgato Light. Blinks the light, which can be useful for, e.g., a visual notification.</summary>
    public static void Identify(this LightEntity target)
    {
        target.CallService("identify");
    }

    ///<summary>Identify an Elgato Light. Blinks the light, which can be useful for, e.g., a visual notification.</summary>
    public static void Identify(this IEnumerable<LightEntity> target)
    {
        target.CallService("identify");
    }
}

public static class HueEntityExtensionMethods
{
    ///<summary>Activate a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this SceneEntity target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activate a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this IEnumerable<SceneEntity> target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activate a Hue scene with more control over the options.</summary>
    ///<param name="target">The SceneEntity to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this SceneEntity target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activate a Hue scene with more control over the options.</summary>
    ///<param name="target">The IEnumerable&lt;SceneEntity&gt; to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this IEnumerable<SceneEntity> target, long? transition = null, bool? dynamic = null, long? speed = null, long? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggle an input boolean</summary>
    public static void Toggle(this InputBooleanEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle an input boolean</summary>
    public static void Toggle(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn off an input boolean</summary>
    public static void TurnOff(this InputBooleanEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn off an input boolean</summary>
    public static void TurnOff(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn on an input boolean</summary>
    public static void TurnOn(this InputBooleanEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn on an input boolean</summary>
    public static void TurnOn(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Press the input button entity.</summary>
    public static void Press(this InputButtonEntity target)
    {
        target.CallService("press");
    }

    ///<summary>Press the input button entity.</summary>
    public static void Press(this IEnumerable<InputButtonEntity> target)
    {
        target.CallService("press");
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    public static void SetDatetime(this InputDatetimeEntity target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<InputDatetimeEntity> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The InputDatetimeEntity to call this service for</param>
    ///<param name="date">The target date the entity should be set to. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time the entity should be set to. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time the entity should be set to. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time the entity should be set to as expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this InputDatetimeEntity target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;InputDatetimeEntity&gt; to call this service for</param>
    ///<param name="date">The target date the entity should be set to. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time the entity should be set to. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time the entity should be set to. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time the entity should be set to as expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<InputDatetimeEntity> target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrement the value of an input number entity by its stepping.</summary>
    public static void Decrement(this InputNumberEntity target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrement the value of an input number entity by its stepping.</summary>
    public static void Decrement(this IEnumerable<InputNumberEntity> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increment the value of an input number entity by its stepping.</summary>
    public static void Increment(this InputNumberEntity target)
    {
        target.CallService("increment");
    }

    ///<summary>Increment the value of an input number entity by its stepping.</summary>
    public static void Increment(this IEnumerable<InputNumberEntity> target)
    {
        target.CallService("increment");
    }

    ///<summary>Set the value of an input number entity.</summary>
    public static void SetValue(this InputNumberEntity target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of an input number entity.</summary>
    public static void SetValue(this IEnumerable<InputNumberEntity> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The InputNumberEntity to call this service for</param>
    ///<param name="value">The target value the entity should be set to.</param>
    public static void SetValue(this InputNumberEntity target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputNumberEntity&gt; to call this service for</param>
    ///<param name="value">The target value the entity should be set to.</param>
    public static void SetValue(this IEnumerable<InputNumberEntity> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Select the first option of an input select entity.</summary>
    public static void SelectFirst(this InputSelectEntity target)
    {
        target.CallService("select_first");
    }

    ///<summary>Select the first option of an input select entity.</summary>
    public static void SelectFirst(this IEnumerable<InputSelectEntity> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Select the last option of an input select entity.</summary>
    public static void SelectLast(this InputSelectEntity target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the last option of an input select entity.</summary>
    public static void SelectLast(this IEnumerable<InputSelectEntity> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next options of an input select entity.</summary>
    public static void SelectNext(this InputSelectEntity target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    public static void SelectNext(this IEnumerable<InputSelectEntity> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this InputSelectEntity target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<InputSelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select an option of an input select entity.</summary>
    public static void SelectOption(this InputSelectEntity target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an input select entity.</summary>
    public static void SelectOption(this IEnumerable<InputSelectEntity> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this InputSelectEntity target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<InputSelectEntity> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    public static void SelectPrevious(this InputSelectEntity target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    public static void SelectPrevious(this IEnumerable<InputSelectEntity> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this InputSelectEntity target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<InputSelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Set the options of an input select entity.</summary>
    public static void SetOptions(this InputSelectEntity target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Set the options of an input select entity.</summary>
    public static void SetOptions(this IEnumerable<InputSelectEntity> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The InputSelectEntity to call this service for</param>
    ///<param name="options">Options for the input select entity. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this InputSelectEntity target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputSelectEntity&gt; to call this service for</param>
    ///<param name="options">Options for the input select entity. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<InputSelectEntity> target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Set the value of an input text entity.</summary>
    public static void SetValue(this InputTextEntity target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of an input text entity.</summary>
    public static void SetValue(this IEnumerable<InputTextEntity> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The InputTextEntity to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: This is an example text</param>
    public static void SetValue(this InputTextEntity target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The IEnumerable&lt;InputTextEntity&gt; to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<InputTextEntity> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    public static void Toggle(this LightEntity target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    public static void Toggle(this IEnumerable<LightEntity> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this LightEntity target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<LightEntity> target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this LightEntity target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<LightEntity> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public static void TurnOff(this LightEntity target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public static void TurnOff(this IEnumerable<LightEntity> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    public static void TurnOn(this LightEntity target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    public static void TurnOn(this IEnumerable<LightEntity> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode and change its brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this LightEntity target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, long? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The IEnumerable&lt;LightEntity&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode and change its brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<LightEntity> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, long? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Lock all or specified locks.</summary>
    public static void Lock(this LockEntity target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Lock all or specified locks.</summary>
    public static void Lock(this IEnumerable<LockEntity> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">An optional code to lock the lock with. eg: 1234</param>
    public static void Lock(this LockEntity target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to lock the lock with. eg: 1234</param>
    public static void Lock(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Open all or specified locks.</summary>
    public static void Open(this LockEntity target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Open all or specified locks.</summary>
    public static void Open(this IEnumerable<LockEntity> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">An optional code to open the lock with. eg: 1234</param>
    public static void Open(this LockEntity target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to open the lock with. eg: 1234</param>
    public static void Open(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Unlock all or specified locks.</summary>
    public static void Unlock(this LockEntity target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlock all or specified locks.</summary>
    public static void Unlock(this IEnumerable<LockEntity> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">An optional code to unlock the lock with. eg: 1234</param>
    public static void Unlock(this LockEntity target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="code">An optional code to unlock the lock with. eg: 1234</param>
    public static void Unlock(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Send the media player the command to clear players playlist.</summary>
    public static void ClearPlaylist(this MediaPlayerEntity target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Send the media player the command to clear players playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    public static void Join(this MediaPlayerEntity target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this MediaPlayerEntity target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Send the media player the command for next track.</summary>
    public static void MediaNextTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Send the media player the command for next track.</summary>
    public static void MediaNextTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Send the media player the command for pause.</summary>
    public static void MediaPause(this MediaPlayerEntity target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Send the media player the command for pause.</summary>
    public static void MediaPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Send the media player the command for play.</summary>
    public static void MediaPlay(this MediaPlayerEntity target)
    {
        target.CallService("media_play");
    }

    ///<summary>Send the media player the command for play.</summary>
    public static void MediaPlay(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggle media player play/pause state.</summary>
    public static void MediaPlayPause(this MediaPlayerEntity target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggle media player play/pause state.</summary>
    public static void MediaPlayPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Send the media player the command for previous track.</summary>
    public static void MediaPreviousTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Send the media player the command for previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    public static void MediaSeek(this MediaPlayerEntity target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public static void MediaSeek(this MediaPlayerEntity target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Send the media player the stop command.</summary>
    public static void MediaStop(this MediaPlayerEntity target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Send the media player the stop command.</summary>
    public static void MediaStop(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Send the media player the command for playing media.</summary>
    public static void PlayMedia(this MediaPlayerEntity target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this MediaPlayerEntity target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Set repeat mode</summary>
    public static void RepeatSet(this MediaPlayerEntity target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Set repeat mode</summary>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this MediaPlayerEntity target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    public static void SelectSoundMode(this MediaPlayerEntity target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this MediaPlayerEntity target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Send the media player the command to change input source.</summary>
    public static void SelectSource(this MediaPlayerEntity target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this MediaPlayerEntity target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Set shuffling state.</summary>
    public static void ShuffleSet(this MediaPlayerEntity target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Set shuffling state.</summary>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public static void ShuffleSet(this MediaPlayerEntity target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player power state.</summary>
    public static void Toggle(this MediaPlayerEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player power state.</summary>
    public static void Toggle(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn a media player power off.</summary>
    public static void TurnOff(this MediaPlayerEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a media player power off.</summary>
    public static void TurnOff(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a media player power on.</summary>
    public static void TurnOn(this MediaPlayerEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn a media player power on.</summary>
    public static void TurnOn(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    public static void Unjoin(this MediaPlayerEntity target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    public static void Unjoin(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turn a media player volume down.</summary>
    public static void VolumeDown(this MediaPlayerEntity target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turn a media player volume down.</summary>
    public static void VolumeDown(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    public static void VolumeMute(this MediaPlayerEntity target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public static void VolumeMute(this MediaPlayerEntity target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mute a media player&apos;s volume.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    public static void VolumeSet(this MediaPlayerEntity target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public static void VolumeSet(this MediaPlayerEntity target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Set a media player&apos;s volume level.</summary>
    ///<param name="target">The IEnumerable&lt;MediaPlayerEntity&gt; to call this service for</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turn a media player volume up.</summary>
    public static void VolumeUp(this MediaPlayerEntity target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turn a media player volume up.</summary>
    public static void VolumeUp(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_up");
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Set the value of a Number entity.</summary>
    public static void SetValue(this NumberEntity target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    public static void SetValue(this IEnumerable<NumberEntity> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The NumberEntity to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public static void SetValue(this NumberEntity target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The IEnumerable&lt;NumberEntity&gt; to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public static void SetValue(this IEnumerable<NumberEntity> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this RemoteEntity target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<RemoteEntity> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Name of the device from which commands will be deleted. eg: television</param>
    ///<param name="command">A single command or a list of commands to delete. eg: Mute</param>
    public static void DeleteCommand(this RemoteEntity target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Name of the device from which commands will be deleted. eg: television</param>
    ///<param name="command">A single command or a list of commands to delete. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<RemoteEntity> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this RemoteEntity target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<RemoteEntity> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as alternative (useful for discrete remotes).</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this RemoteEntity target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as alternative (useful for discrete remotes).</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<RemoteEntity> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this RemoteEntity target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<RemoteEntity> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the command(s).</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this RemoteEntity target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the command(s).</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<RemoteEntity> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device.</summary>
    public static void Toggle(this RemoteEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a device.</summary>
    public static void Toggle(this IEnumerable<RemoteEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Sends the Power Off Command.</summary>
    public static void TurnOff(this RemoteEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the Power Off Command.</summary>
    public static void TurnOff(this IEnumerable<RemoteEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the Power On Command.</summary>
    public static void TurnOn(this RemoteEntity target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the Power On Command.</summary>
    public static void TurnOn(this IEnumerable<RemoteEntity> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The RemoteEntity to call this service for</param>
    ///<param name="activity">Activity ID or Activity Name to start. eg: BedroomTV</param>
    public static void TurnOn(this RemoteEntity target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The IEnumerable&lt;RemoteEntity&gt; to call this service for</param>
    ///<param name="activity">Activity ID or Activity Name to start. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<RemoteEntity> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Activate a scene.</summary>
    public static void TurnOn(this SceneEntity target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activate a scene.</summary>
    public static void TurnOn(this IEnumerable<SceneEntity> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The SceneEntity to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public static void TurnOn(this SceneEntity target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The IEnumerable&lt;SceneEntity&gt; to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public static void TurnOn(this IEnumerable<SceneEntity> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Toggle script</summary>
    public static void Toggle(this ScriptEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle script</summary>
    public static void Toggle(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn off script</summary>
    public static void TurnOff(this ScriptEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn off script</summary>
    public static void TurnOff(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn on script</summary>
    public static void TurnOn(this ScriptEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn on script</summary>
    public static void TurnOn(this IEnumerable<ScriptEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Select the first option of an select entity.</summary>
    public static void SelectFirst(this SelectEntity target)
    {
        target.CallService("select_first");
    }

    ///<summary>Select the first option of an select entity.</summary>
    public static void SelectFirst(this IEnumerable<SelectEntity> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Select the last option of an select entity.</summary>
    public static void SelectLast(this SelectEntity target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the last option of an select entity.</summary>
    public static void SelectLast(this IEnumerable<SelectEntity> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next options of an select entity.</summary>
    public static void SelectNext(this SelectEntity target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    public static void SelectNext(this IEnumerable<SelectEntity> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this SelectEntity target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<SelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select an option of an select entity.</summary>
    public static void SelectOption(this SelectEntity target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an select entity.</summary>
    public static void SelectOption(this IEnumerable<SelectEntity> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this SelectEntity target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<SelectEntity> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    public static void SelectPrevious(this SelectEntity target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    public static void SelectPrevious(this IEnumerable<SelectEntity> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this SelectEntity target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The IEnumerable&lt;SelectEntity&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<SelectEntity> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch state</summary>
    public static void Toggle(this SwitchEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch state</summary>
    public static void Toggle(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn a switch off</summary>
    public static void TurnOff(this SwitchEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a switch off</summary>
    public static void TurnOff(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a switch on</summary>
    public static void TurnOn(this SwitchEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn a switch on</summary>
    public static void TurnOn(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class TimerEntityExtensionMethods
{
    ///<summary>Cancel a timer.</summary>
    public static void Cancel(this TimerEntity target)
    {
        target.CallService("cancel");
    }

    ///<summary>Cancel a timer.</summary>
    public static void Cancel(this IEnumerable<TimerEntity> target)
    {
        target.CallService("cancel");
    }

    ///<summary>Finish a timer.</summary>
    public static void Finish(this TimerEntity target)
    {
        target.CallService("finish");
    }

    ///<summary>Finish a timer.</summary>
    public static void Finish(this IEnumerable<TimerEntity> target)
    {
        target.CallService("finish");
    }

    ///<summary>Pause a timer.</summary>
    public static void Pause(this TimerEntity target)
    {
        target.CallService("pause");
    }

    ///<summary>Pause a timer.</summary>
    public static void Pause(this IEnumerable<TimerEntity> target)
    {
        target.CallService("pause");
    }

    ///<summary>Start a timer</summary>
    public static void Start(this TimerEntity target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Start a timer</summary>
    public static void Start(this IEnumerable<TimerEntity> target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The TimerEntity to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</param>
    public static void Start(this TimerEntity target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The IEnumerable&lt;TimerEntity&gt; to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</param>
    public static void Start(this IEnumerable<TimerEntity> target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this UpdateEntity target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Install an update for this device or service</summary>
    public static void Install(this UpdateEntity target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Install an update for this device or service</summary>
    public static void Install(this IEnumerable<UpdateEntity> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The UpdateEntity to call this service for</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public static void Install(this UpdateEntity target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The IEnumerable&lt;UpdateEntity&gt; to call this service for</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public static void Install(this IEnumerable<UpdateEntity> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Mark currently available update as skipped.</summary>
    public static void Skip(this UpdateEntity target)
    {
        target.CallService("skip");
    }

    ///<summary>Mark currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("skip");
    }
}

public static class UtilityMeterEntityExtensionMethods
{
    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this SensorEntity target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this IEnumerable<SensorEntity> target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The SensorEntity to call this service for</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public static void Calibrate(this SensorEntity target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;SensorEntity&gt; to call this service for</param>
    ///<param name="value">Value to which set the meter eg: 100</param>
    public static void Calibrate(this IEnumerable<SensorEntity> target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this SelectEntity target)
    {
        target.CallService("reset");
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this IEnumerable<SelectEntity> target)
    {
        target.CallService("reset");
    }
}

public static class VacuumEntityExtensionMethods
{
    ///<summary>Tell the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this VacuumEntity target)
    {
        target.CallService("clean_spot");
    }

    ///<summary>Tell the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("clean_spot");
    }

    ///<summary>Locate the vacuum cleaner robot.</summary>
    public static void Locate(this VacuumEntity target)
    {
        target.CallService("locate");
    }

    ///<summary>Locate the vacuum cleaner robot.</summary>
    public static void Locate(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("locate");
    }

    ///<summary>Pause the cleaning task.</summary>
    public static void Pause(this VacuumEntity target)
    {
        target.CallService("pause");
    }

    ///<summary>Pause the cleaning task.</summary>
    public static void Pause(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("pause");
    }

    ///<summary>Tell the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this VacuumEntity target)
    {
        target.CallService("return_to_base");
    }

    ///<summary>Tell the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("return_to_base");
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    public static void SendCommand(this VacuumEntity target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    public static void SendCommand(this IEnumerable<VacuumEntity> target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    ///<param name="target">The VacuumEntity to call this service for</param>
    ///<param name="command">Command to execute. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this VacuumEntity target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;VacuumEntity&gt; to call this service for</param>
    ///<param name="command">Command to execute. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IEnumerable<VacuumEntity> target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this VacuumEntity target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IEnumerable<VacuumEntity> target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The VacuumEntity to call this service for</param>
    ///<param name="fanSpeed">Platform dependent vacuum cleaner fan speed, with speed steps, like &apos;medium&apos; or by percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this VacuumEntity target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;VacuumEntity&gt; to call this service for</param>
    ///<param name="fanSpeed">Platform dependent vacuum cleaner fan speed, with speed steps, like &apos;medium&apos; or by percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IEnumerable<VacuumEntity> target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Start or resume the cleaning task.</summary>
    public static void Start(this VacuumEntity target)
    {
        target.CallService("start");
    }

    ///<summary>Start or resume the cleaning task.</summary>
    public static void Start(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("start");
    }

    ///<summary>Start, pause, or resume the cleaning task.</summary>
    public static void StartPause(this VacuumEntity target)
    {
        target.CallService("start_pause");
    }

    ///<summary>Start, pause, or resume the cleaning task.</summary>
    public static void StartPause(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("start_pause");
    }

    ///<summary>Stop the current cleaning task.</summary>
    public static void Stop(this VacuumEntity target)
    {
        target.CallService("stop");
    }

    ///<summary>Stop the current cleaning task.</summary>
    public static void Stop(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("stop");
    }

    ///<summary>Stop the current cleaning task and return to home.</summary>
    public static void TurnOff(this VacuumEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stop the current cleaning task and return to home.</summary>
    public static void TurnOff(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Start a new cleaning task.</summary>
    public static void TurnOn(this VacuumEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Start a new cleaning task.</summary>
    public static void TurnOn(this IEnumerable<VacuumEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ZhaEntityExtensionMethods
{
    ///<summary>Clear a user code from a lock</summary>
    public static void ClearLockUserCode(this LockEntity target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clear a user code from a lock</summary>
    public static void ClearLockUserCode(this IEnumerable<LockEntity> target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clear a user code from a lock</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from eg: 1</param>
    public static void ClearLockUserCode(this LockEntity target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Clear a user code from a lock</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from eg: 1</param>
    public static void ClearLockUserCode(this IEnumerable<LockEntity> target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disable a user code on a lock</summary>
    public static void DisableLockUserCode(this LockEntity target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disable a user code on a lock</summary>
    public static void DisableLockUserCode(this IEnumerable<LockEntity> target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disable a user code on a lock</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="codeSlot">Code slot to disable eg: 1</param>
    public static void DisableLockUserCode(this LockEntity target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disable a user code on a lock</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to disable eg: 1</param>
    public static void DisableLockUserCode(this IEnumerable<LockEntity> target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enable a user code on a lock</summary>
    public static void EnableLockUserCode(this LockEntity target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enable a user code on a lock</summary>
    public static void EnableLockUserCode(this IEnumerable<LockEntity> target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enable a user code on a lock</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="codeSlot">Code slot to enable eg: 1</param>
    public static void EnableLockUserCode(this LockEntity target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enable a user code on a lock</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to enable eg: 1</param>
    public static void EnableLockUserCode(this IEnumerable<LockEntity> target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Set a user code on a lock</summary>
    public static void SetLockUserCode(this LockEntity target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Set a user code on a lock</summary>
    public static void SetLockUserCode(this IEnumerable<LockEntity> target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Set a user code on a lock</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in eg: 1</param>
    ///<param name="userCode">Code to set eg: 1234</param>
    public static void SetLockUserCode(this LockEntity target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Set a user code on a lock</summary>
    ///<param name="target">The IEnumerable&lt;LockEntity&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in eg: 1</param>
    ///<param name="userCode">Code to set eg: 1234</param>
    public static void SetLockUserCode(this IEnumerable<LockEntity> target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }
}